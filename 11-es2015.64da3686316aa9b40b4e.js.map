{"version":3,"sources":["webpack:///src/app/dashboard/homebrew/homebrew.service.ts","webpack:///src/app/dashboard/homebrew/items/new-pack-dialog/new-pack-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/new-pack-dialog/new-pack-dialog.component.html","webpack:///src/app/schemas/homebrew/Items.ts","webpack:///src/app/dashboard/homebrew/items/pack-markdown-dialog/pack-markdown-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-markdown-dialog/pack-markdown-dialog.component.html","webpack:///src/app/dashboard/homebrew/items/pack-share-dialog/pack-share-dialog.component.html","webpack:///src/app/dashboard/homebrew/items/pack-share-dialog/pack-share-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/items.component.html","webpack:///src/app/dashboard/homebrew/items/items.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-delete-dialog/pack-delete-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-options-dialog/pack-options-dialog.component.html","webpack:///src/app/dashboard/homebrew/items/pack-delete-dialog/pack-delete-dialog.component.html","webpack:///src/app/dashboard/homebrew/items/pack-options-dialog/pack-options-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-detail/item-detail/item-detail.component.html","webpack:///src/app/dashboard/homebrew/items/pack-detail/item-detail/item-detail.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-detail/pack-detail.component.html","webpack:///src/app/dashboard/homebrew/items/pack-detail/pack-detail.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/new-tome-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/new-tome-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-markdown-dialog/tome-markdown-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-share-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-markdown-dialog/tome-markdown-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-share-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/spells.component.html","webpack:///src/app/dashboard/homebrew/spells/spells.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-delete-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-options-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-delete-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-options-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-detail/spell-panel-description/spell-panel-description.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-detail/spell-detail.component.html","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-detail/spell-detail.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-list/spell-list.component.html","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-list/spell-list.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-editor/spell-editor.component.html","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-editor/spell-editor.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/tome-detail.component.html","webpack:///src/app/dashboard/homebrew/spells/tome-detail/tome-detail.component.ts","webpack:///src/app/dashboard/homebrew/homebrew-routing.module.ts","webpack:///src/app/dashboard/homebrew/homebrew.module.ts"],"names":["itemsUrl","environment","apiURL","spellsUrl","http","this","get","pack","post","pipe","catchError","handleError","id","put","_id","$oid","delete","tome","data","err","of","success","result","error","operation","console","NewPackDialog","public","desc","image","REQUIRED_ITEM_PROPS","Item","name","meta","PackMarkdownDialog","generateMD","markdown","item","items","replace","mdData","inputElement","select","document","execCommand","setSelectionRange","copy","dialog","hbService","discord","shareLink","loaded","undefined","owner","getUser","loadEditors","loadItems","getPack","subscribe","getPackEditors","editors","out","forEach","eid","push","open","width","homebrewService","router","route","owners","Map","getPacks","getUserPacks","packs","requested","Set","has","add","user","set","disableClose","afterClosed","new","log","Object","assign","commit","newPack","navigate","packId","relativeTo","putPack","beginNew","PackDeleteDialog","dialogRef","isOwner","close","moveUp","moveDown","changed","opened","emit","dashboardService","location","snackBar","changesOpen","dismiss","snapshot","paramMap","calcCanEdit","canEdit","some","e","ensureChangesNotif","filter","obj","duration","horizontalPosition","onAction","validator","validatePackJSON","Array","getter","getTemplateItems","namer","a","parsed","Boolean","length","every","objectIsItem","componentInstance","loading","packIsValid","JSON","parse","v","deletePack","back","index","indexOf","newIndex","NewTomeDialog","spell","spells","generateSpellMD","title","schlev","level","school","casttime","ritual","range","concentration","description","higherlevels","loadSpells","getTomeEditors","getTome","getTomes","getUserTomes","tomes","newTome","tomeId","putTome","TomeDeleteDialog","genDesc","changes","moveToEditor","customSpellSchool","includes","selected","validateSpellJSON","getTemplateSpells","onValidationReply","automation","deleteTome","routes","path","children","component","HomebrewRoutingModule","forChild","HomebrewModule"],"mappings":"uVAUA,MAAMA,EAAcC,EAAA,EAAYC,OAAf,kBACXC,EAAeF,EAAA,EAAYC,OAAf,mBAKX,MAAM,EAEX,YAAoBE,GAAA,KAAAA,OAIpB,eACE,OAAOC,KAAKD,KAAKE,IAAeN,EAAH,MAAkB,eAGjD,QAAQO,GACN,OAAOF,KAAKD,KAAKI,KAAU,GAAGR,EAAYO,EAAM,eAC7CE,KACC,OAAAC,EAAA,GAAWL,KAAKM,YAAY,aAIlC,QAAQC,GACN,OAAOP,KAAKD,KAAKE,IAAU,GAAGN,KAAYY,IAAM,eAGlD,QAAQL,GAEN,OAAOF,KAAKD,KAAKS,IAAY,GAAGb,KAAYO,EAAKO,IAAIC,OAAQR,EAAM,eAChEE,KACC,OAAAC,EAAA,GAAWL,KAAKM,YAAY,aAIlC,WAAWJ,GAET,OAAOF,KAAKD,KAAKY,OAAe,GAAGhB,KAAYO,EAAKO,IAAIC,OAAQ,eAC7DN,KACC,OAAAC,EAAA,GAAWL,KAAKM,YAAY,gBAIlC,eAAeC,GACb,OAAOP,KAAKD,KAAKE,IAAc,GAAGN,KAAYY,YAAc,eAG9D,mBACE,OAAOP,KAAKD,KAAKE,IAAeN,EAAH,OAAmB,eAIlD,eACE,OAAOK,KAAKD,KAAKE,IAAeH,EAAH,MAAmB,eAGlD,QAAQc,GACN,OAAOZ,KAAKD,KAAKI,KAAU,GAAGL,EAAac,EAAM,eAC9CR,KACC,OAAAC,EAAA,GAAWL,KAAKM,YAAY,aAIlC,QAAQC,GACN,OAAOP,KAAKD,KAAKE,IAAU,GAAGH,KAAaS,IAAM,eAGnD,QAAQK,GAEN,OAAOZ,KAAKD,KAAKS,IAAY,GAAGV,KAAac,EAAKH,IAAIC,OAAQE,EAAM,eACjER,KACC,OAAAC,EAAA,GAAWL,KAAKM,YAAY,aAIlC,WAAWM,GAET,OAAOZ,KAAKD,KAAKY,OAAe,GAAGb,KAAac,EAAKH,IAAIC,OAAQ,eAC9DN,KACC,OAAAC,EAAA,GAAWL,KAAKM,YAAY,gBAIlC,eAAeC,GACb,OAAOP,KAAKD,KAAKE,IAAc,GAAGH,KAAaS,YAAc,eAG/D,oBACE,OAAOP,KAAKD,KAAKE,IAAgBH,EAAH,OAAoB,eAGpD,kBAAkBe,GAChB,OAAOb,KAAKD,KAAKI,KAA8CL,EAAH,YAAyBe,EAAM,eACxFT,KACC,OAAAC,EAAA,GAAWS,GAAO,OAAAC,EAAA,GAAG,CAACC,SAAS,EAAOC,OAAQH,EAAII,UAKhD,YAAeC,EAAY,aACjC,OAAQD,IACNE,QAAQF,MAAMA,GACP,OAAAH,EAAA,GAAG,CAACG,MAAO,GAAGC,aAAqBD,EAAMA,QAASF,SAAS,M,sCAhG3D,GAAe,Y,yBAAf,EAAe,QAAf,EAAe,qBAFd,S,kICPP,MAAMK,EAOX,cAJA,KAAAC,QAAkB,EAClB,KAAAC,KAAe,GACf,KAAAC,MAAgB,GAKhB,a,sCAVWH,I,uBAAAA,EAAa,mgBCP1B,eAAqB,sBAAW,OAChC,+BACE,gBACE,yBACE,kBAAmC,qDAAnC,OACF,OAEA,6BAAkB,uDAAqB,+BAAoB,OAE3D,yBACE,kBAAwC,sDAAxC,OACF,OAEA,0BACE,sBAA6C,qDAAmB,OAClE,OACF,OACA,eACE,wDACF,OACF,OACA,8BACE,oBAAiD,kBAAM,OACvD,oBACE,oBACF,OACF,Q,MAtByC,+BAGnB,iCAGwB,gCAIK,+BAS9B,0EAA2E,sB,kNCrBzF,MAAMI,EAAsB,CAAC,QAa7B,MAAMC,EAMX,cACE1B,KAAK2B,KAAO,WACZ3B,KAAK4B,KAAO,GACZ5B,KAAKuB,KAAO,I,wCCdT,MAAMM,EAIX,YAA4ChB,GAAA,KAAAA,OAC1Cb,KAAK8B,WAAW9B,KAAKa,KAAKA,MAG5B,YAGA,WAAWX,GACT,IAAI6B,EAAmB,GAIvBA,GAAY,GAHA,KAAK7B,EAAKyB,SACXzB,EAAKqB,MAAQ,SAIxB,IAAK,IAAIS,KAAQ9B,EAAK+B,MAAO,CAE3BF,GAAY,GADI,QAAQC,EAAKL,SACAK,EAAKJ,cAAcI,EAAKT,WAEvDQ,EAAWA,EAASG,QAAQ,KAAM,QAElClC,KAAKmC,OAASJ,EAGhB,KAAKK,GACHA,EAAaC,SACbC,SAASC,YAAY,QACrBH,EAAaI,kBAAkB,EAAG,I,sCA9BzBX,GAAkB,KAIT,O,uBAJTA,EAAkB,2Z,eCV/B,eAAqB,QAAwB,OAC7C,4CACE,+BACE,0CACE,0CACA,wCAA+D,yDAAS,EAAAY,KAAA,MAEtE,0CAAU,qBAAS,OACrB,2BACF,yBACF,uBACF,qBACA,4CACE,oCAAoC,gBAAI,OAC1C,qBACA,c,MAfqB,2CAIa,iC,uNCI9B,yBACE,qBACA,oBAA+D,0EAE7D,mBAAU,oBAAS,OACrB,OACF,O,uBAL2B,mC,yBAevB,wBAA8C,Q,gBAA8B,Q,+BAA9B,qD,yBADhD,mBACE,iCACF,Q,oBADiB,mC,uCASjB,iBACE,oBAA0C,oEAA4B,0BACtE,OACA,oBAA0C,kEAA0B,iCACpE,OACF,Q,sBACA,cACE,yBACF,Q,MADe,6B,sCCxBd,MAAM,EASX,YAA4C5B,EAAoB6B,EAC5CC,EAAoCC,GADZ,KAAA/B,OAAoB,KAAA6B,SAC5C,KAAAC,YAAoC,KAAAC,UACtD5C,KAAKsB,OAAST,EAAKS,OACnBtB,KAAK6C,UAAY,mCAAmChC,EAAKJ,IAAIC,KAC7DV,KAAK8C,YAAwBC,IAAflC,EAAKoB,MAGrB,WACEjC,KAAKgD,MAAQhD,KAAK4C,QAAQK,QAAQjD,KAAKa,KAAKmC,OAC5ChD,KAAKkD,cACAlD,KAAK8C,QACR9C,KAAKmD,YAIT,YACE,MAAM5C,EAAKP,KAAKa,KAAKJ,IAAIC,KACzBV,KAAK2C,UAAUS,QAAQ7C,GACpB8C,UAAUnD,IACTF,KAAKa,KAAOX,EACZF,KAAK8C,QAAS,IAIpB,cACE,MAAMvC,EAAKP,KAAKa,KAAKJ,IAAIC,KACzBV,KAAK2C,UAAUW,eAAe/C,GAC3B8C,UAAUE,IACT,MAAMC,EAAM,GACZD,EAAQE,QAAQC,GAAOF,EAAIG,KAAK3D,KAAK4C,QAAQK,QAAQS,KACrD1D,KAAKuD,QAAUC,IAIrB,KAAKpB,GACHA,EAAaC,SACbC,SAASC,YAAY,QACrBH,EAAaI,kBAAkB,EAAG,GAGpC,kBACExC,KAAK0C,OAAOkB,KAAK,IAAkB,CACjC/C,KAAM,CAACc,KAAM3B,KAAKa,KAAKc,KAAMd,KAAMb,KAAKa,KAAKoB,OAC7C4B,MAAO,QAIX,gBACE7D,KAAK0C,OAAOkB,KAAK/B,EAAoB,CACnChB,KAAM,CAACc,KAAM3B,KAAKa,KAAKc,KAAMd,KAAMb,KAAKa,MACxCgD,MAAO,S,sCA3DA,GAAe,KASN,KAAe,8B,uBATxB,EAAe,+nB,GAAA,MDhB5B,eAAqB,QAAmB,OACxC,+BACE,gBACE,YACE,Q,gBACF,OAEA,6BAAkB,uDAAqB,+BAAoB,OAC3D,iCAQA,iCACE,sCACE,2BACE,qBACF,OACF,OACA,aAAG,wDAA4C,eAAK,8BAAkB,OAAO,wBAAW,OACxF,4BAGF,OACA,iCACE,sCACE,2BACE,oBACF,OACF,OACA,uBAMA,uBAGF,OAEF,OACF,OACA,8BACE,oBAAoC,kBAAM,OAC1C,oBACE,kBACF,OACF,Q,WAnDqB,sCAIf,yEAGgB,iCACF,8BAeJ,4DAUc,8BAMnB,+BASU,uD,mZE/Bf,2BACE,YACE,QACF,OACF,Q,8BAFI,8B,uCAVR,gBACE,mBACE,0BACE,yBAAgB,QAAa,OAC7B,4BAAmB,QACnB,OACF,OACA,gBACA,oCAKA,2BACE,gBAA6C,gBAAI,OACjD,qBAAmB,qFAA2B,iBAAK,OACrD,OACF,OACF,O,4CAfsB,qBACG,+GAGD,oEACF,4BAMF,uC,yBAftB,gBACE,uBAmBF,Q,oBAnByB,iC,uCAqBzB,iBACE,mBACE,YAAG,mDAAwC,OAC3C,oBAAyC,6DAAqB,qBAAU,OAC1E,OACF,QCpBO,MAAM,EAKX,YAAoBC,EAA0ClB,EAC1CF,EAA2BqB,EAAwBC,GADnD,KAAAF,kBAA0C,KAAAlB,UAC1C,KAAAF,SAA2B,KAAAqB,SAAwB,KAAAC,QAHvE,KAAAC,OAAmC,IAAIC,IAMvC,WACElE,KAAKmE,WAGP,WACEnE,KAAK8D,gBAAgBM,eAClBf,UAAUgB,IACTrE,KAAKqE,MAAQA,EACb,MAAMC,EAAY,IAAIC,IACtB,IAAK,MAAMrE,KAAQmE,EACZC,EAAUE,IAAItE,EAAK8C,SACtBsB,EAAUG,IAAIvE,EAAK8C,OACnBhD,KAAK4C,QAAQK,QAAQ/C,EAAK8C,OACvBK,UAAUqB,GAAQ1E,KAAKiE,OAAOU,IAAIzE,EAAK8C,MAAO0B,OAM3D,WACoB1E,KAAK0C,OAAOkB,KAAKvC,EAAe,CAChDwC,MAAO,MACPe,cAAc,IAGNC,cAAcxB,UAAUpC,IAChC,GAAIA,EAAQ,CACV,IAAIJ,EAAO,CAACc,KAAMV,EAAOU,KAAML,OAAQL,EAAOK,OAAQC,KAAMN,EAAOM,KAAMC,MAAOP,EAAOO,OACvFxB,KAAK8E,IAAIjE,MAKf,WAAWX,GACSF,KAAK0C,OAAOkB,KAAK,EAAiB,CAClD/C,KAAMX,EACN2D,MAAO,MACPe,cAAc,IAGNC,cAAcxB,UAAUpC,IAC5BA,IACFG,QAAQ2D,IAAI9D,GACZf,EAAO8E,OAAOC,OAAO/E,EAAMe,GAC3BjB,KAAKkF,OAAOhF,MAKlB,IAAIA,GAEFF,KAAK8D,gBAAgBqB,QAAQjF,GAC1BmD,UAAUpC,IACLA,EAAOD,SACThB,KAAK+D,OAAOqB,SAAS,CAACnE,EAAOoE,QAAS,CAACC,WAAYtF,KAAKgE,UAKhE,OAAO9D,GAELF,KAAK8D,gBAAgByB,QAAQrF,GAC1BmD,UAAUpC,IACTG,QAAQ2D,IAAI9D,M,sCAxEP,GAAc,kD,uBAAd,EAAc,spBDf3B,wBACE,eAAM,qBAAU,OAChB,iBACA,eAAM,mBAAwB,gCAAS,EAAAuE,cACrC,qBAAgC,cAAG,OACrC,OAAS,OACX,OAEA,sBAsBA,uB,MAtBwE,6CAsBjD,gD,+QErBhB,MAAMC,GAEX,YAA4C5E,GAAA,KAAAA,OAG5C,a,wCCOA,mBAAuC,gEAAwC,iBAAM,Q,uCDZ1E4E,IAAgB,KAEP,O,wBAFTA,GAAgB,wOET7B,eAAqB,QAAyB,OAC9C,+BACE,YACE,QAC8B,YAAG,iCAAsB,OACzD,OACF,OACA,6BACE,mBAAoC,iBAAM,OAC1C,oBACE,oBACF,OACF,Q,MAZqB,4CAGjB,4JAMiB,sC,uGCEd,MAAM,GAOX,YAA4C5E,EAAoB6B,EAC5CgD,GADwB,KAAA7E,OAAoB,KAAA6B,SAC5C,KAAAgD,YAClB1F,KAAK2B,KAAOd,EAAKc,KACjB3B,KAAKwB,MAAQX,EAAKW,MAClBxB,KAAKuB,KAAOV,EAAKU,KACjBvB,KAAK2F,QAAU,cAAUpF,KAAOM,EAAKmC,MAGvC,YAGA,cACoBhD,KAAK0C,OAAOkB,KAAK6B,GAAkB,CACnD5E,KAAMb,KAAKa,KACXgD,MAAO,QAGCgB,cAAcxB,UAAUpC,IAC5BA,GACFjB,KAAK0F,UAAUE,MAAM,CAACjF,QAAQ,O,uCA1BzB,IAAiB,KAOR,KAAe,sB,wBAPxB,GAAiB,ujBFX9B,eAAqB,QAAa,OAClC,+BACE,gBACE,yBACE,kBAAmC,qDAAnC,OACF,OAEA,yBACE,kBAAwC,sDAAxC,OACF,OAEA,yBACE,qBAA6C,qDAAmB,OAClE,OACF,OACF,OACA,8BACE,oBAAoC,kBAAM,OAC1C,oBACE,kBACF,OACA,2BACF,Q,MAtBqB,0BAIoB,+BAIK,gCAIK,+BAM9B,kEAA2D,oBAGf,iC,2QGLzD,2BACE,mBAAwC,iEAAuB,oEAA/D,OACF,O,wBADkE,sC,wCAWpE,iBACE,oBAA+C,iDAAwB,OAAxB,aAAoB,GAAE,kBACnE,sBAAiC,8BAAmB,OACtD,OACF,Q,wCAMA,iBACE,oBAA6C,gDAASkF,OAAA,UACpD,sBAA+B,uBAAY,OAC7C,OACF,Q,wCACA,iBACE,oBAA+C,gDAASC,SAAA,UACtD,sBAAiC,yBAAc,OACjD,OACF,Q,wCApCF,gBACE,gBACE,2BACE,kBAAmC,gEAAuB,kEAA1D,OACF,OACA,kCAGF,OACA,yBACE,qBAA+C,gEAAuB,kEAAyB,OACjG,OACA,yBACE,qBAAsD,gEAAuB,kEAAyB,OACxG,OACF,OACA,iBACE,yBAKA,kBACE,qBAAoD,oEAClD,uBAAsC,8BAAkB,OAC1D,OACF,OACA,yBAKA,yBAKA,mBACA,kBACE,qBAAqC,+CAASnF,OAAA,UAC5C,uBAA8B,kBAAM,OACtC,OACF,OACF,O,uBAxCiE,oCAEtC,wCAKgD,oCAGO,oCAInE,2CAUA,gCAKA,gCCjCZ,MAAM,GAWX,YAAoB+B,GAAA,KAAAA,SANV,KAAAmD,OAAS,IAAI,IACb,KAAAC,SAAW,IAAI,IACf,KAAAC,QAAU,IAAI,IACd,KAAAC,OAAS,IAAI,IACb,KAAArF,OAAS,IAAI,IAKvB,YAGA,aACEX,KAAK+F,QAAQE,OAGf,kBACEjG,KAAK0C,OAAOkB,KAAK,IAAkB,CACjC/C,KAAM,CAACc,KAAM3B,KAAKgC,KAAKL,KAAMd,KAAMb,KAAKgC,MACxC6B,MAAO,S,uCAxBA,IAAmB,Y,wBAAnB,GAAmB,grCDVhC,gCAAqB,iCAAU,EAAAmC,OAAA,UAC7B,qCACE,0BACE,cACE,QACF,OACF,OACA,kCAEF,OACA,gCA8CF,Q,MApDQ,kCAG4B,kD,2SEoB5B,6BACuD,kFAAuB,gFAAvB,CAAuB,oEAAvB,CAAuB,iFAAvB,CAAuB,iFAEjC,O,+CAHsC,eAAa,YAAb,CAAa,a,wCAFpG,iBACE,wBACE,oCAIA,sBACE,kBAA6B,iBAAM,OACnC,iBACA,eACE,oBAAsD,sEACpD,sBAAwC,iCAAqB,OAC/D,OACA,qBAAmD,qEACjD,uBAA0C,mBAAO,OACnD,OACA,oBAAwB,kEACtB,uBAA2B,eAAG,OAChC,OACF,OACF,OACF,OACF,O,wBApBqB,sC,wCAsBrB,iBACE,mBACE,YAAG,yCAA8B,OACjC,oBAAyC,kEAAyB,uBAAY,OAC9E,oBAAsD,sEACpD,sBAAwC,gCAAqB,OAC/D,OACA,oBAAmD,qEACjD,uBAA0C,mBAAO,OACnD,OACF,OACF,Q,uPAGE,+B,qBAAwC,2DAA0D,4BAA1D,CAA0D,kCAA1D,CAA0D,oDAA1D,CAA0D,iCAA1D,CAA0D,uB,yBAMlG,+B,qBAAyC,2DAA0D,sB,wCArEzG,cACE,wBACE,eACE,mBAAwB,yDACtB,qBAA4B,qBAAU,OACxC,OACF,OACA,eACE,QACF,OACA,iBACA,eACE,oBAAwB,2DACtB,sBAA4B,gBAAI,OAClC,OACA,oBAAwB,kEACtB,sBAAgC,oBAAQ,OAC1C,OACA,oBAAwB,+DACtB,sBAA6B,kBAAM,OACrC,OACF,OACF,OAEA,iBACE,yBAwBA,yBAaA,kBACE,wCAMA,uCAIF,OACF,OACF,O,uBAnEM,kCAiBmC,0CAwBA,0CAchB,oCAMA,sC,uBAQzB,cACE,iBACE,mBACE,yBACF,OACF,OACF,Q,MAHmB,6B,wCAKnB,cACE,iBACE,mBACE,YAAG,wDAA6C,OAChD,oBAAyC,yDAAiB,kBAAO,OACnE,OACF,OACF,QCvEO,MAAM,GASX,YAAoBhC,EAA+BF,EAC/BoC,EAA4CC,EAA4BzD,EACxEqB,EAAwBqC,GAFxB,KAAApC,QAA+B,KAAAF,kBAC/B,KAAAoC,mBAA4C,KAAAC,WAA4B,KAAAzD,SACxE,KAAAqB,SAAwB,KAAAqC,WAR5C,KAAA1B,KAAiB,cAGjB,KAAA2B,aAAc,EAQd,WACErG,KAAKoD,UAGP,cACEpD,KAAKoG,SAASE,UAGhB,UACE,MAAM/F,EAAKP,KAAKgE,MAAMuC,SAASC,SAASvG,IAAI,QAC5CD,KAAK8D,gBAAgBV,QAAQ7C,GAC1B8C,UAAUnD,IACTF,KAAKE,KAAOA,EACZF,KAAKyG,gBAIX,cACE,GAAKzG,KAAKE,MAASF,KAAK0E,KAIxB,GADA1E,KAAK2F,QAAU3F,KAAK0E,KAAKnE,KAAOP,KAAKE,KAAK8C,MACtChD,KAAK2F,QACP3F,KAAK0G,SAAU,MACV,CACL,MAAMnG,EAAKP,KAAKE,KAAKO,IAAIC,KACzBV,KAAK8D,gBAAgBR,eAAe/C,GACjC8C,UAAUE,GAAWvD,KAAK0G,QAAUnD,EAAQoD,KAAKC,GAAKA,IAAM5G,KAAK0E,KAAKnE,MAI7E,eACEP,KAAKE,KAAK+B,MAAM0B,KAAK,IAAIjC,GACzB1B,KAAK6G,qBAGP,WAAW7E,GACThC,KAAKE,KAAK+B,MAAQjC,KAAKE,KAAK+B,MAAM6E,OAAOC,GAAOA,IAAQ/E,GACxDhC,KAAK6G,qBAGP,qBACE,IAAK7G,KAAKqG,YAAa,CACrBrG,KAAKqG,aAAc,EACDrG,KAAKoG,SAASxC,KAAK,4BAA6B,OAAQ,CAACoD,UAAW,EAAGC,mBAAoB,UAEjGC,WAAW7D,UAAU,KAC/BrD,KAAKkF,YAKX,aACoBlF,KAAK0C,OAAOkB,KAAK,EAAiB,CAClD/C,KAAMb,KAAKE,KACX2D,MAAO,MACPe,cAAc,IAGNC,cAAcxB,UAAUpC,IAC5BA,IACFG,QAAQ2D,IAAI9D,GACZjB,KAAKE,KAAO8E,OAAOC,OAAOjF,KAAKE,KAAMe,GACrCjB,KAAKkF,YAKX,gBACoBlF,KAAK0C,OAAOkB,KAAK,GAAmB,CACpD/C,KAAMb,KAAKE,KACX2D,MAAO,MACPe,cAAc,IAGNC,cAAcxB,UAAUpC,IAC5BA,IACFG,QAAQ2D,IAAI9D,GACRA,EAAON,OACTX,KAAKW,UAELX,KAAKE,KAAO8E,OAAOC,OAAOjF,KAAKE,KAAMe,GACrCjB,KAAKkF,aAMb,mBACE,MAAMQ,EAAY1F,KAAK0C,OAAOkB,KAAK,KAAkB,CACnDC,MAAO,MACPe,cAAc,EACd/D,KAAM,CAACsG,UAAYtG,GAASb,KAAKoH,iBAAiB1B,EAAW7E,MAG/D6E,EAAUb,cAAcxB,UAAUpC,IAChC,GAAIA,EAAQ,CACV,MAAMe,EAAsBf,EAC5BG,QAAQ2D,IAAI/C,GACRA,aAAgBqF,MAClBrH,KAAKE,KAAK+B,MAAM0B,QAAQ3B,GAExBhC,KAAKE,KAAK+B,MAAM0B,KAAK3B,GAEvBhC,KAAK6G,wBAMX,kBACoB7G,KAAK0C,OAAOkB,KAAK,KAAe,CAChDC,MAAO,MACPe,cAAc,EACd/D,KAAM,CAACyG,OAAQ,IAAMtH,KAAK8D,gBAAgByD,mBAAoBC,MAAOC,GAAKA,EAAE9F,QAGpEkD,cAAcxB,UAAUpC,IAC5BA,IACFjB,KAAKE,KAAK+B,MAAM0B,KAAK1C,GACrBjB,KAAK6G,wBAMX,YAAYa,GACV,OAAIA,aAAkBL,MACbM,QAAQD,EAAOE,SAAWF,EAAOG,MAAM7F,GAAQhC,KAAK8H,aAAa9F,MAC/D0F,GACF1H,KAAK8H,aAAaJ,GAK7B,iBAAiBhC,EAAWgC,GAC1BhC,EAAUqC,kBAAkBC,SAAU,EAClChI,KAAKiI,YAAYP,GACnBhC,EAAUE,MAAMsC,KAAKC,MAAMzC,EAAUqC,kBAAkBlH,OAEvD6E,EAAUqC,kBAAkB7G,MAAQ,oBAIxC,aAAa6F,GACX,OAAOtF,EAAoBoG,MAAMO,GAAKA,KAAKrB,GAG7C,SAEE/G,KAAK8D,gBAAgByB,QAAQvF,KAAKE,MAC/BmD,UAAUpC,IACTG,QAAQ2D,IAAI9D,GACZjB,KAAKqG,aAAc,EACnBrG,KAAKoG,SAASxC,KAAK,GAAG3C,gBAAqBjB,KAAKE,KAAKyB,yCAA0C,KAAM,CAACsF,mBAAoB,YAIhI,SAEEjH,KAAK8D,gBAAgBuE,WAAWrI,KAAKE,MAClCmD,UAAUpC,IACTG,QAAQ2D,IAAI9D,GACZjB,KAAK+D,OAAOqB,SAAS,CAAC,OAAQ,CAACE,WAAYtF,KAAKgE,UAItD,OACEhE,KAAKmG,SAASmC,OAIhB,OAAOtG,GACL,MAAMuG,EAAQvI,KAAKE,KAAK+B,MAAMuG,QAAQxG,GAChCyG,EAAWF,EAAQ,EACrBE,GAAY,IACd,YAAgBzI,KAAKE,KAAK+B,MAAOsG,EAAOE,GACxCzI,KAAK6G,sBAIT,SAAS7E,GACP,MAAMuG,EAAQvI,KAAKE,KAAK+B,MAAMuG,QAAQxG,GAChCyG,EAAWF,EAAQ,EACrBE,EAAWzI,KAAKE,KAAK+B,MAAM2F,SAC7B,YAAgB5H,KAAKE,KAAK+B,MAAOsG,EAAOE,GACxCzI,KAAK6G,uB,uCAxME,IAAmB,wE,wBAAnB,GAAmB,+4CDrBhC,wBA6EA,uBAQA,wB,MArFK,qCA6EA,6BAQA,0C,+fE9EE,MAAM6B,GAOX,cAJA,KAAApH,QAAkB,EAClB,KAAAC,KAAe,GACf,KAAAC,MAAgB,GAKhB,a,uCAVWkH,K,wBAAAA,GAAa,mgBCP1B,eAAqB,sBAAW,OAChC,+BACE,gBACE,yBACE,kBAAmC,qDAAnC,OACF,OAEA,6BAAkB,uDAAqB,+BAAoB,OAE3D,yBACE,kBAAwC,sDAAxC,OACF,OAEA,0BACE,sBAA6C,qDAAmB,OAClE,OACF,OACA,eACE,wDACF,OACF,OACA,8BACE,oBAAiD,kBAAM,OACvD,oBACE,oBACF,OACF,Q,MAtByC,+BAGnB,iCAGwB,gCAIK,+BAS9B,2EAA2E,sB,mOCbzF,MAAM,GAIX,YAA4C7H,GAAA,KAAAA,OAC1Cb,KAAK8B,WAAW9B,KAAKa,KAAKA,MAG5B,YAGA,WAAWD,GACT,IAAImB,EAAW,GAIfA,GAAY,GAHE,KAAKnB,EAAKe,SACXf,EAAKW,MAAQ,SAI1B,IAAK,MAAMoH,KAAS/H,EAAKgI,OACvB7G,GAAY/B,KAAK6I,gBAAgBF,GAEnC5G,EAAWA,EAASG,QAAQ,KAAM,QAElClC,KAAKmC,OAASJ,EAGhB,gBAAgB4G,GACd,MAAMG,EAAQ,QAAQH,EAAMhH,KACtBoH,EAASJ,EAAMK,MACnB,GAAG,aAAWL,EAAMK,UAAU,aAAYL,EAAMM,UAChD,GAAG,aAAYN,EAAMM,WAAW,aAAWN,EAAMK,SAE7CpH,EAAO,uBAAuB+G,EAAMO,UAAYP,EAAMQ,OAAS,YAAc,qBACxER,EAAMS,4BACD,aAAgBT,wBACjBA,EAAMU,cAAgB,wBAA0B,IAAMV,EAAM3B,WAE3E,IAAIzF,EAAOoH,EAAMW,YAMjB,OAJIX,EAAMY,eACRhI,EAAO,GAAGA,8BAAiCoH,EAAMY,gBAG5C,GAAGT,OACXC,YAEDnH,QACAL,QAGA,KAAKa,GACHA,EAAaC,SACbC,SAASC,YAAY,QACrBH,EAAaI,kBAAkB,EAAG,I,wCCvDlC,yBACE,qBACA,oBAA+D,0EAE7D,mBAAU,oBAAS,OACrB,OACF,O,uBAL2B,mC,0BAevB,wBAA8C,Q,gBAA8B,Q,+BAA9B,qD,0BADhD,mBACE,kCACF,Q,oBADiB,mC,wCASjB,iBACE,oBAA0C,oEAA4B,0BACtE,OACA,oBAA0C,kEAA0B,iCACpE,OACF,Q,uBACA,cACE,yBACF,Q,MADe,6B,uCD9BR,IAAkB,KAIT,O,wBAJT,GAAkB,2Z,eEV/B,eAAqB,QAAwB,OAC7C,4CACE,+BACE,0CACE,0CACA,wCAA+D,yDAAS,EAAAC,KAAA,MAEtE,0CAAU,qBAAS,OACrB,2BACF,yBACF,uBACF,qBACA,4CACE,oCAAoC,gBAAI,OAC1C,qBACA,c,MAfqB,2CAIa,iC,+KCW3B,MAAM,GASX,YAA4C5B,EAAoB6B,EAC5CC,EAAoCC,GADZ,KAAA/B,OAAoB,KAAA6B,SAC5C,KAAAC,YAAoC,KAAAC,UACtD5C,KAAKsB,OAAST,EAAKS,OACnBtB,KAAK6C,UAAY,oCAAoChC,EAAKJ,IAAIC,KAC9DV,KAAK8C,YAAyBC,IAAhBlC,EAAK+H,OAGrB,WACE5I,KAAKgD,MAAQhD,KAAK4C,QAAQK,QAAQjD,KAAKa,KAAKmC,OAC5ChD,KAAKkD,cACAlD,KAAK8C,QACR9C,KAAKwJ,aAIT,cACE,MAAMjJ,EAAKP,KAAKa,KAAKJ,IAAIC,KACzBV,KAAK2C,UAAU8G,eAAelJ,GAC3B8C,UAAUE,IACT,MAAMC,EAAM,GACZD,EAAQE,QAAQC,GAAOF,EAAIG,KAAK3D,KAAK4C,QAAQK,QAAQS,KACrD1D,KAAKuD,QAAUC,IAIrB,aACE,MAAMjD,EAAKP,KAAKa,KAAKJ,IAAIC,KACzBV,KAAK2C,UAAU+G,QAAQnJ,GACpB8C,UAAUzC,IACTZ,KAAKa,KAAOD,EACZZ,KAAK8C,QAAS,IAIpB,KAAKV,GACHA,EAAaC,SACbC,SAASC,YAAY,QACrBH,EAAaI,kBAAkB,EAAG,GAGpC,kBACExC,KAAK0C,OAAOkB,KAAK,IAAkB,CACjC/C,KAAM,CAACc,KAAM3B,KAAKa,KAAKc,KAAMd,KAAMb,KAAKa,KAAK+H,QAC7C/E,MAAO,QAIX,gBACE7D,KAAK0C,OAAOkB,KAAK,GAAoB,CACnC/C,KAAM,CAACc,KAAM3B,KAAKa,KAAKc,KAAMd,KAAMb,KAAKa,MACxCgD,MAAO,S,0BCzDP,2BACE,YACE,QACF,OACF,Q,8BAFI,8B,wCAVR,gBACE,mBACE,0BACE,yBAAgB,QAAa,OAC7B,4BAAmB,QACnB,OACF,OACA,gBACA,qCAKA,2BACE,gBAA6C,gBAAI,OACjD,qBAAmB,qFAA2B,iBAAK,OACrD,OACF,OACF,O,4CAfsB,qBACG,iHAGD,oEACF,4BAMF,uC,0BAftB,gBACE,wBAmBF,Q,oBAnByB,iC,wCAqBzB,iBACE,mBACE,YAAG,mDAAwC,OAC3C,oBAAyC,6DAAqB,qBAAU,OAC1E,OACF,Q,uCDpBa,IAAe,KASN,KAAe,8B,wBATxB,GAAe,+nB,GAAA,MFf5B,eAAqB,QAAmB,OACxC,+BACE,gBACE,YACE,Q,gBACF,OAEA,6BAAkB,uDAAqB,+BAAoB,OAC3D,kCAQA,iCACE,sCACE,2BACE,qBACF,OACF,OACA,aAAG,wDAA4C,eAAK,8BAAkB,OAAO,wBAAW,OACxF,6BAGF,OACA,iCACE,sCACE,2BACE,oBACF,OACF,OACA,wBAMA,wBAGF,OAEF,OACF,OACA,8BACE,oBAAoC,kBAAM,OAC1C,oBACE,kBACF,OACF,Q,WAnDqB,sCAIf,yEAGgB,iCACF,8BAeJ,4DAUc,8BAMnB,+BASU,wD,kVI/Bd,MAAM,GAKX,YAAoBC,EAA0ClB,EAC1CF,EAA2BqB,EAAwBC,GADnD,KAAAF,kBAA0C,KAAAlB,UAC1C,KAAAF,SAA2B,KAAAqB,SAAwB,KAAAC,QAHvE,KAAAC,OAAmC,IAAIC,IAMvC,WACElE,KAAK2J,WAGP,WACE3J,KAAK8D,gBAAgB8F,eAClBvG,UAAUwG,IACT7J,KAAK6J,MAAQA,EACb,MAAMvF,EAAY,IAAIC,IACtB,IAAK,MAAM3D,KAAQiJ,EACZvF,EAAUE,IAAI5D,EAAKoC,SACtBsB,EAAUG,IAAI7D,EAAKoC,OACnBhD,KAAK4C,QAAQK,QAAQrC,EAAKoC,OACvBK,UAAUqB,GAAQ1E,KAAKiE,OAAOU,IAAI/D,EAAKoC,MAAO0B,OAM3D,WACoB1E,KAAK0C,OAAOkB,KAAK8E,GAAe,CAChD7E,MAAO,MACPe,cAAc,IAGNC,cAAcxB,UAAUpC,IAChC,GAAIA,EAAQ,CACV,IAAIJ,EAAO,CAACc,KAAMV,EAAOU,KAAML,OAAQL,EAAOK,OAAQC,KAAMN,EAAOM,KAAMC,MAAOP,EAAOO,OACvFxB,KAAK8E,IAAIjE,MAKf,WAAWD,GACSZ,KAAK0C,OAAOkB,KAAK,GAAiB,CAClD/C,KAAMD,EACNiD,MAAO,MACPe,cAAc,IAGNC,cAAcxB,UAAUpC,IAC5BA,IACFG,QAAQ2D,IAAI9D,GACZL,EAAOoE,OAAOC,OAAOrE,EAAMK,GAC3BjB,KAAKkF,OAAOtE,MAKlB,IAAIA,GAEFZ,KAAK8D,gBAAgBgG,QAAQlJ,GAC1ByC,UAAUpC,IACLA,EAAOD,SACThB,KAAK+D,OAAOqB,SAAS,CAACnE,EAAO8I,QAAS,CAACzE,WAAYtF,KAAKgE,UAKhE,OAAOpD,GAELZ,KAAK8D,gBAAgBkG,QAAQpJ,GAC1ByC,UAAUpC,IACTG,QAAQ2D,IAAI9D,M,uCAxEP,IAAe,kD,wBAAf,GAAe,upBDjB5B,wBACE,eAAM,qBAAU,OAChB,iBACA,eAAM,mBAAwB,gCAAS,EAAAuE,cACrC,qBAAgC,cAAG,OACrC,OAAS,OACX,OAEA,uBAsBA,wB,MAtBwE,6CAsBjD,gD,wNEtBhB,MAAMyE,GAEX,YAA4CpJ,GAAA,KAAAA,OAG5C,a,wCCQA,mBAAuC,gEAAwC,iBAAM,Q,uCDb1EoJ,IAAgB,KAEP,O,wBAFTA,GAAgB,wOER7B,eAAqB,QAAyB,OAC9C,+BACE,YACE,QAC8B,YAAG,iCAAsB,OACzD,OACF,OACA,6BACE,mBAAoC,iBAAM,OAC1C,oBACE,oBACF,OACF,Q,MAZqB,4CAGjB,4JAMiB,sC,2GCEd,MAAM,GAOX,YAA4CpJ,EAAoB6B,EAC5CgD,GADwB,KAAA7E,OAAoB,KAAA6B,SAC5C,KAAAgD,YAClB1F,KAAK2B,KAAOd,EAAKc,KACjB3B,KAAKwB,MAAQX,EAAKW,MAClBxB,KAAKuB,KAAOV,EAAKU,KACjBvB,KAAK2F,QAAU,cAAUpF,KAAOM,EAAKmC,MAGvC,YAGA,cACoBhD,KAAK0C,OAAOkB,KAAKqG,GAAkB,CACnDpJ,KAAMb,KAAKa,KACXgD,MAAO,QAGCgB,cAAcxB,UAAUpC,IAC5BA,GACFjB,KAAK0F,UAAUE,MAAM,CAACjF,QAAQ,O,uCA1BzB,IAAiB,KAOR,KAAe,sB,wBAPxB,GAAiB,ujBFX9B,eAAqB,QAAa,OAClC,+BACE,gBACE,yBACE,kBAAmC,qDAAnC,OACF,OAEA,yBACE,kBAAwC,sDAAxC,OACF,OAEA,yBACE,qBAA6C,qDAAmB,OAClE,OACF,OACF,OACA,8BACE,oBAAoC,kBAAM,OAC1C,oBACE,kBACF,OACA,2BACF,Q,MAtBqB,0BAIoB,+BAIK,gCAIK,+BAM9B,kEAA2D,oBAGf,iC,4PGb1D,MAAM,GAOX,eAIA,UACEX,KAAKsJ,YAActJ,KAAKgJ,MACtB,GAAG,aAAWhJ,KAAKgJ,UAAU,aAAYhJ,KAAKiJ,UAAY,GAAG,aAAYjJ,KAAKiJ,WAAW,aAAWjJ,KAAKgJ,SAG7G,WACEhJ,KAAKkK,UAGP,YAAYC,GACVnK,KAAKkK,W,uCArBI,K,wBAAA,GAA8B,+IAFvC,gCAAuB,QAAe,Q,MAAf,8B,sHCWnB,2BACE,mBAAwC,iEAAuB,qEAA/D,OACF,O,wBADkE,uC,wCAwBhE,uBAAY,yEAAwB,qEAClC,wBAAsB,qBAAU,OAChC,wBAAsB,sBAAW,OACjC,wBAAsB,qBAAU,OAChC,wBAAsB,sBAAW,OACjC,wBAAsB,qBAAS,OAC/B,yBAAsB,oBAAQ,OAC9B,yBAAsB,sBAAU,OAChC,yBAAsB,yBAAa,OACnC,yBAA2B,mEAA6B,KAAM,kBAAM,OACtE,O,wBAVY,8B,wCAWZ,mBAAqC,iEAAuB,sEAA5D,O,wBAA6D,gC,wCAE7D,oBAAoE,mEAA6B,KAE/F,mBAAU,gCAAqB,OACjC,Q,wCAmEJ,iBACE,oBAA+C,iDAAyB,OAAzB,cAAqB,GAAE,kBACpE,sBAAiC,8BAAmB,OACtD,OACF,Q,wCAWA,iBACE,oBAA6C,gDAASrE,OAAA,UACpD,sBAA+B,uBAAY,OAC7C,OACF,Q,wCACA,iBACE,oBAA+C,gDAASC,SAAA,UACtD,sBAAiC,yBAAc,OACjD,OACF,Q,wCA1IF,gBAEE,gBACE,2BACE,kBAAmC,gEAAuB,mEAA1D,OACF,OACA,kCAGF,OAGA,gBACE,2BACE,oBAAW,gBAAK,OAChB,uBAAY,uEAAuB,oEACjC,yBAAwB,mBAAO,OAC/B,yBAAwB,qBAAS,OACjC,yBAAwB,qBAAS,OACjC,yBAAwB,qBAAS,OACjC,yBAAwB,qBAAS,OACjC,yBAAwB,qBAAS,OACjC,yBAAwB,qBAAS,OACjC,yBAAwB,qBAAS,OACjC,yBAAwB,qBAAS,OACjC,yBAAwB,qBAAS,OACnC,OACF,OAEA,4BACE,qBAAW,kBAAM,OACjB,iCAWA,2BAEA,4BAIF,OAEA,2BAA8B,0EAA0B,2DAAyB,kBAAM,OACzF,OAGA,kBACE,4BACE,oBAA2C,gEAAuB,uEAAlE,OACF,OAEA,4BACE,oBAAoC,gEAAuB,oEAA3D,OACF,OACF,OAGA,iBACE,2BAA8B,qFAAqC,2DACjE,oBACF,OACA,2BAA8B,sFAAsC,2DAClE,qBACF,OACA,4BACE,oBAAuC,gEAAuB,kFAA9D,OACF,OACF,OAGA,iBACE,4BACE,oBAAuC,gEAAuB,uEAA9D,OACF,OAEA,2BAA8B,iFAAiC,2DAC7D,2BACF,OACF,OAGA,0BACE,uBAAsD,gEAAuB,0EACnC,OAC5C,OAGA,0BACE,uBAA2D,gEAAuB,2EACvC,OAC7C,OAGA,kBACE,6BACE,oBAAsC,gEAAuB,sEAA7D,OACF,OAEA,6BACE,oBAAyC,gEAAuB,yEAAhE,OACF,OACF,OACF,OAGA,kBACE,yBAKA,kBACE,qBAAoD,oEAClD,uBAAsC,8BAAkB,OAC1D,OACF,OACA,kBACE,qBAAqD,+CAASsE,aAAA,UAC5D,uBAAuC,iBAAK,OAC9C,OACF,OACA,yBAKA,yBAKA,mBACA,kBACE,qBAAqC,+CAASzJ,OAAA,UAC5C,uBAA8B,kBAAM,OACtC,OACF,OACF,O,uBA7IiE,qCAEtC,yCAST,oCACE,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBAMwD,0CAY/D,yCAEC,yCAKoB,uCAMuC,yCAIP,sCAMhC,kDAGA,mDAImC,oDAOA,yCAGnC,8CAQpB,4CAMA,6CAMsD,wCAIG,2CAOxD,4CAeA,gCAKA,gCCtIZ,MAAM,GAcX,YAAoB+B,GAAA,KAAAA,SATV,KAAAmD,OAAS,IAAI,IACb,KAAAC,SAAW,IAAI,IACf,KAAAC,QAAU,IAAI,IACd,KAAAC,OAAS,IAAI,IACb,KAAArF,OAAS,IAAI,IACb,KAAAyJ,aAAe,IAAI,IAO7B,WACEpK,KAAKqK,mBAAqB,KAAcC,SAAStK,KAAK2I,MAAMM,QAG9D,aACEjJ,KAAK+F,QAAQE,OAGf,kBACEjG,KAAK0C,OAAOkB,KAAK,IAAkB,CACjC/C,KAAM,CAACc,KAAM3B,KAAK2I,MAAMhH,KAAMd,KAAMb,KAAK2I,OACzC9E,MAAO,S,wCCpCP,8BACwD,kFAAwB,gFAAxB,CAAwB,6CACnDkC,QAAA,SAD2B,CAAwB,oFACF,EAAAwE,SAAA,UADtB,CAAwB,iFAAxB,CAAwB,kDAEhBH,aAAA,UAAsB,O,+CAHA,gBAAe,YAAf,CAAe,a,wCAFzG,gBACE,wBACE,oCAIA,qBACE,iBAA6B,iBAAM,OACnC,iBACA,eACI,mBAAsD,gEACpD,sBAAwC,iCAAqB,OAC/D,OACA,qBAAoD,+DAClD,uBAA2C,mBAAO,OACpD,OACA,qBAAwB,6DACtB,uBAA2B,eAAG,OAChC,OACF,OACJ,OACF,OACF,O,uBApBsB,uC,wCAsBtB,gBACE,mBACE,YAAG,yCAA8B,OACjC,oBAAyC,6DAAqB,uBAAY,OAC1E,mBAAsD,gEACpD,sBAAwC,gCAAqB,OAC/D,OACA,oBAAoD,+DAClD,uBAA2C,mBAAO,OACpD,OACF,OACF,Q,uCDzBW,IAAoB,Y,wBAApB,GAAoB,0nFDXjC,gCAAqB,iCAAU,EAAApE,OAAA,UAE7B,qCACE,0BACE,cACE,QACF,OACF,OACA,wCACF,OACA,iCAoJF,Q,MAzJQ,mCAGyB,oCAAqB,2B,wQGM/C,MAAM,GAUX,YAAoBtD,EAA2BC,GAA3B,KAAAD,SAA2B,KAAAC,YANrC,KAAA4H,SAAW,IAAI,IACf,KAAAxE,QAAU,IAAI,IACd,KAAAqE,aAAe,IAAI,IAO7B,YAGA,WACEpK,KAAKY,KAAKgI,OAAOjF,KAAK,IAAI,MAC1B3D,KAAK+F,QAAQE,OAGf,cAEE,MAAMP,EAAY1F,KAAK0C,OAAOkB,KAAK,KAAkB,CACnDC,MAAO,MACPe,cAAc,EACd/D,KAAM,CAACsG,UAAYtG,GAASb,KAAKwK,kBAAkB9E,EAAW7E,MAGhE6E,EAAUb,cAAcxB,UAAUpC,IAChC,GAAIA,EAAQ,CACV,IAAI0H,EAAyB1H,EAC7BG,QAAQ2D,IAAI4D,GACRA,aAAiBtB,MACnBrH,KAAKY,KAAKgI,OAAOjF,QAAQgF,GAEzB3I,KAAKY,KAAKgI,OAAOjF,KAAKgF,GAExB3I,KAAK+F,QAAQE,UAKnB,aACoBjG,KAAK0C,OAAOkB,KAAK,KAAe,CAChDC,MAAO,MACPe,cAAc,EACd/D,KAAM,CAACyG,OAAQ,IAAMtH,KAAK2C,UAAU8H,oBAAqBjD,MAAOC,GAAKA,EAAE9F,QAG/DkD,cAAcxB,UAAUpC,IAC5BA,IACFjB,KAAKY,KAAKgI,OAAOjF,KAAK1C,GACtBjB,KAAK+F,QAAQE,UAKnB,YAAY0C,GACV3I,KAAKY,KAAKgI,OAAS5I,KAAKY,KAAKgI,OAAO9B,OAAOC,GAAOA,IAAQ4B,GAC1D3I,KAAK+F,QAAQE,OAIf,kBAAkBP,EAA2C7E,GAC3Db,KAAK2C,UAAU6H,kBAAkB3J,GAC9BwC,UACCpC,GAAUjB,KAAK0K,kBAAkBhF,EAAWzE,IAIlD,kBAAkByE,EAA2CzE,GAC3DG,QAAQ2D,IAAI9D,GACZyE,EAAUqC,kBAAkBC,SAAU,EAClC/G,EAAOD,QACT0E,EAAUE,MAAMsC,KAAKC,MAAMzC,EAAUqC,kBAAkBlH,OAEvD6E,EAAUqC,kBAAkB7G,MAAQD,EAAOA,OAM/C,OAAO0H,GACL,MAAMJ,EAAQvI,KAAKY,KAAKgI,OAAOJ,QAAQG,GACjCF,EAAWF,EAAQ,EACrBE,GAAY,IACd,YAAgBzI,KAAKY,KAAKgI,OAAQL,EAAOE,GACzCzI,KAAK+F,QAAQE,QAIjB,SAAS0C,GACP,MAAMJ,EAAQvI,KAAKY,KAAKgI,OAAOJ,QAAQG,GACjCF,EAAWF,EAAQ,EACrBE,EAAWzI,KAAKY,KAAKgI,OAAOhB,SAC9B,YAAgB5H,KAAKY,KAAKgI,OAAQL,EAAOE,GACzCzI,KAAK+F,QAAQE,S,uCAjGN,IAAkB,oB,wBAAlB,GAAkB,grCDd/B,gBACE,wBAwBA,wBAaA,gBACE,4BAQF,OACF,Q,MA/CwC,0CAwBA,2CAcnB,qEAA4B,yDAA5B,CAA4B,yDAA5B,CAA4B,2DAA5B,CAA4B,6DAA5B,CAA4B,mEAA5B,CAA4B,sEAA5B,CAA4B,wEAA5B,CAA4B,0EAA5B,CAA4B,2DAA5B,CAA4B,2DAA5B,CAA4B,yDAA5B,CAA4B,yEAA5B,CAA4B,+DAA5B,CAA4B,qEAA5B,CAA4B,uEAA5B,CAA4B,iB,iZEvCjD,gBACE,mBACE,YAAG,QAAyB,OAC5B,YAAG,4DACD,cAAqF,eAAI,OAAI,YAAC,OAChG,kCACuB,iDAAWF,QAAA,UAAgB,OACpD,OACF,O,uBANO,4CAGoB,oDAAmC,kB,uBAK9D,gBACE,mBACE,YACE,+BACF,OACF,OACF,QCPO,MAAM,GAKX,cAFU,KAAAA,QAAU,IAAI,IAKxB,YAGA,cAAc4C,GAIZ,OAHyB,OAArBA,EAAMgC,aACRhC,EAAMgC,WAAa,IAEdhC,EAAMgC,Y,wCCxBjB,cACE,wBACE,eACE,mBAAwB,yDACtB,qBAA4B,qBAAU,OACxC,OACF,OACA,eACE,QACF,OACA,iBACA,eACE,oBAAwB,2DACtB,sBAA4B,gBAAI,OAClC,OACA,oBAAwB,kEACtB,sBAAgC,oBAAQ,OAC1C,OACA,oBAAwB,+DACtB,sBAA6B,kBAAM,OACrC,OACF,OACF,OAEA,6BACE,sBACE,6BAA4C,sEAAmC,mEAAnC,CAAmC,iEACW,KAAG,OAC/F,OACA,sBACE,+BAA0C,yEAAiC,OAC7E,OACF,OACF,O,uBAzBM,kCAkBgB,6BAAa,eAIX,uC,uBAKxB,cACE,iBACE,mBACE,yBACF,OACF,OACF,Q,MAHmB,6B,wCAKnB,cACE,iBACE,mBACE,YAAG,wDAA6C,OAChD,oBAAyC,yDAAiB,kBAAO,OACnE,OACF,OACF,Q,uCDzCa,K,wBAAA,GAAoB,mTDTjC,wBAUA,wB,MAVK,qBAUA,gC,iFGSE,MAAM,GASX,YAAoB3G,EAA+BF,EAC/BoC,EAA4CC,EAA4BzD,EACxEqB,EAAwBqC,GAFxB,KAAApC,QAA+B,KAAAF,kBAC/B,KAAAoC,mBAA4C,KAAAC,WAA4B,KAAAzD,SACxE,KAAAqB,SAAwB,KAAAqC,WAR5C,KAAA1B,KAAiB,cAGjB,KAAA2B,aAAc,EAQd,WACErG,KAAK0J,UAGP,cACE1J,KAAKoG,SAASE,UAGhB,UACE,MAAM/F,EAAKP,KAAKgE,MAAMuC,SAASC,SAASvG,IAAI,QAC5CD,KAAK8D,gBAAgB4F,QAAQnJ,GAC1B8C,UAAUzC,IACTZ,KAAKY,KAAOA,EACZZ,KAAKyG,gBAIX,cACE,GAAKzG,KAAKY,MAASZ,KAAK0E,KAIxB,GADA1E,KAAK2F,QAAU3F,KAAK0E,KAAKnE,KAAOP,KAAKY,KAAKoC,MACtChD,KAAK2F,QACP3F,KAAK0G,SAAU,MACV,CACL,MAAMnG,EAAKP,KAAKY,KAAKH,IAAIC,KACzBV,KAAK8D,gBAAgB2F,eAAelJ,GACjC8C,UAAUE,GAAWvD,KAAK0G,QAAUnD,EAAQoD,KAAKC,GAAKA,IAAM5G,KAAK0E,KAAKnE,MAI7E,qBACE,IAAKP,KAAKqG,YAAa,CACrBrG,KAAKqG,aAAc,EACDrG,KAAKoG,SAASxC,KAAK,4BAA6B,OAAQ,CAACoD,UAAW,EAAGC,mBAAoB,UAEjGC,WAAW7D,UAAU,KAC/BrD,KAAKkF,YAKX,aACoBlF,KAAK0C,OAAOkB,KAAK,GAAiB,CAClD/C,KAAMb,KAAKY,KACXiD,MAAO,MACPe,cAAc,IAGNC,cAAcxB,UAAUpC,IAC5BA,IACFG,QAAQ2D,IAAI9D,GACZjB,KAAKY,KAAOoE,OAAOC,OAAOjF,KAAKY,KAAMK,GACrCjB,KAAKkF,YAKX,gBACoBlF,KAAK0C,OAAOkB,KAAK,GAAmB,CACpD/C,KAAMb,KAAKY,KACXiD,MAAO,MACPe,cAAc,IAGNC,cAAcxB,UAAUpC,IAC5BA,IACFG,QAAQ2D,IAAI9D,GACRA,EAAON,OACTX,KAAKW,UAELX,KAAKY,KAAOoE,OAAOC,OAAOjF,KAAKY,KAAMK,GACrCjB,KAAKkF,aAMb,SAEElF,KAAK8D,gBAAgBkG,QAAQhK,KAAKY,MAC/ByC,UAAUpC,IACTG,QAAQ2D,IAAI9D,GACZjB,KAAKqG,aAAc,EACnBrG,KAAKoG,SAASxC,KAAK,GAAG3C,gBAAqBjB,KAAKY,KAAKe,yCAA0C,KAAM,CAACsF,mBAAoB,YAIhI,SAEEjH,KAAK8D,gBAAgB8G,WAAW5K,KAAKY,MAClCyC,UAAUpC,IACTG,QAAQ2D,IAAI9D,GACZjB,KAAK+D,OAAOqB,SAAS,CAAC,OAAQ,CAACE,WAAYtF,KAAKgE,UAItD,OACEhE,KAAKmG,SAASmC,Q,uCAhHL,IAAmB,wE,wBAAnB,GAAmB,2gBDnBhC,wBAmCA,uBAQA,wB,MA3CK,qCAmCA,6BAQA,0C,iQEpCL,MAAMuC,GAAiB,CACrB,CACEC,KAAM,GAAIC,SAAU,CAClB,CAACD,KAAM,QAASE,UAAW,GAC3B,CAACF,KAAM,cAAeE,UAAW,IAEjC,CAACF,KAAM,SAAUE,UAAW,IAC5B,CAACF,KAAM,eAAgBE,UAAW,OASjC,MAAMC,I,wBAAAA,K,qDAAAA,KAAqB,SAHvB,CAAC,IAAaC,SAASL,KACtB,OC6CL,MAAMM,I,wBAAAA,K,qDAAAA,KAAc,SAlChB,CACP,IACA,IACA,IACA,IACA,IAAeD,WACf,IACA,IACA,IACAD","file":"x","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\nimport {Item, Pack} from '../../schemas/homebrew/Items';\nimport {Observable, of} from 'rxjs';\nimport {UserInfo} from '../../schemas/UserInfo';\nimport {defaultOptions, defaultTextOptions} from '../APIHelper';\nimport {catchError} from 'rxjs/operators';\nimport {Spell, Tome} from '../../schemas/homebrew/Spells';\n\nconst itemsUrl = `${environment.apiURL}/homebrew/items`;\nconst spellsUrl = `${environment.apiURL}/homebrew/spells`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HomebrewService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  /* -----PACKS----- */\n  getUserPacks(): Observable<Pack[]> {\n    return this.http.get<Pack[]>(`${itemsUrl}/me`, defaultOptions());\n  }\n\n  newPack(pack: { name: string, public: boolean, desc: string, image: string }): Observable<any> {\n    return this.http.post<any>(`${itemsUrl}`, pack, defaultOptions())\n      .pipe(\n        catchError(this.handleError('newPack'))\n      );\n  }\n\n  getPack(id): Observable<Pack> {\n    return this.http.get<Pack>(`${itemsUrl}/${id}`, defaultOptions());\n  }\n\n  putPack(pack: Pack): Observable<string> {\n    // @ts-ignore\n    return this.http.put<string>(`${itemsUrl}/${pack._id.$oid}`, pack, defaultTextOptions())\n      .pipe(\n        catchError(this.handleError('putPack'))\n      );\n  }\n\n  deletePack(pack: Pack): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${itemsUrl}/${pack._id.$oid}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleError('deletePack'))\n      );\n  }\n\n  getPackEditors(id: string): Observable<string[]> {\n    return this.http.get<string[]>(`${itemsUrl}/${id}/editors`, defaultOptions());\n  }\n\n  getTemplateItems(): Observable<Item[]> {\n    return this.http.get<Item[]>(`${itemsUrl}/srd`, defaultOptions());\n  }\n\n  /* -----TOMES----- */\n  getUserTomes(): Observable<Tome[]> {\n    return this.http.get<Tome[]>(`${spellsUrl}/me`, defaultOptions());\n  }\n\n  newTome(tome: { name: string, public: boolean, desc: string, image: string }): Observable<any> {\n    return this.http.post<any>(`${spellsUrl}`, tome, defaultOptions())\n      .pipe(\n        catchError(this.handleError('newTome'))\n      );\n  }\n\n  getTome(id): Observable<Tome> {\n    return this.http.get<Tome>(`${spellsUrl}/${id}`, defaultOptions());\n  }\n\n  putTome(tome: Tome): Observable<string> {\n    // @ts-ignore\n    return this.http.put<string>(`${spellsUrl}/${tome._id.$oid}`, tome, defaultTextOptions())\n      .pipe(\n        catchError(this.handleError('putTome'))\n      );\n  }\n\n  deleteTome(tome: Tome): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${spellsUrl}/${tome._id.$oid}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleError('deleteTome'))\n      );\n  }\n\n  getTomeEditors(id: string): Observable<string[]> {\n    return this.http.get<string[]>(`${spellsUrl}/${id}/editors`, defaultOptions());\n  }\n\n  getTemplateSpells(): Observable<Spell[]> {\n    return this.http.get<Spell[]>(`${spellsUrl}/srd`, defaultOptions());\n  }\n\n  validateSpellJSON(data: object): Observable<{ success: boolean, result: string }> {\n    return this.http.post<{ success: boolean, result: string }>(`${spellsUrl}/validate`, data, defaultOptions())\n      .pipe(\n        catchError(err => of({success: false, result: err.error}))\n      );\n  }\n\n  /* -----META----- */\n  private handleError<T>(operation = 'operation') {\n    return (error: any): Observable<object> => {\n      console.error(error); // log to console and hope for the best\n      return of({error: `${operation} failed: ${error.error}`, success: false});\n    };\n  }\n}\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'avr-new-pack-dialog',\n  templateUrl: './new-pack-dialog.component.html',\n  styleUrls: ['./new-pack-dialog.component.css']\n})\nexport class NewPackDialog implements OnInit {\n\n  name: string;\n  public: boolean = false;\n  desc: string = '';\n  image: string = '';\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>New Pack...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n  <p class=\"mat-small\">\n    These settings can be changed at any time.\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close tabindex=\"1\">Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, public: public, image: image, desc: desc}\" [disabled]=\"!name\">\n    Create\n  </button>\n</mat-dialog-actions>\n","import {DiscordUser} from '../Discord';\n\nexport const REQUIRED_ITEM_PROPS = ['name'];\n\nexport class Pack {\n  name: string;\n  owner: string;\n  public: boolean;\n  desc: string;\n  image: string;\n  items?: Item[];\n  numItems?: number;\n  _id: { '$oid': string };\n}\n\nexport class Item {\n  name: string;\n  meta: string;\n  desc: string;\n  image?: string;\n\n  constructor() {\n    this.name = 'New Item';\n    this.meta = '';\n    this.desc = '';\n  }\n}\n\nexport class StructuredItem extends Item {\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {Pack} from '../../../../schemas/homebrew/Items';\n\n@Component({\n  selector: 'avr-pack-markdown-dialog',\n  templateUrl: './pack-markdown-dialog.component.html',\n  styleUrls: ['./pack-markdown-dialog.component.css'],\n  preserveWhitespaces: true\n})\nexport class PackMarkdownDialog implements OnInit {\n\n  mdData: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { name: string, data: Pack }) {\n    this.generateMD(this.data.data);\n  }\n\n  ngOnInit() {\n  }\n\n  generateMD(pack: Pack) {\n    let markdown: string = '';\n    let title = `# ${pack.name}`;\n    let desc = pack.desc || '';\n\n    markdown += `${title}\\n${desc}\\n\\n`;\n\n    for (let item of pack.items) {\n      let itemtitle = `#### ${item.name}`;\n      markdown += `${itemtitle}\\n${item.meta}\\n___\\n${item.desc}\\n\\n`;\n    }\n    markdown = markdown.replace('\\n', '\\n  '); // markdown newlines\n\n    this.mdData = markdown;\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n}\n","<h2 mat-dialog-title>Markdown - {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <textarea matInput readonly [value]=\"mdData\" placeholder=\"Markdown\" rows=\"10\" #mdElem></textarea>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(mdElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Done</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Share {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <p>\n      Owner: {{(owner | async)?.username}}\n    </p>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n    <mat-form-field *ngIf=\"public\">\n      <input matInput readonly [value]=\"shareLink\" placeholder=\"View Link\" #shareLinkElem>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(shareLinkElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Editors\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <p>To add or remove an editor, run the command <kbd>!pack editor @user</kbd> in Discord!</p>\n      <mat-list *ngIf=\"editors?.length\">\n        <mat-list-item *ngFor=\"let editor of editors\">{{(editor | async)?.username}}</mat-list-item>\n      </mat-list>\n    </mat-expansion-panel>\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Export\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class=\"button-row\" *ngIf=\"loaded\">\n        <button mat-raised-button color=\"primary\" (click)=\"beginJSONExport()\">Export to JSON\n        </button>\n        <button mat-raised-button color=\"primary\" (click)=\"beginMDExport()\">Export to Homebrewery\n        </button>\n      </div>\n      <div *ngIf=\"!loaded\">\n        <mat-spinner [diameter]=\"24\"></mat-spinner>\n      </div>\n    </mat-expansion-panel>\n\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{public: public}\">\n    Done\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\nimport {DiscordUser} from '../../../../schemas/Discord';\nimport {Pack} from '../../../../schemas/homebrew/Items';\nimport {UserInfo} from '../../../../schemas/UserInfo';\nimport {JSONExportDialog} from '../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {DiscordService} from '../../../../shared/discord.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {PackMarkdownDialog} from '../pack-markdown-dialog/pack-markdown-dialog.component';\n\n@Component({\n  selector: 'avr-pack-share-dialog',\n  templateUrl: './pack-share-dialog.component.html',\n  styleUrls: ['./pack-share-dialog.component.css']\n})\nexport class PackShareDialog implements OnInit {\n\n  public: boolean;\n  shareLink: string;\n  loaded: boolean;\n\n  owner: Observable<DiscordUser>;\n  editors: Observable<DiscordUser>[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Pack, private dialog: MatDialog,\n              private hbService: HomebrewService, private discord: DiscordService) {\n    this.public = data.public;\n    this.shareLink = `https://avrae.io/homebrew/items/${data._id.$oid}`;\n    this.loaded = data.items !== undefined;\n  }\n\n  ngOnInit() {\n    this.owner = this.discord.getUser(this.data.owner);\n    this.loadEditors();\n    if (!this.loaded) {\n      this.loadItems();\n    }\n  }\n\n  loadItems() {\n    const id = this.data._id.$oid;\n    this.hbService.getPack(id)\n      .subscribe(pack => {\n        this.data = pack;\n        this.loaded = true;\n      });\n  }\n\n  loadEditors() {\n    const id = this.data._id.$oid;\n    this.hbService.getPackEditors(id)\n      .subscribe(editors => {\n        const out = [];\n        editors.forEach(eid => out.push(this.discord.getUser(eid)));\n        this.editors = out;\n      });\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.data.name, data: this.data.items},\n      width: '60%'\n    });\n  }\n\n  beginMDExport() {\n    this.dialog.open(PackMarkdownDialog, {\n      data: {name: this.data.name, data: this.data},\n      width: '60%'\n    });\n  }\n\n}\n","<mat-toolbar color=\"primary\" class=\"mat-elevation-z2\">\n  <span>Your Packs</span>\n  <span class=\"toolbar-spacer\"></span>\n  <span><button mat-icon-button (click)=\"beginNew()\">\n    <mat-icon aria-label=\"New Pack\">add</mat-icon>\n  </button></span>\n</mat-toolbar>\n\n<div class=\"container\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-around\" *ngIf=\"packs && packs.length\">\n  <div class=\"pack-tile\" *ngFor=\"let pack of packs\" fxFlex=\"32%\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>{{pack.name}}</mat-card-title>\n        <mat-card-subtitle>By {{owners.get(pack.owner)?.username || 'loading...'}} - {{pack.numItems}} items\n        </mat-card-subtitle>\n      </mat-card-header>\n      <img mat-card-image [src]=\"pack.image || '../../../../assets/img/pack.png'\" alt=\"Pack Image\">\n      <mat-card-content *ngIf=\"pack.desc\">\n        <p>\n          {{pack.desc}}\n        </p>\n      </mat-card-content>\n      <mat-card-actions>\n        <a mat-button routerLink=\"{{pack._id.$oid}}\">EDIT</a>\n        <button mat-button (click)=\"beginShare(pack)\">SHARE</button>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"packs && !packs.length\">\n  <mat-card>\n    <p>Looks like you don't have any packs yet.</p>\n    <button mat-raised-button color=\"accent\" (click)=\"beginNew()\">Create One</button>\n  </mat-card>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {DiscordUser} from '../../../schemas/Discord';\nimport {Pack} from '../../../schemas/homebrew/Items';\nimport {DiscordService} from '../../../shared/discord.service';\nimport {HomebrewService} from '../homebrew.service';\nimport {NewPackDialog} from './new-pack-dialog/new-pack-dialog.component';\nimport {PackShareDialog} from './pack-share-dialog/pack-share-dialog.component';\n\n@Component({\n  selector: 'avr-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css']\n})\nexport class ItemsComponent implements OnInit {\n\n  packs: Pack[];\n  owners: Map<string, DiscordUser> = new Map<string, DiscordUser>();\n\n  constructor(private homebrewService: HomebrewService, private discord: DiscordService,\n              private dialog: MatDialog, private router: Router, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.getPacks();\n  }\n\n  getPacks(): void {\n    this.homebrewService.getUserPacks()\n      .subscribe(packs => {\n        this.packs = packs;\n        const requested = new Set();\n        for (const pack of packs) {\n          if (!requested.has(pack.owner)) {\n            requested.add(pack.owner);\n            this.discord.getUser(pack.owner)\n              .subscribe(user => this.owners.set(pack.owner, user));\n          }\n        }\n      });\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewPackDialog, {\n      width: '60%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let data = {name: result.name, public: result.public, desc: result.desc, image: result.image};\n        this.new(data);\n      }\n    });\n  }\n\n  beginShare(pack: Pack) {\n    const dialogRef = this.dialog.open(PackShareDialog, {\n      data: pack,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        pack = Object.assign(pack, result);\n        this.commit(pack);\n      }\n    });\n  }\n\n  new(pack: { name: string, public: boolean, desc: string, image: string }) {\n    // HTTP POST /homebrew/items\n    this.homebrewService.newPack(pack)\n      .subscribe(result => {\n        if (result.success) {\n          this.router.navigate([result.packId], {relativeTo: this.route});\n        }\n      });\n  }\n\n  commit(pack: Pack) {\n    // HTTP PUT /homebrew/items/:pack\n    this.homebrewService.putPack(pack)\n      .subscribe(result => {\n        console.log(result);\n      });\n  }\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {Pack} from '../../../../schemas/homebrew/Items';\n\n@Component({\n  selector: 'avr-pack-delete-dialog',\n  templateUrl: './pack-delete-dialog.component.html',\n  styleUrls: ['./pack-delete-dialog.component.css']\n})\nexport class PackDeleteDialog implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Pack) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>{{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, image: image, desc: desc}\" [disabled]=\"!name\">\n    Save\n  </button>\n  <button mat-raised-button color=\"warn\" (click)=\"beginDelete()\" *ngIf=\"isOwner\">Delete</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Deleting {{data.name}}...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Are you sure you want to delete {{data.name}}? This will remove the pack from all editors' libraries, and\n    invalidate any sharing links. <b>This cannot be undone.</b>\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" color=\"warn\">\n    Delete\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {Pack} from '../../../../schemas/homebrew/Items';\nimport {PackDeleteDialog} from '../pack-delete-dialog/pack-delete-dialog.component';\nimport {getUser} from '../../../APIHelper';\n\n@Component({\n  selector: 'avr-pack-options-dialog',\n  templateUrl: './pack-options-dialog.component.html',\n  styleUrls: ['./pack-options-dialog.component.css']\n})\nexport class PackOptionsDialog implements OnInit {\n\n  name: string;\n  image: string;\n  desc: string;\n  isOwner: boolean;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Pack, private dialog: MatDialog,\n              private dialogRef: MatDialogRef<PackOptionsDialog>) {\n    this.name = data.name;\n    this.image = data.image;\n    this.desc = data.desc;\n    this.isOwner = getUser().id === data.owner;\n  }\n\n  ngOnInit() {\n  }\n\n  beginDelete() {\n    const dialogRef = this.dialog.open(PackDeleteDialog, {\n      data: this.data,\n      width: '40%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.dialogRef.close({delete: true});\n      }\n    });\n  }\n\n}\n","<mat-expansion-panel (opened)=\"opened.emit()\">\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      <div>\n        {{item.name}}\n      </div>\n    </mat-panel-title>\n    <mat-panel-description markdown [data]=\"item.meta.split('\\n')[0]\">\n    </mat-panel-description>\n  </mat-expansion-panel-header>\n  <ng-template matExpansionPanelContent>\n    <div class=\"form-container\">\n      <div fxLayout=\"row\" fxLayoutGap=\"4px\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Name\" (change)=\"emitChange()\" [(ngModel)]=\"item.name\">\n        </mat-form-field>\n        <mat-form-field fxFlex *ngIf=\"item.image != undefined\">\n          <input matInput placeholder=\"Image URL\" (change)=\"emitChange()\" [(ngModel)]=\"item.image\">\n        </mat-form-field>\n      </div>\n      <mat-form-field>\n        <textarea matInput placeholder=\"Meta\" rows=\"3\" (change)=\"emitChange()\" [(ngModel)]=\"item.meta\"></textarea>\n      </mat-form-field>\n      <mat-form-field>\n        <textarea matInput placeholder=\"Description\" rows=\"7\" (change)=\"emitChange()\" [(ngModel)]=\"item.desc\"></textarea>\n      </mat-form-field>\n    </div>\n    <div class=\"actions\" fxLayout=\"row\">\n      <span fxFlex *ngIf=\"item.image === undefined\">\n        <button mat-icon-button matTooltip=\"Add image\" (click)=\"item.image=''; emitChange()\">\n          <mat-icon aria-label=\"Add image\">add_photo_alternate</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Export to JSON\" (click)=\"beginJSONExport()\">\n          <mat-icon aria-label=\"Export to JSON\">vertical_align_top</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isFirst\">\n        <button mat-icon-button matTooltip=\"Move Up\" (click)=\"moveUp.emit()\">\n          <mat-icon aria-label=\"Move Up\">arrow_upward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isLast\">\n        <button mat-icon-button matTooltip=\"Move Down\" (click)=\"moveDown.emit()\">\n          <mat-icon aria-label=\"Move Down\">arrow_downward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex=\"grow\"></span>\n      <span fxFlex>\n        <button mat-icon-button color=\"warn\" (click)=\"delete.emit()\">\n          <mat-icon aria-label=\"Delete\">delete</mat-icon>\n        </button>\n      </span>\n    </div>\n  </ng-template>\n</mat-expansion-panel>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Item} from '../../../../../schemas/homebrew/Items';\nimport {JSONExportDialog} from '../../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\n\n@Component({\n  selector: 'avr-item-detail',\n  templateUrl: './item-detail.component.html',\n  styleUrls: ['./item-detail.component.css']\n})\nexport class ItemDetailComponent implements OnInit {\n\n  @Input() item: Item;\n  @Input() isFirst: boolean;\n  @Input() isLast: boolean;\n  @Output() moveUp = new EventEmitter();\n  @Output() moveDown = new EventEmitter();\n  @Output() changed = new EventEmitter();\n  @Output() opened = new EventEmitter();\n  @Output() delete = new EventEmitter();\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n  }\n\n  emitChange() {\n    this.changed.emit();\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.item.name, data: this.item},\n      width: '60%'\n    });\n  }\n\n}\n","<div *ngIf=\"pack && canEdit != undefined\">\n  <mat-toolbar color=\"primary\" class=\"pack-toolbar\">\n    <span>\n      <button mat-icon-button (click)=\"back()\">\n        <mat-icon aria-label=\"Back\">arrow_back</mat-icon>\n      </button>\n    </span>\n    <span>\n      {{pack.name}}\n    </span>\n    <span class=\"toolbar-spacer\"></span>\n    <span>\n      <button mat-icon-button (click)=\"commit()\">\n        <mat-icon aria-label=\"Save\">save</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginSettings()\">\n        <mat-icon aria-label=\"Settings\">settings</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginShare()\">\n        <mat-icon aria-label=\"Share\">launch</mat-icon>\n      </button>\n    </span>\n  </mat-toolbar>\n\n  <div class=\"container\" fxLayout=\"row\" fxLayoutGap=\"8px\">\n    <div class=\"item-list\" fxFlex=\"grow\" *ngIf=\"pack.items.length\">\n      <mat-accordion>\n        <avr-item-detail *ngFor=\"let item of pack.items; first as isFirst; last as isLast\" [item]=\"item\"\n                         [isFirst]=\"isFirst\" [isLast]=\"isLast\" (moveUp)=\"moveUp(item)\" (moveDown)=\"moveDown(item)\"\n                         (changed)=\"ensureChangesNotif()\" (opened)=\"selectedItem = item\"\n                         (delete)=\"deleteItem(item)\"></avr-item-detail>\n        <mat-card fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"new-item-card\">\n          <span class=\"no-text-cursor\">New...</span>\n          <span class=\"toolbar-spacer\"></span>\n          <span>\n            <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"beginNewFromJSON()\">\n              <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n            </button>\n            <button mat-icon-button matTooltip=\"Copy SRD item\" (click)=\"beginNewFromSRD()\">\n              <mat-icon aria-label=\"From existing item\">scanner</mat-icon>\n            </button>\n            <button mat-icon-button (click)=\"newLooseItem()\">\n              <mat-icon aria-label=\"New\">add</mat-icon>\n            </button>\n          </span>\n        </mat-card>\n      </mat-accordion>\n    </div>\n\n    <div class=\"item-list\" fxFlex=\"grow\" *ngIf=\"!pack.items.length\">\n      <mat-card>\n        <p>Looks like this pack is empty.</p>\n        <button mat-raised-button color=\"accent\" (click)=\"newLooseItem()\">Make an Item</button>\n        <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"beginNewFromJSON()\">\n          <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n        </button>\n        <button mat-icon-button matTooltip=\"Copy SRD item\" (click)=\"beginNewFromSRD()\">\n          <mat-icon aria-label=\"From existing item\">scanner</mat-icon>\n        </button>\n      </mat-card>\n    </div>\n\n    <div class=\"item-preview mat-typography mat-elevation-z3\" fxFlex=\"grow\">\n      <avr-discord-embed *ngIf=\"selectedItem\" [author]=\"{name: user.username, icon_url: user.avatarUrl}\"\n                         [title]=\"selectedItem.name\" [description]=\"selectedItem.meta\"\n                         [fields]=\"[{name: 'Description', value: selectedItem.desc}]\"\n                         [thumbnail]=\"selectedItem.image\"\n                         [footer]=\"{text: 'Homebrew content.', icon_url: '../../../../assets/img/homebrew.png'}\">\n      </avr-discord-embed>\n      <avr-discord-embed *ngIf=\"!selectedItem\" [author]=\"{name: user.username, icon_url: user.avatarUrl}\"\n                         title=\"No item selected.\" description=\"Click on an item on the left to see a preview!\"\n                         [footer]=\"{text: 'Homebrew content.', icon_url: '../../../../assets/img/homebrew.png'}\">\n      </avr-discord-embed>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"!pack\">\n  <div class=\"container\">\n    <mat-card>\n      <mat-spinner [diameter]=\"24\"></mat-spinner>\n    </mat-card>\n  </div>\n</div>\n\n<div *ngIf=\"pack && !canEdit\">\n  <div class=\"container\">\n    <mat-card>\n      <p>You do not have permission to edit this pack.</p>\n      <button mat-raised-button color=\"accent\" (click)=\"back()\">Go Back</button>\n    </mat-card>\n  </div>\n</div>\n","import {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Location} from '@angular/common';\nimport {Component, OnDestroy, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Item, Pack, REQUIRED_ITEM_PROPS} from '../../../../schemas/homebrew/Items';\nimport {UserInfo} from '../../../../schemas/UserInfo';\nimport {JSONImportDialog} from '../../../../shared/dialogs/json-import-dialog/json-import-dialog.component';\nimport {SRDCopyDialog} from '../../../../shared/dialogs/srd-copy-dialog/srd-copy-dialog.component';\nimport {getUser} from '../../../APIHelper';\nimport {DashboardService} from '../../../dashboard.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {PackOptionsDialog} from '../pack-options-dialog/pack-options-dialog.component';\nimport {PackShareDialog} from '../pack-share-dialog/pack-share-dialog.component';\n\n@Component({\n  selector: 'avr-pack-detail',\n  templateUrl: './pack-detail.component.html',\n  styleUrls: ['./pack-detail.component.scss']\n})\nexport class PackDetailComponent implements OnInit, OnDestroy {\n\n  pack: Pack;\n  user: UserInfo = getUser();\n  canEdit: boolean;\n  isOwner: boolean;\n  changesOpen = false;\n  selectedItem: Item;\n\n  constructor(private route: ActivatedRoute, private homebrewService: HomebrewService,\n              private dashboardService: DashboardService, private location: Location, private dialog: MatDialog,\n              private router: Router, private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.getPack();\n  }\n\n  ngOnDestroy() {\n    this.snackBar.dismiss();\n  }\n\n  getPack() {\n    const id = this.route.snapshot.paramMap.get('pack');\n    this.homebrewService.getPack(id)\n      .subscribe(pack => {\n        this.pack = pack;\n        this.calcCanEdit();\n      });\n  }\n\n  calcCanEdit() {\n    if (!this.pack || !this.user) {\n      return;\n    }\n    this.isOwner = this.user.id === this.pack.owner;\n    if (this.isOwner) {\n      this.canEdit = true;\n    } else {\n      const id = this.pack._id.$oid;\n      this.homebrewService.getPackEditors(id)\n        .subscribe(editors => this.canEdit = editors.some(e => e === this.user.id));\n    }\n  }\n\n  newLooseItem() {\n    this.pack.items.push(new Item());\n    this.ensureChangesNotif();\n  }\n\n  deleteItem(item: Item) {\n    this.pack.items = this.pack.items.filter(obj => obj !== item);\n    this.ensureChangesNotif();\n  }\n\n  ensureChangesNotif() {\n    if (!this.changesOpen) {\n      this.changesOpen = true;\n      let snackBarRef = this.snackBar.open('You have unsaved changes!', 'Save', {duration: -1, horizontalPosition: 'right'});\n\n      snackBarRef.onAction().subscribe(() => {\n        this.commit();\n      });\n    }\n  }\n\n  beginShare() {\n    const dialogRef = this.dialog.open(PackShareDialog, {\n      data: this.pack,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        this.pack = Object.assign(this.pack, result);\n        this.commit();\n      }\n    });\n  }\n\n  beginSettings() {\n    const dialogRef = this.dialog.open(PackOptionsDialog, {\n      data: this.pack,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        if (result.delete) {\n          this.delete();\n        } else {\n          this.pack = Object.assign(this.pack, result);\n          this.commit();\n        }\n      }\n    });\n  }\n\n  beginNewFromJSON() {\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {validator: (data) => this.validatePackJSON(dialogRef, data)}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        const item: Item | Item[] = result;\n        console.log(item);\n        if (item instanceof Array) {\n          this.pack.items.push(...item);\n        } else {\n          this.pack.items.push(item);\n        }\n        this.ensureChangesNotif();\n      }\n    });\n  }\n\n  // SRD import\n  beginNewFromSRD() {\n    const dialogRef = this.dialog.open(SRDCopyDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {getter: () => this.homebrewService.getTemplateItems(), namer: a => a.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.pack.items.push(result);\n        this.ensureChangesNotif();\n      }\n    });\n  }\n\n  // validation\n  packIsValid(parsed) {\n    if (parsed instanceof Array) {\n      return Boolean(parsed.length) && parsed.every(item => this.objectIsItem(item));\n    } else if (parsed) {\n      return this.objectIsItem(parsed);\n    }\n    return false;\n  }\n\n  validatePackJSON(dialogRef, parsed) {\n    dialogRef.componentInstance.loading = false;\n    if (this.packIsValid(parsed)) {\n      dialogRef.close(JSON.parse(dialogRef.componentInstance.data));\n    } else {\n      dialogRef.componentInstance.error = 'Invalid pack data';\n    }\n  }\n\n  objectIsItem(obj: any): obj is Item {\n    return REQUIRED_ITEM_PROPS.every(v => v in obj);\n  }\n\n  commit() {\n    // HTTP PUT /homebrew/items/:pack\n    this.homebrewService.putPack(this.pack)\n      .subscribe(result => {\n        console.log(result);\n        this.changesOpen = false;\n        this.snackBar.open(`${result} Use \"!pack ${this.pack.name}\" to activate the pack in Discord!`, null, {horizontalPosition: 'right'});\n      });\n  }\n\n  delete() {\n    // HTTP DELETE /homebrew/items/:pack\n    this.homebrewService.deletePack(this.pack)\n      .subscribe(result => {\n        console.log(result);\n        this.router.navigate(['../'], {relativeTo: this.route});\n      });\n  }\n\n  back() {\n    this.location.back();\n  }\n\n  // move items in list\n  moveUp(item: Item) {\n    const index = this.pack.items.indexOf(item);\n    const newIndex = index - 1;\n    if (newIndex > -1) {\n      moveItemInArray(this.pack.items, index, newIndex);\n      this.ensureChangesNotif();\n    }\n  }\n\n  moveDown(item: Item) {\n    const index = this.pack.items.indexOf(item);\n    const newIndex = index + 1;\n    if (newIndex < this.pack.items.length) {\n      moveItemInArray(this.pack.items, index, newIndex);\n      this.ensureChangesNotif();\n    }\n  }\n}\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'avr-new-pack-dialog',\n  templateUrl: './new-tome-dialog.component.html',\n  styleUrls: ['./new-tome-dialog.component.css']\n})\nexport class NewTomeDialog implements OnInit {\n\n  name: string;\n  public: boolean = false;\n  desc: string = '';\n  image: string = '';\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>New Tome...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n  <p class=\"mat-small\">\n    These settings can be changed at any time.\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close tabindex=\"1\">Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, public: public, image: image, desc: desc}\" [disabled]=\"!name\">\n    Create\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {parseComponents, parseLevel, parseSchool, Spell, Tome} from '../../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-tome-markdown-dialog',\n  templateUrl: './tome-markdown-dialog.component.html',\n  styleUrls: ['./tome-markdown-dialog.component.css'],\n  preserveWhitespaces: true\n})\nexport class TomeMarkdownDialog implements OnInit {\n\n  mdData: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { name: string, data: Tome }) {\n    this.generateMD(this.data.data);\n  }\n\n  ngOnInit() {\n  }\n\n  generateMD(tome: Tome) {\n    let markdown = '';\n    const title = `# ${tome.name}`;\n    const desc = tome.desc || '';\n\n    markdown += `${title}\\n${desc}\\n\\n`;\n\n    for (const spell of tome.spells) {\n      markdown += this.generateSpellMD(spell);\n    }\n    markdown = markdown.replace('\\n', '\\n  '); // markdown newlines\n\n    this.mdData = markdown;\n  }\n\n  generateSpellMD(spell: Spell) {\n    const title = `#### ${spell.name}`;\n    const schlev = spell.level ?\n      `${parseLevel(spell.level)} ${parseSchool(spell.school)}` :\n      `${parseSchool(spell.school)} ${parseLevel(spell.level)}`;\n\n    const meta = `- **Casting Time:** ${spell.casttime + (spell.ritual ? ' (ritual)' : '')}\n- **Range:** ${spell.range}\n- **Components:** ${parseComponents(spell)}\n- **Duration:** ${(spell.concentration ? 'Concentration, up to ' : '') + spell.duration}`;\n\n    let desc = spell.description;\n\n    if (spell.higherlevels) {\n      desc = `${desc}\\n\\n**At Higher Levels:** ${spell.higherlevels}`;\n    }\n\n    return `${title}\n*${schlev}*\n___\n${meta}\\n\n${desc}\\n\\n`;\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n}\n","<h2 mat-dialog-title>Share {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <p>\n      Owner: {{(owner | async)?.username}}\n    </p>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n    <mat-form-field *ngIf=\"public\">\n      <input matInput readonly [value]=\"shareLink\" placeholder=\"View Link\" #shareLinkElem>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(shareLinkElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Editors\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <p>To add or remove an editor, run the command <kbd>!tome editor @user</kbd> in Discord!</p>\n      <mat-list *ngIf=\"editors?.length\">\n        <mat-list-item *ngFor=\"let editor of editors\">{{(editor | async)?.username}}</mat-list-item>\n      </mat-list>\n    </mat-expansion-panel>\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Export\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class=\"button-row\" *ngIf=\"loaded\">\n        <button mat-raised-button color=\"primary\" (click)=\"beginJSONExport()\">Export to JSON\n        </button>\n        <button mat-raised-button color=\"primary\" (click)=\"beginMDExport()\">Export to Homebrewery\n        </button>\n      </div>\n      <div *ngIf=\"!loaded\">\n        <mat-spinner [diameter]=\"24\"></mat-spinner>\n      </div>\n    </mat-expansion-panel>\n\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{public: public}\">\n    Done\n  </button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Markdown - {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <textarea matInput readonly [value]=\"mdData\" placeholder=\"Markdown\" rows=\"10\" #mdElem></textarea>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(mdElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Done</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\nimport {DiscordUser} from '../../../../schemas/Discord';\nimport {Tome} from '../../../../schemas/homebrew/Spells';\nimport {JSONExportDialog} from '../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {DiscordService} from '../../../../shared/discord.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {TomeMarkdownDialog} from './tome-markdown-dialog/tome-markdown-dialog.component';\n\n@Component({\n  selector: 'avr-pack-share-dialog',\n  templateUrl: './tome-share-dialog.component.html',\n  styleUrls: ['./tome-share-dialog.component.css']\n})\nexport class TomeShareDialog implements OnInit {\n\n  public: boolean;\n  shareLink: string;\n  loaded: boolean;\n\n  owner: Observable<DiscordUser>;\n  editors: Observable<DiscordUser>[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Tome, private dialog: MatDialog,\n              private hbService: HomebrewService, private discord: DiscordService) {\n    this.public = data.public;\n    this.shareLink = `https://avrae.io/homebrew/spells/${data._id.$oid}`;\n    this.loaded = data.spells !== undefined;\n  }\n\n  ngOnInit() {\n    this.owner = this.discord.getUser(this.data.owner);\n    this.loadEditors();\n    if (!this.loaded) {\n      this.loadSpells();\n    }\n  }\n\n  loadEditors() {\n    const id = this.data._id.$oid;\n    this.hbService.getTomeEditors(id)\n      .subscribe(editors => {\n        const out = [];\n        editors.forEach(eid => out.push(this.discord.getUser(eid)));\n        this.editors = out;\n      });\n  }\n\n  loadSpells() {\n    const id = this.data._id.$oid;\n    this.hbService.getTome(id)\n      .subscribe(tome => {\n        this.data = tome;\n        this.loaded = true;\n      });\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.data.name, data: this.data.spells},\n      width: '60%'\n    });\n  }\n\n  beginMDExport() {\n    this.dialog.open(TomeMarkdownDialog, {\n      data: {name: this.data.name, data: this.data},\n      width: '60%'\n    });\n  }\n\n}\n","<mat-toolbar color=\"primary\" class=\"mat-elevation-z2\">\n  <span>Your Tomes</span>\n  <span class=\"toolbar-spacer\"></span>\n  <span><button mat-icon-button (click)=\"beginNew()\">\n    <mat-icon aria-label=\"New Tome\">add</mat-icon>\n  </button></span>\n</mat-toolbar>\n\n<div class=\"container\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-around\" *ngIf=\"tomes && tomes.length\">\n  <div class=\"tome-tile\" *ngFor=\"let tome of tomes\" fxFlex=\"32%\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>{{tome.name}}</mat-card-title>\n        <mat-card-subtitle>By {{owners.get(tome.owner)?.username || 'loading...'}} - {{tome.numSpells}} spells\n        </mat-card-subtitle>\n      </mat-card-header>\n      <img mat-card-image [src]=\"tome.image || '../../../../assets/img/tome.png'\" alt=\"Tome Image\">\n      <mat-card-content *ngIf=\"tome.desc\">\n        <p>\n          {{tome.desc}}\n        </p>\n      </mat-card-content>\n      <mat-card-actions>\n        <a mat-button routerLink=\"{{tome._id.$oid}}\">EDIT</a>\n        <button mat-button (click)=\"beginShare(tome)\">SHARE</button>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"tomes && !tomes.length\">\n  <mat-card>\n    <p>Looks like you don't have any tomes yet.</p>\n    <button mat-raised-button color=\"accent\" (click)=\"beginNew()\">Create One</button>\n  </mat-card>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {of} from 'rxjs';\nimport {DiscordUser} from '../../../schemas/Discord';\nimport {Tome} from '../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../schemas/UserInfo';\nimport {DiscordService} from '../../../shared/discord.service';\nimport {HomebrewService} from '../homebrew.service';\nimport {NewTomeDialog} from './dialogs/new-tome-dialog.component';\nimport {TomeShareDialog} from './dialogs/tome-share-dialog.component';\n\n@Component({\n  selector: 'avr-spells',\n  templateUrl: './spells.component.html',\n  styleUrls: ['./spells.component.css']\n})\nexport class SpellsComponent implements OnInit {\n\n  tomes: Tome[];\n  owners: Map<string, DiscordUser> = new Map<string, DiscordUser>();\n\n  constructor(private homebrewService: HomebrewService, private discord: DiscordService,\n              private dialog: MatDialog, private router: Router, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.getTomes();\n  }\n\n  getTomes(): void {\n    this.homebrewService.getUserTomes()\n      .subscribe(tomes => {\n        this.tomes = tomes;\n        const requested = new Set();\n        for (const tome of tomes) {\n          if (!requested.has(tome.owner)) {\n            requested.add(tome.owner);\n            this.discord.getUser(tome.owner)\n              .subscribe(user => this.owners.set(tome.owner, user));\n          }\n        }\n      });\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewTomeDialog, {\n      width: '60%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let data = {name: result.name, public: result.public, desc: result.desc, image: result.image};\n        this.new(data);\n      }\n    });\n  }\n\n  beginShare(tome: Tome) {\n    const dialogRef = this.dialog.open(TomeShareDialog, {\n      data: tome,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        tome = Object.assign(tome, result);\n        this.commit(tome);\n      }\n    });\n  }\n\n  new(tome: { name: string, public: boolean, desc: string, image: string }) {\n    // HTTP POST /homebrew/spells\n    this.homebrewService.newTome(tome)\n      .subscribe(result => {\n        if (result.success) {\n          this.router.navigate([result.tomeId], {relativeTo: this.route});\n        }\n      });\n  }\n\n  commit(tome: Tome) {\n    // HTTP PUT /homebrew/spells/:tome\n    this.homebrewService.putTome(tome)\n      .subscribe(result => {\n        console.log(result);\n      });\n  }\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {Tome} from '../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-tome-delete-dialog',\n  templateUrl: './tome-delete-dialog.component.html',\n})\nexport class TomeDeleteDialog implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Tome) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>{{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, image: image, desc: desc}\" [disabled]=\"!name\">\n    Save\n  </button>\n  <button mat-raised-button color=\"warn\" (click)=\"beginDelete()\" *ngIf=\"isOwner\">Delete</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Deleting {{data.name}}...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Are you sure you want to delete {{data.name}}? This will remove the tome from all editors' libraries, and\n    invalidate any sharing links. <b>This cannot be undone.</b>\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" color=\"warn\">\n    Delete\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {getUser} from '../../../APIHelper';\nimport {Tome} from '../../../../schemas/homebrew/Spells';\nimport {TomeDeleteDialog} from './tome-delete-dialog.component';\n\n@Component({\n  selector: 'avr-tome-options-dialog',\n  templateUrl: './tome-options-dialog.component.html',\n  styleUrls: ['./tome-options-dialog.component.css']\n})\nexport class TomeOptionsDialog implements OnInit {\n\n  name: string;\n  image: string;\n  desc: string;\n  isOwner: boolean;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Tome, private dialog: MatDialog,\n              private dialogRef: MatDialogRef<TomeOptionsDialog>) {\n    this.name = data.name;\n    this.image = data.image;\n    this.desc = data.desc;\n    this.isOwner = getUser().id === data.owner;\n  }\n\n  ngOnInit() {\n  }\n\n  beginDelete() {\n    const dialogRef = this.dialog.open(TomeDeleteDialog, {\n      data: this.data,\n      width: '40%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.dialogRef.close({delete: true});\n      }\n    });\n  }\n\n}\n","import {Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {parseLevel, parseSchool} from '../../../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-spell-panel-description',\n  template: `\n    <mat-panel-description>{{description}}</mat-panel-description>`\n})\nexport class SpellPanelDescriptionComponent implements OnInit, OnChanges {\n\n  @Input() level: number;\n  @Input() school: string;\n\n  description: string;\n\n  constructor() {\n  }\n\n\n  genDesc() {\n    this.description = this.level ?\n      `${parseLevel(this.level)} ${parseSchool(this.school)}` : `${parseSchool(this.school)} ${parseLevel(this.level)}`;\n  }\n\n  ngOnInit() {\n    this.genDesc();\n  }\n\n  ngOnChanges(changes) {\n    this.genDesc();\n  }\n\n}\n","<mat-expansion-panel (opened)=\"opened.emit()\">\n  <!-- PANEL HEADER -->\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      <div>\n        {{spell.name}}\n      </div>\n    </mat-panel-title>\n    <avr-spell-panel-description [level]=\"spell.level\" [school]=\"spell.school\"></avr-spell-panel-description>\n  </mat-expansion-panel-header>\n  <ng-template matExpansionPanelContent>\n    <div class=\"form-container\">\n      <!-- NAME AND IMAGE -->\n      <div fxLayout=\"row\" fxLayoutGap=\"4px\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Name\" (change)=\"emitChange()\" [(ngModel)]=\"spell.name\">\n        </mat-form-field>\n        <mat-form-field fxFlex *ngIf=\"spell.image != undefined\">\n          <input matInput placeholder=\"Image URL\" (change)=\"emitChange()\" [(ngModel)]=\"spell.image\">\n        </mat-form-field>\n      </div>\n\n      <!-- LEVEL, SCHOOL, RITUAL -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\" fxLayoutAlign=\"center center\">\n        <mat-form-field fxFlex>\n          <mat-label>Level</mat-label>\n          <mat-select [(value)]=\"spell.level\" (selectionChange)=\"emitChange()\">\n            <mat-option [value]=\"0\">Cantrip</mat-option>\n            <mat-option [value]=\"1\">1st Level</mat-option>\n            <mat-option [value]=\"2\">2nd Level</mat-option>\n            <mat-option [value]=\"3\">3rd Level</mat-option>\n            <mat-option [value]=\"4\">4th Level</mat-option>\n            <mat-option [value]=\"5\">5th Level</mat-option>\n            <mat-option [value]=\"6\">6th Level</mat-option>\n            <mat-option [value]=\"7\">7th Level</mat-option>\n            <mat-option [value]=\"8\">8th Level</mat-option>\n            <mat-option [value]=\"9\">9th Level</mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field fxFlex>\n          <mat-label>School</mat-label>\n          <mat-select [(value)]=\"spell.school\" (selectionChange)=\"emitChange()\" *ngIf=\"!customSpellSchool\">\n            <mat-option value=\"A\">Abjuration</mat-option>\n            <mat-option value=\"C\">Conjuration</mat-option>\n            <mat-option value=\"D\">Divination</mat-option>\n            <mat-option value=\"E\">Enchantment</mat-option>\n            <mat-option value=\"V\">Evocation</mat-option>\n            <mat-option value=\"I\">Illusion</mat-option>\n            <mat-option value=\"N\">Necromancy</mat-option>\n            <mat-option value=\"T\">Transmutation</mat-option>\n            <mat-option value=\"Custom\" (click)=\"customSpellSchool = true\">Custom</mat-option>\n          </mat-select>\n          <input matInput placeholder=\"School\" (change)=\"emitChange()\" [(ngModel)]=\"spell.school\"\n                 *ngIf=\"customSpellSchool\">\n          <button mat-icon-button matSuffix matTooltip=\"Delete custom school\" (click)=\"customSpellSchool = false\"\n                  *ngIf=\"customSpellSchool\">\n            <mat-icon>remove_circle_outline</mat-icon>\n          </button>\n        </mat-form-field>\n\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.ritual\" (change)=\"emitChange()\">Ritual</mat-checkbox>\n      </div>\n\n      <!-- TIME AND RANGE -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Casting Time\" (change)=\"emitChange()\" [(ngModel)]=\"spell.casttime\">\n        </mat-form-field>\n\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Range\" (change)=\"emitChange()\" [(ngModel)]=\"spell.range\">\n        </mat-form-field>\n      </div>\n\n      <!-- COMPONENTS -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\" fxLayoutAlign=\"center center\">\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.components.verbal\" (change)=\"emitChange()\">\n          Verbal\n        </mat-checkbox>\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.components.somatic\" (change)=\"emitChange()\">\n          Somatic\n        </mat-checkbox>\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Material\" (change)=\"emitChange()\" [(ngModel)]=\"spell.components.material\">\n        </mat-form-field>\n      </div>\n\n      <!-- DURATION AND CONC -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\" fxLayoutAlign=\"center center\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Duration\" (change)=\"emitChange()\" [(ngModel)]=\"spell.duration\">\n        </mat-form-field>\n\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.concentration\" (change)=\"emitChange()\">\n          Concentration\n        </mat-checkbox>\n      </div>\n\n      <!-- DESCRIPTION -->\n      <mat-form-field>\n        <textarea matInput placeholder=\"Description\" rows=\"7\" (change)=\"emitChange()\"\n                  [(ngModel)]=\"spell.description\"></textarea>\n      </mat-form-field>\n\n      <!-- HIGHER LEVELS -->\n      <mat-form-field>\n        <textarea matInput placeholder=\"At Higher Levels\" rows=\"3\" (change)=\"emitChange()\"\n                  [(ngModel)]=\"spell.higherlevels\"></textarea>\n      </mat-form-field>\n\n      <!-- CLASSES AND SUBCLASSES -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\">\n        <mat-form-field fxFlex matTooltip=\"Separate classes with commas.\">\n          <input matInput placeholder=\"Classes\" (change)=\"emitChange()\" [(ngModel)]=\"spell.classes\">\n        </mat-form-field>\n\n        <mat-form-field fxFlex matTooltip=\"Separate subclasses with commas.\">\n          <input matInput placeholder=\"Subclasses\" (change)=\"emitChange()\" [(ngModel)]=\"spell.subclasses\">\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- ACTION BUTTONS -->\n    <div class=\"actions\" fxLayout=\"row\">\n      <span fxFlex *ngIf=\"spell.image === undefined\">\n        <button mat-icon-button matTooltip=\"Add image\" (click)=\"spell.image=''; emitChange()\">\n          <mat-icon aria-label=\"Add image\">add_photo_alternate</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Export to JSON\" (click)=\"beginJSONExport()\">\n          <mat-icon aria-label=\"Export to JSON\">vertical_align_top</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Edit Automation\" (click)=\"moveToEditor.emit()\">\n          <mat-icon aria-label=\"Edit Automation\">build</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isFirst\">\n        <button mat-icon-button matTooltip=\"Move Up\" (click)=\"moveUp.emit()\">\n          <mat-icon aria-label=\"Move Up\">arrow_upward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isLast\">\n        <button mat-icon-button matTooltip=\"Move Down\" (click)=\"moveDown.emit()\">\n          <mat-icon aria-label=\"Move Down\">arrow_downward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex=\"grow\"></span>\n      <span fxFlex>\n        <button mat-icon-button color=\"warn\" (click)=\"delete.emit()\">\n          <mat-icon aria-label=\"Delete\">delete</mat-icon>\n        </button>\n      </span>\n    </div>\n  </ng-template>\n</mat-expansion-panel>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Spell, SPELL_SCHOOLS} from '../../../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../../../schemas/UserInfo';\nimport {JSONExportDialog} from '../../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\n\n@Component({\n  selector: 'avr-spell-detail',\n  templateUrl: './spell-detail.component.html',\n  styleUrls: ['./spell-detail.component.css']\n})\nexport class SpellDetailComponent implements OnInit {\n\n  @Input() spell: Spell;\n  @Input() isFirst: boolean;\n  @Input() isLast: boolean;\n  @Output() moveUp = new EventEmitter();\n  @Output() moveDown = new EventEmitter();\n  @Output() changed = new EventEmitter();\n  @Output() opened = new EventEmitter();\n  @Output() delete = new EventEmitter();\n  @Output() moveToEditor = new EventEmitter();\n\n  customSpellSchool: boolean;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.customSpellSchool = !SPELL_SCHOOLS.includes(this.spell.school);\n  }\n\n  emitChange() {\n    this.changed.emit();\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.spell.name, data: this.spell},\n      width: '60%'\n    });\n  }\n\n}\n","<div class=\"container\" fxLayout=\"row\" fxLayoutGap=\"8px\">\n  <div class=\"spell-list\" fxFlex=\"grow\" *ngIf=\"tome.spells.length\">\n    <mat-accordion>\n      <avr-spell-detail *ngFor=\"let spell of tome.spells; first as isFirst; last as isLast\" [spell]=\"spell\"\n                        [isFirst]=\"isFirst\" [isLast]=\"isLast\" (moveUp)=\"moveUp(spell)\" (moveDown)=\"moveDown(spell)\"\n                        (changed)=\"changed.emit()\" (opened)=\"selectedSpell = spell; selected.emit(spell)\"\n                        (delete)=\"deleteSpell(spell)\" (moveToEditor)=\"moveToEditor.emit()\" ></avr-spell-detail>\n      <mat-card fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"new-spell-card\">\n        <span class=\"no-text-cursor\">New...</span>\n        <span class=\"toolbar-spacer\"></span>\n        <span>\n            <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"newFromJSON()\">\n              <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n            </button>\n            <button mat-icon-button matTooltip=\"Copy SRD spell\" (click)=\"newFromSRD()\">\n              <mat-icon aria-label=\"From existing spell\">scanner</mat-icon>\n            </button>\n            <button mat-icon-button (click)=\"newSpell()\">\n              <mat-icon aria-label=\"New\">add</mat-icon>\n            </button>\n          </span>\n      </mat-card>\n    </mat-accordion>\n  </div>\n\n  <div class=\"spell-list\" fxFlex=\"grow\" *ngIf=\"!tome.spells.length\">\n    <mat-card>\n      <p>Looks like this tome is empty.</p>\n      <button mat-raised-button color=\"accent\" (click)=\"newSpell()\">Make a Spell</button>\n      <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"newFromJSON()\">\n        <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n      </button>\n      <button mat-icon-button matTooltip=\"Copy SRD spell\" (click)=\"newFromSRD()\">\n        <mat-icon aria-label=\"From existing spell\">scanner</mat-icon>\n      </button>\n    </mat-card>\n  </div>\n\n  <div class=\"spell-preview mat-typography mat-elevation-z3\" fxFlex=\"grow\">\n    <avr-spell-embed [name]=\"selectedSpell?.name\" [image]=\"selectedSpell?.image\" [level]=\"selectedSpell?.level\"\n                     [school]=\"selectedSpell?.school\" [classes]=\"selectedSpell?.classes\"\n                     [subclasses]=\"selectedSpell?.subclasses\" [verbal]=\"selectedSpell?.components.verbal\"\n                     [somatic]=\"selectedSpell?.components.somatic\" [material]=\"selectedSpell?.components.material\"\n                     [time]=\"selectedSpell?.casttime\" [ritual]=\"selectedSpell?.ritual\" [range]=\"selectedSpell?.range\"\n                     [concentration]=\"selectedSpell?.concentration\" [duration]=\"selectedSpell?.duration\"\n                     [description]=\"selectedSpell?.description\" [higherlevels]=\"selectedSpell?.higherlevels\"\n                     [user]=\"user\"></avr-spell-embed>\n  </div>\n</div>\n","import {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {Spell, Tome} from '../../../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../../../schemas/UserInfo';\nimport {JSONImportDialog} from '../../../../../shared/dialogs/json-import-dialog/json-import-dialog.component';\nimport {SRDCopyDialog} from '../../../../../shared/dialogs/srd-copy-dialog/srd-copy-dialog.component';\nimport {HomebrewService} from '../../../homebrew.service';\n\n@Component({\n  selector: 'avr-spell-list',\n  templateUrl: './spell-list.component.html',\n  styleUrls: ['./spell-list.component.scss']\n})\nexport class SpellListComponent implements OnInit {\n\n  @Input() tome: Tome;\n  @Input() user: UserInfo;\n  @Output() selected = new EventEmitter();\n  @Output() changed = new EventEmitter();\n  @Output() moveToEditor = new EventEmitter();\n\n  selectedSpell: Spell;\n\n  constructor(private dialog: MatDialog, private hbService: HomebrewService) {\n  }\n\n  ngOnInit() {\n  }\n\n  newSpell() {\n    this.tome.spells.push(new Spell());\n    this.changed.emit();\n  }\n\n  newFromJSON() {\n\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {validator: (data) => this.validateSpellJSON(dialogRef, data)}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let spell: Spell | Spell[] = result;\n        console.log(spell);\n        if (spell instanceof Array) {\n          this.tome.spells.push(...spell);\n        } else {\n          this.tome.spells.push(spell);\n        }\n        this.changed.emit();\n      }\n    });\n  }\n\n  newFromSRD() {\n    const dialogRef = this.dialog.open(SRDCopyDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {getter: () => this.hbService.getTemplateSpells(), namer: a => a.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.tome.spells.push(result);\n        this.changed.emit();\n      }\n    });\n  }\n\n  deleteSpell(spell: Spell) {\n    this.tome.spells = this.tome.spells.filter(obj => obj !== spell);\n    this.changed.emit();\n  }\n\n  // spell import validation\n  validateSpellJSON(dialogRef: MatDialogRef<JSONImportDialog>, data) {\n    this.hbService.validateSpellJSON(data)\n      .subscribe(\n        result => this.onValidationReply(dialogRef, result)\n      );\n  }\n\n  onValidationReply(dialogRef: MatDialogRef<JSONImportDialog>, result) {\n    console.log(result);\n    dialogRef.componentInstance.loading = false;\n    if (result.success) {\n      dialogRef.close(JSON.parse(dialogRef.componentInstance.data));\n    } else {\n      dialogRef.componentInstance.error = result.result;\n    }\n  }\n\n\n  // move items in list\n  moveUp(spell: Spell) {\n    const index = this.tome.spells.indexOf(spell);\n    const newIndex = index - 1;\n    if (newIndex > -1) {\n      moveItemInArray(this.tome.spells, index, newIndex);\n      this.changed.emit();\n    }\n  }\n\n  moveDown(spell: Spell) {\n    const index = this.tome.spells.indexOf(spell);\n    const newIndex = index + 1;\n    if (newIndex < this.tome.spells.length) {\n      moveItemInArray(this.tome.spells, index, newIndex);\n      this.changed.emit();\n    }\n  }\n}\n","<div *ngIf=\"spell\" class=\"container\">\n  <mat-card>\n    <p>Editing {{spell.name}}...</p>\n    <p>You can find help on how to use the spell editor\n      <a target=\"_blank\" href=\"https://avrae.readthedocs.io/en/latest/automation_ref.html\">here</a>.</p>\n    <avr-automation-editor [automation]=\"getAutomation(spell)\" [spell]=\"spell\"\n                           (changed)=\"changed.emit()\"></avr-automation-editor>\n  </mat-card>\n</div>\n\n<div *ngIf=\"!spell\" class=\"container\">\n  <mat-card>\n    <p>\n      No spell selected.\n    </p>\n  </mat-card>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AutomationEffect} from '../../../../../schemas/homebrew/AutomationEffects';\nimport {Spell} from '../../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-spell-editor',\n  templateUrl: './spell-editor.component.html',\n  styleUrls: ['./spell-editor.component.css']\n})\nexport class SpellEditorComponent implements OnInit {\n\n  @Input() spell: Spell;\n  @Output() changed = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  getAutomation(spell: Spell): AutomationEffect[] {\n    if (spell.automation === null) {\n      spell.automation = [];\n    }\n    return spell.automation;\n  }\n\n\n}\n","<div *ngIf=\"tome && canEdit != undefined\">\n  <mat-toolbar color=\"primary\" class=\"tome-toolbar\">\n    <span>\n      <button mat-icon-button (click)=\"back()\">\n        <mat-icon aria-label=\"Back\">arrow_back</mat-icon>\n      </button>\n    </span>\n    <span>\n      {{tome.name}}\n    </span>\n    <span class=\"toolbar-spacer\"></span>\n    <span>\n      <button mat-icon-button (click)=\"commit()\">\n        <mat-icon aria-label=\"Save\">save</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginSettings()\">\n        <mat-icon aria-label=\"Settings\">settings</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginShare()\">\n        <mat-icon aria-label=\"Share\">launch</mat-icon>\n      </button>\n    </span>\n  </mat-toolbar>\n\n  <mat-tab-group backgroundColor=\"primary\" #tabGroup>\n    <mat-tab label=\"Spells\">\n      <avr-spell-list [tome]=\"tome\" [user]=\"user\" (selected)=\"selectedSpell = $event\"\n                      (changed)=\"ensureChangesNotif()\" (moveToEditor)=\"tabGroup.selectedIndex = 1\"></avr-spell-list>\n    </mat-tab>\n    <mat-tab label=\"Editor\">\n      <avr-spell-editor [spell]=\"selectedSpell\" (changed)=\"ensureChangesNotif()\"></avr-spell-editor>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n\n<div *ngIf=\"!tome\">\n  <div class=\"container\">\n    <mat-card>\n      <mat-spinner [diameter]=\"24\"></mat-spinner>\n    </mat-card>\n  </div>\n</div>\n\n<div *ngIf=\"tome && !canEdit\">\n  <div class=\"container\">\n    <mat-card>\n      <p>You do not have permission to edit this tome.</p>\n      <button mat-raised-button color=\"accent\" (click)=\"back()\">Go Back</button>\n    </mat-card>\n  </div>\n</div>\n","import {Location} from '@angular/common';\nimport {Component, OnDestroy, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {ActivatedRoute, Router} from '@angular/router';\n\nimport {Spell, Tome} from '../../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../../schemas/UserInfo';\nimport {getUser} from '../../../APIHelper';\nimport {DashboardService} from '../../../dashboard.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {TomeOptionsDialog} from '../dialogs/tome-options-dialog.component';\nimport {TomeShareDialog} from '../dialogs/tome-share-dialog.component';\n\n@Component({\n  selector: 'avr-tome-detail',\n  templateUrl: './tome-detail.component.html',\n  styleUrls: ['./tome-detail.component.scss']\n})\nexport class TomeDetailComponent implements OnInit, OnDestroy {\n\n  tome: Tome;\n  user: UserInfo = getUser();\n  canEdit: boolean;\n  isOwner: boolean;\n  changesOpen = false;\n  selectedSpell: Spell;\n\n  constructor(private route: ActivatedRoute, private homebrewService: HomebrewService,\n              private dashboardService: DashboardService, private location: Location, private dialog: MatDialog,\n              private router: Router, private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.getTome();\n  }\n\n  ngOnDestroy() {\n    this.snackBar.dismiss();\n  }\n\n  getTome() {\n    const id = this.route.snapshot.paramMap.get('tome');\n    this.homebrewService.getTome(id)\n      .subscribe(tome => {\n        this.tome = tome;\n        this.calcCanEdit();\n      });\n  }\n\n  calcCanEdit() {\n    if (!this.tome || !this.user) {\n      return;\n    }\n    this.isOwner = this.user.id === this.tome.owner;\n    if (this.isOwner) {\n      this.canEdit = true;\n    } else {\n      const id = this.tome._id.$oid;\n      this.homebrewService.getTomeEditors(id)\n        .subscribe(editors => this.canEdit = editors.some(e => e === this.user.id));\n    }\n  }\n\n  ensureChangesNotif() {\n    if (!this.changesOpen) {\n      this.changesOpen = true;\n      let snackBarRef = this.snackBar.open('You have unsaved changes!', 'Save', {duration: -1, horizontalPosition: 'right'});\n\n      snackBarRef.onAction().subscribe(() => {\n        this.commit();\n      });\n    }\n  }\n\n  beginShare() {\n    const dialogRef = this.dialog.open(TomeShareDialog, {\n      data: this.tome,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        this.tome = Object.assign(this.tome, result);\n        this.commit();\n      }\n    });\n  }\n\n  beginSettings() {\n    const dialogRef = this.dialog.open(TomeOptionsDialog, {\n      data: this.tome,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        if (result.delete) {\n          this.delete();\n        } else {\n          this.tome = Object.assign(this.tome, result);\n          this.commit();\n        }\n      }\n    });\n  }\n\n  commit() {\n    // HTTP PUT /homebrew/spells/:tome\n    this.homebrewService.putTome(this.tome)\n      .subscribe(result => {\n        console.log(result);\n        this.changesOpen = false;\n        this.snackBar.open(`${result} Use \"!tome ${this.tome.name}\" to activate the tome in Discord!`, null, {horizontalPosition: 'right'});\n      });\n  }\n\n  delete() {\n    // HTTP DELETE /homebrew/spells/:tome\n    this.homebrewService.deleteTome(this.tome)\n      .subscribe(result => {\n        console.log(result);\n        this.router.navigate(['../'], {relativeTo: this.route});\n      });\n  }\n\n  back() {\n    this.location.back();\n  }\n}\n\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {ItemsComponent} from './items/items.component';\nimport {PackDetailComponent} from './items/pack-detail/pack-detail.component';\nimport {SpellsComponent} from './spells/spells.component';\nimport {TomeDetailComponent} from './spells/tome-detail/tome-detail.component';\n\nconst routes: Routes = [\n  {\n    path: '', children: [\n      {path: 'items', component: ItemsComponent},\n      {path: 'items/:pack', component: PackDetailComponent},\n\n      {path: 'spells', component: SpellsComponent},\n      {path: 'spells/:tome', component: TomeDetailComponent},\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomebrewRoutingModule {\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule} from '@angular/forms';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {MaterialModule} from '../../material/material.module';\nimport {AutomationEditorModule} from '../../shared/automation-editor/automation-editor.module';\nimport {DiscordEmbedModule} from '../../shared/discord-embed/discord-embed.module';\nimport {SpellEmbedModule} from '../../shared/spell-embed/spell-embed.module';\n\nimport {HomebrewRoutingModule} from './homebrew-routing.module';\nimport {ItemsComponent} from './items/items.component';\nimport {NewPackDialog} from './items/new-pack-dialog/new-pack-dialog.component';\nimport {PackDeleteDialog} from './items/pack-delete-dialog/pack-delete-dialog.component';\nimport {ItemDetailComponent} from './items/pack-detail/item-detail/item-detail.component';\nimport {PackDetailComponent} from './items/pack-detail/pack-detail.component';\nimport {PackMarkdownDialog} from './items/pack-markdown-dialog/pack-markdown-dialog.component';\nimport {PackOptionsDialog} from './items/pack-options-dialog/pack-options-dialog.component';\nimport {PackShareDialog} from './items/pack-share-dialog/pack-share-dialog.component';\nimport {NewTomeDialog} from './spells/dialogs/new-tome-dialog.component';\nimport {TomeDeleteDialog} from './spells/dialogs/tome-delete-dialog.component';\nimport {TomeMarkdownDialog} from './spells/dialogs/tome-markdown-dialog/tome-markdown-dialog.component';\nimport {TomeOptionsDialog} from './spells/dialogs/tome-options-dialog.component';\nimport {TomeShareDialog} from './spells/dialogs/tome-share-dialog.component';\nimport {SpellsComponent} from './spells/spells.component';\nimport {SpellDetailComponent} from './spells/tome-detail/spell-detail/spell-detail.component';\nimport {SpellPanelDescriptionComponent} from './spells/tome-detail/spell-detail/spell-panel-description/spell-panel-description.component';\nimport {SpellEditorComponent} from './spells/tome-detail/spell-editor/spell-editor.component';\nimport {SpellListComponent} from './spells/tome-detail/spell-list/spell-list.component';\nimport {TomeDetailComponent} from './spells/tome-detail/tome-detail.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    FlexLayoutModule,\n    MarkdownModule.forChild(),\n    DiscordEmbedModule,\n    AutomationEditorModule,\n    SpellEmbedModule,\n    HomebrewRoutingModule,\n  ],\n  declarations: [\n    ItemsComponent,\n    PackDetailComponent,\n    NewPackDialog,\n    PackOptionsDialog,\n    PackShareDialog,\n    PackDeleteDialog,\n    ItemDetailComponent,\n    PackMarkdownDialog,\n\n    SpellsComponent,\n    NewTomeDialog,\n    TomeShareDialog,\n    TomeDetailComponent,\n    SpellDetailComponent,\n    SpellListComponent,\n    TomeOptionsDialog,\n    TomeDeleteDialog,\n    SpellPanelDescriptionComponent,\n    SpellEditorComponent,\n    TomeMarkdownDialog,\n  ]\n})\nexport class HomebrewModule {\n}\n"]}