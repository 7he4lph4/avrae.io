{"version":3,"sources":["webpack:///src/app/dashboard/homebrew/homebrew.service.ts","webpack:///src/app/dashboard/homebrew/items/new-pack-dialog/new-pack-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/new-pack-dialog/new-pack-dialog.component.html","webpack:///src/app/schemas/homebrew/Items.ts","webpack:///src/app/dashboard/homebrew/items/pack-markdown-dialog/pack-markdown-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-markdown-dialog/pack-markdown-dialog.component.html","webpack:///src/app/dashboard/homebrew/items/pack-share-dialog/pack-share-dialog.component.html","webpack:///src/app/dashboard/homebrew/items/pack-share-dialog/pack-share-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/items.component.html","webpack:///src/app/dashboard/homebrew/items/items.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-delete-dialog/pack-delete-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-options-dialog/pack-options-dialog.component.html","webpack:///src/app/dashboard/homebrew/items/pack-delete-dialog/pack-delete-dialog.component.html","webpack:///src/app/dashboard/homebrew/items/pack-options-dialog/pack-options-dialog.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-detail/item-detail/item-detail.component.html","webpack:///src/app/dashboard/homebrew/items/pack-detail/item-detail/item-detail.component.ts","webpack:///src/app/dashboard/homebrew/items/pack-detail/pack-detail.component.html","webpack:///src/app/dashboard/homebrew/items/pack-detail/pack-detail.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/new-tome-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/new-tome-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-markdown-dialog/tome-markdown-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-share-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-markdown-dialog/tome-markdown-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-share-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/spells.component.html","webpack:///src/app/dashboard/homebrew/spells/spells.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-delete-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-options-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-delete-dialog.component.html","webpack:///src/app/dashboard/homebrew/spells/dialogs/tome-options-dialog.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-detail/spell-panel-description/spell-panel-description.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-detail/spell-detail.component.html","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-detail/spell-detail.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-list/spell-list.component.html","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-list/spell-list.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-editor/spell-editor.component.html","webpack:///src/app/dashboard/homebrew/spells/tome-detail/spell-editor/spell-editor.component.ts","webpack:///src/app/dashboard/homebrew/spells/tome-detail/tome-detail.component.html","webpack:///src/app/dashboard/homebrew/spells/tome-detail/tome-detail.component.ts","webpack:///src/app/dashboard/homebrew/homebrew-routing.module.ts","webpack:///src/app/dashboard/homebrew/homebrew.module.ts"],"names":["itemsUrl","environment","apiURL","spellsUrl","http","this","get","pack","post","pipe","catchError","handleError","id","put","_id","$oid","tome","data","err","of","success","result","error","operation","console","NewPackDialog","public","desc","image","REQUIRED_ITEM_PROPS","Item","name","meta","PackMarkdownDialog","generateMD","markdown","items","item","replace","mdData","inputElement","select","document","execCommand","setSelectionRange","copy","dialog","hbService","discord","shareLink","loaded","owner","getUser","loadEditors","loadItems","getPack","subscribe","getPackEditors","editors","out","forEach","eid","push","open","width","homebrewService","router","route","owners","Map","getPacks","getUserPacks","packs","requested","Set","has","add","user","set","disableClose","afterClosed","log","Object","assign","commit","newPack","navigate","packId","relativeTo","putPack","beginNew","PackDeleteDialog","dialogRef","isOwner","close","delete","moveUp","moveDown","changed","opened","emit","dashboardService","location","snackBar","changesOpen","dismiss","snapshot","paramMap","calcCanEdit","canEdit","some","e","ensureChangesNotif","filter","obj","duration","horizontalPosition","onAction","validator","validatePackJSON","Array","getter","getTemplateItems","namer","a","parsed","Boolean","length","every","objectIsItem","componentInstance","loading","packIsValid","JSON","parse","v","deletePack","back","index","indexOf","newIndex","NewTomeDialog","spells","spell","generateSpellMD","title","schlev","level","school","casttime","ritual","range","concentration","description","higherlevels","loadSpells","getTomeEditors","getTome","getTomes","getUserTomes","tomes","newTome","tomeId","putTome","TomeDeleteDialog","genDesc","changes","moveToEditor","customSpellSchool","includes","selected","validateSpellJSON","getTemplateSpells","onValidationReply","automation","deleteTome","routes","path","children","component","HomebrewRoutingModule","forChild","HomebrewModule"],"mappings":"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","file":"x","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\nimport {Item, Pack} from '../../schemas/homebrew/Items';\nimport {Observable, of} from 'rxjs';\nimport {UserInfo} from '../../schemas/UserInfo';\nimport {defaultOptions, defaultTextOptions} from '../APIHelper';\nimport {catchError} from 'rxjs/operators';\nimport {Spell, Tome} from '../../schemas/homebrew/Spells';\n\nconst itemsUrl = `${environment.apiURL}/homebrew/items`;\nconst spellsUrl = `${environment.apiURL}/homebrew/spells`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HomebrewService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  /* -----PACKS----- */\n  getUserPacks(): Observable<Pack[]> {\n    return this.http.get<Pack[]>(`${itemsUrl}/me`, defaultOptions());\n  }\n\n  newPack(pack: { name: string, public: boolean, desc: string, image: string }): Observable<any> {\n    return this.http.post<any>(`${itemsUrl}`, pack, defaultOptions())\n      .pipe(\n        catchError(this.handleError('newPack'))\n      );\n  }\n\n  getPack(id): Observable<Pack> {\n    return this.http.get<Pack>(`${itemsUrl}/${id}`, defaultOptions());\n  }\n\n  putPack(pack: Pack): Observable<string> {\n    // @ts-ignore\n    return this.http.put<string>(`${itemsUrl}/${pack._id.$oid}`, pack, defaultTextOptions())\n      .pipe(\n        catchError(this.handleError('putPack'))\n      );\n  }\n\n  deletePack(pack: Pack): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${itemsUrl}/${pack._id.$oid}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleError('deletePack'))\n      );\n  }\n\n  getPackEditors(id: string): Observable<string[]> {\n    return this.http.get<string[]>(`${itemsUrl}/${id}/editors`, defaultOptions());\n  }\n\n  getTemplateItems(): Observable<Item[]> {\n    return this.http.get<Item[]>(`${itemsUrl}/srd`, defaultOptions());\n  }\n\n  /* -----TOMES----- */\n  getUserTomes(): Observable<Tome[]> {\n    return this.http.get<Tome[]>(`${spellsUrl}/me`, defaultOptions());\n  }\n\n  newTome(tome: { name: string, public: boolean, desc: string, image: string }): Observable<any> {\n    return this.http.post<any>(`${spellsUrl}`, tome, defaultOptions())\n      .pipe(\n        catchError(this.handleError('newTome'))\n      );\n  }\n\n  getTome(id): Observable<Tome> {\n    return this.http.get<Tome>(`${spellsUrl}/${id}`, defaultOptions());\n  }\n\n  putTome(tome: Tome): Observable<string> {\n    // @ts-ignore\n    return this.http.put<string>(`${spellsUrl}/${tome._id.$oid}`, tome, defaultTextOptions())\n      .pipe(\n        catchError(this.handleError('putTome'))\n      );\n  }\n\n  deleteTome(tome: Tome): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${spellsUrl}/${tome._id.$oid}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleError('deleteTome'))\n      );\n  }\n\n  getTomeEditors(id: string): Observable<string[]> {\n    return this.http.get<string[]>(`${spellsUrl}/${id}/editors`, defaultOptions());\n  }\n\n  getTemplateSpells(): Observable<Spell[]> {\n    return this.http.get<Spell[]>(`${spellsUrl}/srd`, defaultOptions());\n  }\n\n  validateSpellJSON(data: object): Observable<{ success: boolean, result: string }> {\n    return this.http.post<{ success: boolean, result: string }>(`${spellsUrl}/validate`, data, defaultOptions())\n      .pipe(\n        catchError(err => of({success: false, result: err.error}))\n      );\n  }\n\n  /* -----META----- */\n  private handleError<T>(operation = 'operation') {\n    return (error: any): Observable<object> => {\n      console.error(error); // log to console and hope for the best\n      return of({error: `${operation} failed: ${error.error}`, success: false});\n    };\n  }\n}\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'avr-new-pack-dialog',\n  templateUrl: './new-pack-dialog.component.html',\n  styleUrls: ['./new-pack-dialog.component.css']\n})\nexport class NewPackDialog implements OnInit {\n\n  name: string;\n  public: boolean = false;\n  desc: string = '';\n  image: string = '';\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>New Pack...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n  <p class=\"mat-small\">\n    These settings can be changed at any time.\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close tabindex=\"1\">Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, public: public, image: image, desc: desc}\" [disabled]=\"!name\">\n    Create\n  </button>\n</mat-dialog-actions>\n","import {DiscordUser} from '../Discord';\n\nexport const REQUIRED_ITEM_PROPS = ['name'];\n\nexport class Pack {\n  name: string;\n  owner: string;\n  public: boolean;\n  desc: string;\n  image: string;\n  items?: Item[];\n  numItems?: number;\n  _id: { '$oid': string };\n}\n\nexport class Item {\n  name: string;\n  meta: string;\n  desc: string;\n  image?: string;\n\n  constructor() {\n    this.name = 'New Item';\n    this.meta = '';\n    this.desc = '';\n  }\n}\n\nexport class StructuredItem extends Item {\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {Pack} from '../../../../schemas/homebrew/Items';\n\n@Component({\n  selector: 'avr-pack-markdown-dialog',\n  templateUrl: './pack-markdown-dialog.component.html',\n  styleUrls: ['./pack-markdown-dialog.component.css'],\n  preserveWhitespaces: true\n})\nexport class PackMarkdownDialog implements OnInit {\n\n  mdData: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { name: string, data: Pack }) {\n    this.generateMD(this.data.data);\n  }\n\n  ngOnInit() {\n  }\n\n  generateMD(pack: Pack) {\n    let markdown: string = '';\n    let title = `# ${pack.name}`;\n    let desc = pack.desc || '';\n\n    markdown += `${title}\\n${desc}\\n\\n`;\n\n    for (let item of pack.items) {\n      let itemtitle = `#### ${item.name}`;\n      markdown += `${itemtitle}\\n${item.meta}\\n___\\n${item.desc}\\n\\n`;\n    }\n    markdown = markdown.replace('\\n', '\\n  '); // markdown newlines\n\n    this.mdData = markdown;\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n}\n","<h2 mat-dialog-title>Markdown - {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <textarea matInput readonly [value]=\"mdData\" placeholder=\"Markdown\" rows=\"10\" #mdElem></textarea>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(mdElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Done</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Share {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <p>\n      Owner: {{(owner | async)?.username}}\n    </p>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n    <mat-form-field *ngIf=\"public\">\n      <input matInput readonly [value]=\"shareLink\" placeholder=\"View Link\" #shareLinkElem>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(shareLinkElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Editors\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <p>To add or remove an editor, run the command <kbd>!pack editor @user</kbd> in Discord!</p>\n      <mat-list *ngIf=\"editors?.length\">\n        <mat-list-item *ngFor=\"let editor of editors\">{{(editor | async)?.username}}</mat-list-item>\n      </mat-list>\n    </mat-expansion-panel>\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Export\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class=\"button-row\" *ngIf=\"loaded\">\n        <button mat-raised-button color=\"primary\" (click)=\"beginJSONExport()\">Export to JSON\n        </button>\n        <button mat-raised-button color=\"primary\" (click)=\"beginMDExport()\">Export to Homebrewery\n        </button>\n      </div>\n      <div *ngIf=\"!loaded\">\n        <mat-spinner [diameter]=\"24\"></mat-spinner>\n      </div>\n    </mat-expansion-panel>\n\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{public: public}\">\n    Done\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\nimport {DiscordUser} from '../../../../schemas/Discord';\nimport {Pack} from '../../../../schemas/homebrew/Items';\nimport {UserInfo} from '../../../../schemas/UserInfo';\nimport {JSONExportDialog} from '../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {DiscordService} from '../../../../shared/discord.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {PackMarkdownDialog} from '../pack-markdown-dialog/pack-markdown-dialog.component';\n\n@Component({\n  selector: 'avr-pack-share-dialog',\n  templateUrl: './pack-share-dialog.component.html',\n  styleUrls: ['./pack-share-dialog.component.css']\n})\nexport class PackShareDialog implements OnInit {\n\n  public: boolean;\n  shareLink: string;\n  loaded: boolean;\n\n  owner: Observable<DiscordUser>;\n  editors: Observable<DiscordUser>[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Pack, private dialog: MatDialog,\n              private hbService: HomebrewService, private discord: DiscordService) {\n    this.public = data.public;\n    this.shareLink = `https://avrae.io/homebrew/items/${data._id.$oid}`;\n    this.loaded = data.items !== undefined;\n  }\n\n  ngOnInit() {\n    this.owner = this.discord.getUser(this.data.owner);\n    this.loadEditors();\n    if (!this.loaded) {\n      this.loadItems();\n    }\n  }\n\n  loadItems() {\n    const id = this.data._id.$oid;\n    this.hbService.getPack(id)\n      .subscribe(pack => {\n        this.data = pack;\n        this.loaded = true;\n      });\n  }\n\n  loadEditors() {\n    const id = this.data._id.$oid;\n    this.hbService.getPackEditors(id)\n      .subscribe(editors => {\n        const out = [];\n        editors.forEach(eid => out.push(this.discord.getUser(eid)));\n        this.editors = out;\n      });\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.data.name, data: this.data.items},\n      width: '60%'\n    });\n  }\n\n  beginMDExport() {\n    this.dialog.open(PackMarkdownDialog, {\n      data: {name: this.data.name, data: this.data},\n      width: '60%'\n    });\n  }\n\n}\n","<mat-toolbar color=\"primary\" class=\"mat-elevation-z2\">\n  <span>Your Packs</span>\n  <span class=\"toolbar-spacer\"></span>\n  <span><button mat-icon-button (click)=\"beginNew()\">\n    <mat-icon aria-label=\"New Pack\">add</mat-icon>\n  </button></span>\n</mat-toolbar>\n\n<div class=\"container\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-around\" *ngIf=\"packs && packs.length\">\n  <div class=\"pack-tile\" *ngFor=\"let pack of packs\" fxFlex=\"32%\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>{{pack.name}}</mat-card-title>\n        <mat-card-subtitle>By {{owners.get(pack.owner)?.username || 'loading...'}} - {{pack.numItems}} items\n        </mat-card-subtitle>\n      </mat-card-header>\n      <img mat-card-image [src]=\"pack.image || '../../../../assets/img/pack.png'\" alt=\"Pack Image\">\n      <mat-card-content *ngIf=\"pack.desc\">\n        <p>\n          {{pack.desc}}\n        </p>\n      </mat-card-content>\n      <mat-card-actions>\n        <a mat-button routerLink=\"{{pack._id.$oid}}\">EDIT</a>\n        <button mat-button (click)=\"beginShare(pack)\">SHARE</button>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"packs && !packs.length\">\n  <mat-card>\n    <p>Looks like you don't have any packs yet.</p>\n    <button mat-raised-button color=\"accent\" (click)=\"beginNew()\">Create One</button>\n  </mat-card>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {DiscordUser} from '../../../schemas/Discord';\nimport {Pack} from '../../../schemas/homebrew/Items';\nimport {DiscordService} from '../../../shared/discord.service';\nimport {HomebrewService} from '../homebrew.service';\nimport {NewPackDialog} from './new-pack-dialog/new-pack-dialog.component';\nimport {PackShareDialog} from './pack-share-dialog/pack-share-dialog.component';\n\n@Component({\n  selector: 'avr-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css']\n})\nexport class ItemsComponent implements OnInit {\n\n  packs: Pack[];\n  owners: Map<string, DiscordUser> = new Map<string, DiscordUser>();\n\n  constructor(private homebrewService: HomebrewService, private discord: DiscordService,\n              private dialog: MatDialog, private router: Router, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.getPacks();\n  }\n\n  getPacks(): void {\n    this.homebrewService.getUserPacks()\n      .subscribe(packs => {\n        this.packs = packs;\n        const requested = new Set();\n        for (const pack of packs) {\n          if (!requested.has(pack.owner)) {\n            requested.add(pack.owner);\n            this.discord.getUser(pack.owner)\n              .subscribe(user => this.owners.set(pack.owner, user));\n          }\n        }\n      });\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewPackDialog, {\n      width: '60%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let data = {name: result.name, public: result.public, desc: result.desc, image: result.image};\n        this.new(data);\n      }\n    });\n  }\n\n  beginShare(pack: Pack) {\n    const dialogRef = this.dialog.open(PackShareDialog, {\n      data: pack,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        pack = Object.assign(pack, result);\n        this.commit(pack);\n      }\n    });\n  }\n\n  new(pack: { name: string, public: boolean, desc: string, image: string }) {\n    // HTTP POST /homebrew/items\n    this.homebrewService.newPack(pack)\n      .subscribe(result => {\n        if (result.success) {\n          this.router.navigate([result.packId], {relativeTo: this.route});\n        }\n      });\n  }\n\n  commit(pack: Pack) {\n    // HTTP PUT /homebrew/items/:pack\n    this.homebrewService.putPack(pack)\n      .subscribe(result => {\n        console.log(result);\n      });\n  }\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {Pack} from '../../../../schemas/homebrew/Items';\n\n@Component({\n  selector: 'avr-pack-delete-dialog',\n  templateUrl: './pack-delete-dialog.component.html',\n  styleUrls: ['./pack-delete-dialog.component.css']\n})\nexport class PackDeleteDialog implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Pack) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>{{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, image: image, desc: desc}\" [disabled]=\"!name\">\n    Save\n  </button>\n  <button mat-raised-button color=\"warn\" (click)=\"beginDelete()\" *ngIf=\"isOwner\">Delete</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Deleting {{data.name}}...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Are you sure you want to delete {{data.name}}? This will remove the pack from all editors' libraries, and\n    invalidate any sharing links. <b>This cannot be undone.</b>\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" color=\"warn\">\n    Delete\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {Pack} from '../../../../schemas/homebrew/Items';\nimport {PackDeleteDialog} from '../pack-delete-dialog/pack-delete-dialog.component';\nimport {getUser} from '../../../APIHelper';\n\n@Component({\n  selector: 'avr-pack-options-dialog',\n  templateUrl: './pack-options-dialog.component.html',\n  styleUrls: ['./pack-options-dialog.component.css']\n})\nexport class PackOptionsDialog implements OnInit {\n\n  name: string;\n  image: string;\n  desc: string;\n  isOwner: boolean;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Pack, private dialog: MatDialog,\n              private dialogRef: MatDialogRef<PackOptionsDialog>) {\n    this.name = data.name;\n    this.image = data.image;\n    this.desc = data.desc;\n    this.isOwner = getUser().id === data.owner;\n  }\n\n  ngOnInit() {\n  }\n\n  beginDelete() {\n    const dialogRef = this.dialog.open(PackDeleteDialog, {\n      data: this.data,\n      width: '40%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.dialogRef.close({delete: true});\n      }\n    });\n  }\n\n}\n","<mat-expansion-panel (opened)=\"opened.emit()\">\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      <div>\n        {{item.name}}\n      </div>\n    </mat-panel-title>\n    <mat-panel-description markdown [data]=\"item.meta.split('\\n')[0]\">\n    </mat-panel-description>\n  </mat-expansion-panel-header>\n  <ng-template matExpansionPanelContent>\n    <div class=\"form-container\">\n      <div fxLayout=\"row\" fxLayoutGap=\"4px\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Name\" (change)=\"emitChange()\" [(ngModel)]=\"item.name\">\n        </mat-form-field>\n        <mat-form-field fxFlex *ngIf=\"item.image != undefined\">\n          <input matInput placeholder=\"Image URL\" (change)=\"emitChange()\" [(ngModel)]=\"item.image\">\n        </mat-form-field>\n      </div>\n      <mat-form-field>\n        <textarea matInput placeholder=\"Meta\" rows=\"3\" (change)=\"emitChange()\" [(ngModel)]=\"item.meta\"></textarea>\n      </mat-form-field>\n      <mat-form-field>\n        <textarea matInput placeholder=\"Description\" rows=\"7\" (change)=\"emitChange()\" [(ngModel)]=\"item.desc\"></textarea>\n      </mat-form-field>\n    </div>\n    <div class=\"actions\" fxLayout=\"row\">\n      <span fxFlex *ngIf=\"item.image === undefined\">\n        <button mat-icon-button matTooltip=\"Add image\" (click)=\"item.image=''; emitChange()\">\n          <mat-icon aria-label=\"Add image\">add_photo_alternate</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Export to JSON\" (click)=\"beginJSONExport()\">\n          <mat-icon aria-label=\"Export to JSON\">vertical_align_top</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isFirst\">\n        <button mat-icon-button matTooltip=\"Move Up\" (click)=\"moveUp.emit()\">\n          <mat-icon aria-label=\"Move Up\">arrow_upward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isLast\">\n        <button mat-icon-button matTooltip=\"Move Down\" (click)=\"moveDown.emit()\">\n          <mat-icon aria-label=\"Move Down\">arrow_downward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex=\"grow\"></span>\n      <span fxFlex>\n        <button mat-icon-button color=\"warn\" (click)=\"delete.emit()\">\n          <mat-icon aria-label=\"Delete\">delete</mat-icon>\n        </button>\n      </span>\n    </div>\n  </ng-template>\n</mat-expansion-panel>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Item} from '../../../../../schemas/homebrew/Items';\nimport {JSONExportDialog} from '../../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\n\n@Component({\n  selector: 'avr-item-detail',\n  templateUrl: './item-detail.component.html',\n  styleUrls: ['./item-detail.component.css']\n})\nexport class ItemDetailComponent implements OnInit {\n\n  @Input() item: Item;\n  @Input() isFirst: boolean;\n  @Input() isLast: boolean;\n  @Output() moveUp = new EventEmitter();\n  @Output() moveDown = new EventEmitter();\n  @Output() changed = new EventEmitter();\n  @Output() opened = new EventEmitter();\n  @Output() delete = new EventEmitter();\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n  }\n\n  emitChange() {\n    this.changed.emit();\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.item.name, data: this.item},\n      width: '60%'\n    });\n  }\n\n}\n","<div *ngIf=\"pack && canEdit != undefined\">\n  <mat-toolbar color=\"primary\" class=\"pack-toolbar\">\n    <span>\n      <button mat-icon-button (click)=\"back()\">\n        <mat-icon aria-label=\"Back\">arrow_back</mat-icon>\n      </button>\n    </span>\n    <span>\n      {{pack.name}}\n    </span>\n    <span class=\"toolbar-spacer\"></span>\n    <span>\n      <button mat-icon-button (click)=\"commit()\">\n        <mat-icon aria-label=\"Save\">save</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginSettings()\">\n        <mat-icon aria-label=\"Settings\">settings</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginShare()\">\n        <mat-icon aria-label=\"Share\">launch</mat-icon>\n      </button>\n    </span>\n  </mat-toolbar>\n\n  <div class=\"container\" fxLayout=\"row\" fxLayoutGap=\"8px\">\n    <div class=\"item-list\" fxFlex=\"grow\" *ngIf=\"pack.items.length\">\n      <mat-accordion>\n        <avr-item-detail *ngFor=\"let item of pack.items; first as isFirst; last as isLast\" [item]=\"item\"\n                         [isFirst]=\"isFirst\" [isLast]=\"isLast\" (moveUp)=\"moveUp(item)\" (moveDown)=\"moveDown(item)\"\n                         (changed)=\"ensureChangesNotif()\" (opened)=\"selectedItem = item\"\n                         (delete)=\"deleteItem(item)\"></avr-item-detail>\n        <mat-card fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"new-item-card\">\n          <span class=\"no-text-cursor\">New...</span>\n          <span class=\"toolbar-spacer\"></span>\n          <span>\n            <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"beginNewFromJSON()\">\n              <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n            </button>\n            <button mat-icon-button matTooltip=\"Copy SRD item\" (click)=\"beginNewFromSRD()\">\n              <mat-icon aria-label=\"From existing item\">scanner</mat-icon>\n            </button>\n            <button mat-icon-button (click)=\"newLooseItem()\">\n              <mat-icon aria-label=\"New\">add</mat-icon>\n            </button>\n          </span>\n        </mat-card>\n      </mat-accordion>\n    </div>\n\n    <div class=\"item-list\" fxFlex=\"grow\" *ngIf=\"!pack.items.length\">\n      <mat-card>\n        <p>Looks like this pack is empty.</p>\n        <button mat-raised-button color=\"accent\" (click)=\"newLooseItem()\">Make an Item</button>\n        <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"beginNewFromJSON()\">\n          <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n        </button>\n        <button mat-icon-button matTooltip=\"Copy SRD item\" (click)=\"beginNewFromSRD()\">\n          <mat-icon aria-label=\"From existing item\">scanner</mat-icon>\n        </button>\n      </mat-card>\n    </div>\n\n    <div class=\"item-preview mat-typography mat-elevation-z3\" fxFlex=\"grow\">\n      <avr-discord-embed *ngIf=\"selectedItem\" [author]=\"{name: user.username, icon_url: user.avatarUrl}\"\n                         [title]=\"selectedItem.name\" [description]=\"selectedItem.meta\"\n                         [fields]=\"[{name: 'Description', value: selectedItem.desc}]\"\n                         [thumbnail]=\"selectedItem.image\"\n                         [footer]=\"{text: 'Homebrew content.', icon_url: '../../../../assets/img/homebrew.png'}\">\n      </avr-discord-embed>\n      <avr-discord-embed *ngIf=\"!selectedItem\" [author]=\"{name: user.username, icon_url: user.avatarUrl}\"\n                         title=\"No item selected.\" description=\"Click on an item on the left to see a preview!\"\n                         [footer]=\"{text: 'Homebrew content.', icon_url: '../../../../assets/img/homebrew.png'}\">\n      </avr-discord-embed>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"!pack\">\n  <div class=\"container\">\n    <mat-card>\n      <mat-spinner [diameter]=\"24\"></mat-spinner>\n    </mat-card>\n  </div>\n</div>\n\n<div *ngIf=\"pack && !canEdit\">\n  <div class=\"container\">\n    <mat-card>\n      <p>You do not have permission to edit this pack.</p>\n      <button mat-raised-button color=\"accent\" (click)=\"back()\">Go Back</button>\n    </mat-card>\n  </div>\n</div>\n","import {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Location} from '@angular/common';\nimport {Component, OnDestroy, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Item, Pack, REQUIRED_ITEM_PROPS} from '../../../../schemas/homebrew/Items';\nimport {UserInfo} from '../../../../schemas/UserInfo';\nimport {JSONImportDialog} from '../../../../shared/dialogs/json-import-dialog/json-import-dialog.component';\nimport {SRDCopyDialog} from '../../../../shared/dialogs/srd-copy-dialog/srd-copy-dialog.component';\nimport {getUser} from '../../../APIHelper';\nimport {DashboardService} from '../../../dashboard.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {PackOptionsDialog} from '../pack-options-dialog/pack-options-dialog.component';\nimport {PackShareDialog} from '../pack-share-dialog/pack-share-dialog.component';\n\n@Component({\n  selector: 'avr-pack-detail',\n  templateUrl: './pack-detail.component.html',\n  styleUrls: ['./pack-detail.component.scss']\n})\nexport class PackDetailComponent implements OnInit, OnDestroy {\n\n  pack: Pack;\n  user: UserInfo = getUser();\n  canEdit: boolean;\n  isOwner: boolean;\n  changesOpen = false;\n  selectedItem: Item;\n\n  constructor(private route: ActivatedRoute, private homebrewService: HomebrewService,\n              private dashboardService: DashboardService, private location: Location, private dialog: MatDialog,\n              private router: Router, private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.getPack();\n  }\n\n  ngOnDestroy() {\n    this.snackBar.dismiss();\n  }\n\n  getPack() {\n    const id = this.route.snapshot.paramMap.get('pack');\n    this.homebrewService.getPack(id)\n      .subscribe(pack => {\n        this.pack = pack;\n        this.calcCanEdit();\n      });\n  }\n\n  calcCanEdit() {\n    if (!this.pack || !this.user) {\n      return;\n    }\n    this.isOwner = this.user.id === this.pack.owner;\n    if (this.isOwner) {\n      this.canEdit = true;\n    } else {\n      const id = this.pack._id.$oid;\n      this.homebrewService.getPackEditors(id)\n        .subscribe(editors => this.canEdit = editors.some(e => e === this.user.id));\n    }\n  }\n\n  newLooseItem() {\n    this.pack.items.push(new Item());\n    this.ensureChangesNotif();\n  }\n\n  deleteItem(item: Item) {\n    this.pack.items = this.pack.items.filter(obj => obj !== item);\n    this.ensureChangesNotif();\n  }\n\n  ensureChangesNotif() {\n    if (!this.changesOpen) {\n      this.changesOpen = true;\n      let snackBarRef = this.snackBar.open('You have unsaved changes!', 'Save', {duration: -1, horizontalPosition: 'right'});\n\n      snackBarRef.onAction().subscribe(() => {\n        this.commit();\n      });\n    }\n  }\n\n  beginShare() {\n    const dialogRef = this.dialog.open(PackShareDialog, {\n      data: this.pack,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        this.pack = Object.assign(this.pack, result);\n        this.commit();\n      }\n    });\n  }\n\n  beginSettings() {\n    const dialogRef = this.dialog.open(PackOptionsDialog, {\n      data: this.pack,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        if (result.delete) {\n          this.delete();\n        } else {\n          this.pack = Object.assign(this.pack, result);\n          this.commit();\n        }\n      }\n    });\n  }\n\n  beginNewFromJSON() {\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {validator: (data) => this.validatePackJSON(dialogRef, data)}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        const item: Item | Item[] = result;\n        console.log(item);\n        if (item instanceof Array) {\n          this.pack.items.push(...item);\n        } else {\n          this.pack.items.push(item);\n        }\n        this.ensureChangesNotif();\n      }\n    });\n  }\n\n  // SRD import\n  beginNewFromSRD() {\n    const dialogRef = this.dialog.open(SRDCopyDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {getter: () => this.homebrewService.getTemplateItems(), namer: a => a.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.pack.items.push(result);\n        this.ensureChangesNotif();\n      }\n    });\n  }\n\n  // validation\n  packIsValid(parsed) {\n    if (parsed instanceof Array) {\n      return Boolean(parsed.length) && parsed.every(item => this.objectIsItem(item));\n    } else if (parsed) {\n      return this.objectIsItem(parsed);\n    }\n    return false;\n  }\n\n  validatePackJSON(dialogRef, parsed) {\n    dialogRef.componentInstance.loading = false;\n    if (this.packIsValid(parsed)) {\n      dialogRef.close(JSON.parse(dialogRef.componentInstance.data));\n    } else {\n      dialogRef.componentInstance.error = 'Invalid pack data';\n    }\n  }\n\n  objectIsItem(obj: any): obj is Item {\n    return REQUIRED_ITEM_PROPS.every(v => v in obj);\n  }\n\n  commit() {\n    // HTTP PUT /homebrew/items/:pack\n    this.homebrewService.putPack(this.pack)\n      .subscribe(result => {\n        console.log(result);\n        this.changesOpen = false;\n        this.snackBar.open(`${result} Use \"!pack ${this.pack.name}\" to activate the pack in Discord!`, null, {horizontalPosition: 'right'});\n      });\n  }\n\n  delete() {\n    // HTTP DELETE /homebrew/items/:pack\n    this.homebrewService.deletePack(this.pack)\n      .subscribe(result => {\n        console.log(result);\n        this.router.navigate(['../'], {relativeTo: this.route});\n      });\n  }\n\n  back() {\n    this.location.back();\n  }\n\n  // move items in list\n  moveUp(item: Item) {\n    const index = this.pack.items.indexOf(item);\n    const newIndex = index - 1;\n    if (newIndex > -1) {\n      moveItemInArray(this.pack.items, index, newIndex);\n      this.ensureChangesNotif();\n    }\n  }\n\n  moveDown(item: Item) {\n    const index = this.pack.items.indexOf(item);\n    const newIndex = index + 1;\n    if (newIndex < this.pack.items.length) {\n      moveItemInArray(this.pack.items, index, newIndex);\n      this.ensureChangesNotif();\n    }\n  }\n}\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'avr-new-pack-dialog',\n  templateUrl: './new-tome-dialog.component.html',\n  styleUrls: ['./new-tome-dialog.component.css']\n})\nexport class NewTomeDialog implements OnInit {\n\n  name: string;\n  public: boolean = false;\n  desc: string = '';\n  image: string = '';\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>New Tome...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n  <p class=\"mat-small\">\n    These settings can be changed at any time.\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close tabindex=\"1\">Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, public: public, image: image, desc: desc}\" [disabled]=\"!name\">\n    Create\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {parseComponents, parseLevel, parseSchool, Spell, Tome} from '../../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-tome-markdown-dialog',\n  templateUrl: './tome-markdown-dialog.component.html',\n  styleUrls: ['./tome-markdown-dialog.component.css'],\n  preserveWhitespaces: true\n})\nexport class TomeMarkdownDialog implements OnInit {\n\n  mdData: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { name: string, data: Tome }) {\n    this.generateMD(this.data.data);\n  }\n\n  ngOnInit() {\n  }\n\n  generateMD(tome: Tome) {\n    let markdown = '';\n    const title = `# ${tome.name}`;\n    const desc = tome.desc || '';\n\n    markdown += `${title}\\n${desc}\\n\\n`;\n\n    for (const spell of tome.spells) {\n      markdown += this.generateSpellMD(spell);\n    }\n    markdown = markdown.replace('\\n', '\\n  '); // markdown newlines\n\n    this.mdData = markdown;\n  }\n\n  generateSpellMD(spell: Spell) {\n    const title = `#### ${spell.name}`;\n    const schlev = spell.level ?\n      `${parseLevel(spell.level)} ${parseSchool(spell.school)}` :\n      `${parseSchool(spell.school)} ${parseLevel(spell.level)}`;\n\n    const meta = `- **Casting Time:** ${spell.casttime + (spell.ritual ? ' (ritual)' : '')}\n- **Range:** ${spell.range}\n- **Components:** ${parseComponents(spell)}\n- **Duration:** ${(spell.concentration ? 'Concentration, up to ' : '') + spell.duration}`;\n\n    let desc = spell.description;\n\n    if (spell.higherlevels) {\n      desc = `${desc}\\n\\n**At Higher Levels:** ${spell.higherlevels}`;\n    }\n\n    return `${title}\n*${schlev}*\n___\n${meta}\\n\n${desc}\\n\\n`;\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n}\n","<h2 mat-dialog-title>Share {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <p>\n      Owner: {{(owner | async)?.username}}\n    </p>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n    <mat-form-field *ngIf=\"public\">\n      <input matInput readonly [value]=\"shareLink\" placeholder=\"View Link\" #shareLinkElem>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(shareLinkElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Editors\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <p>To add or remove an editor, run the command <kbd>!tome editor @user</kbd> in Discord!</p>\n      <mat-list *ngIf=\"editors?.length\">\n        <mat-list-item *ngFor=\"let editor of editors\">{{(editor | async)?.username}}</mat-list-item>\n      </mat-list>\n    </mat-expansion-panel>\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Export\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class=\"button-row\" *ngIf=\"loaded\">\n        <button mat-raised-button color=\"primary\" (click)=\"beginJSONExport()\">Export to JSON\n        </button>\n        <button mat-raised-button color=\"primary\" (click)=\"beginMDExport()\">Export to Homebrewery\n        </button>\n      </div>\n      <div *ngIf=\"!loaded\">\n        <mat-spinner [diameter]=\"24\"></mat-spinner>\n      </div>\n    </mat-expansion-panel>\n\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{public: public}\">\n    Done\n  </button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Markdown - {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <textarea matInput readonly [value]=\"mdData\" placeholder=\"Markdown\" rows=\"10\" #mdElem></textarea>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(mdElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Done</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\nimport {DiscordUser} from '../../../../schemas/Discord';\nimport {Tome} from '../../../../schemas/homebrew/Spells';\nimport {JSONExportDialog} from '../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {DiscordService} from '../../../../shared/discord.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {TomeMarkdownDialog} from './tome-markdown-dialog/tome-markdown-dialog.component';\n\n@Component({\n  selector: 'avr-pack-share-dialog',\n  templateUrl: './tome-share-dialog.component.html',\n  styleUrls: ['./tome-share-dialog.component.css']\n})\nexport class TomeShareDialog implements OnInit {\n\n  public: boolean;\n  shareLink: string;\n  loaded: boolean;\n\n  owner: Observable<DiscordUser>;\n  editors: Observable<DiscordUser>[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Tome, private dialog: MatDialog,\n              private hbService: HomebrewService, private discord: DiscordService) {\n    this.public = data.public;\n    this.shareLink = `https://avrae.io/homebrew/spells/${data._id.$oid}`;\n    this.loaded = data.spells !== undefined;\n  }\n\n  ngOnInit() {\n    this.owner = this.discord.getUser(this.data.owner);\n    this.loadEditors();\n    if (!this.loaded) {\n      this.loadSpells();\n    }\n  }\n\n  loadEditors() {\n    const id = this.data._id.$oid;\n    this.hbService.getTomeEditors(id)\n      .subscribe(editors => {\n        const out = [];\n        editors.forEach(eid => out.push(this.discord.getUser(eid)));\n        this.editors = out;\n      });\n  }\n\n  loadSpells() {\n    const id = this.data._id.$oid;\n    this.hbService.getTome(id)\n      .subscribe(tome => {\n        this.data = tome;\n        this.loaded = true;\n      });\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.data.name, data: this.data.spells},\n      width: '60%'\n    });\n  }\n\n  beginMDExport() {\n    this.dialog.open(TomeMarkdownDialog, {\n      data: {name: this.data.name, data: this.data},\n      width: '60%'\n    });\n  }\n\n}\n","<mat-toolbar color=\"primary\" class=\"mat-elevation-z2\">\n  <span>Your Tomes</span>\n  <span class=\"toolbar-spacer\"></span>\n  <span><button mat-icon-button (click)=\"beginNew()\">\n    <mat-icon aria-label=\"New Tome\">add</mat-icon>\n  </button></span>\n</mat-toolbar>\n\n<div class=\"container\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-around\" *ngIf=\"tomes && tomes.length\">\n  <div class=\"tome-tile\" *ngFor=\"let tome of tomes\" fxFlex=\"32%\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>{{tome.name}}</mat-card-title>\n        <mat-card-subtitle>By {{owners.get(tome.owner)?.username || 'loading...'}} - {{tome.numSpells}} spells\n        </mat-card-subtitle>\n      </mat-card-header>\n      <img mat-card-image [src]=\"tome.image || '../../../../assets/img/tome.png'\" alt=\"Tome Image\">\n      <mat-card-content *ngIf=\"tome.desc\">\n        <p>\n          {{tome.desc}}\n        </p>\n      </mat-card-content>\n      <mat-card-actions>\n        <a mat-button routerLink=\"{{tome._id.$oid}}\">EDIT</a>\n        <button mat-button (click)=\"beginShare(tome)\">SHARE</button>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"tomes && !tomes.length\">\n  <mat-card>\n    <p>Looks like you don't have any tomes yet.</p>\n    <button mat-raised-button color=\"accent\" (click)=\"beginNew()\">Create One</button>\n  </mat-card>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {of} from 'rxjs';\nimport {DiscordUser} from '../../../schemas/Discord';\nimport {Tome} from '../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../schemas/UserInfo';\nimport {DiscordService} from '../../../shared/discord.service';\nimport {HomebrewService} from '../homebrew.service';\nimport {NewTomeDialog} from './dialogs/new-tome-dialog.component';\nimport {TomeShareDialog} from './dialogs/tome-share-dialog.component';\n\n@Component({\n  selector: 'avr-spells',\n  templateUrl: './spells.component.html',\n  styleUrls: ['./spells.component.css']\n})\nexport class SpellsComponent implements OnInit {\n\n  tomes: Tome[];\n  owners: Map<string, DiscordUser> = new Map<string, DiscordUser>();\n\n  constructor(private homebrewService: HomebrewService, private discord: DiscordService,\n              private dialog: MatDialog, private router: Router, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.getTomes();\n  }\n\n  getTomes(): void {\n    this.homebrewService.getUserTomes()\n      .subscribe(tomes => {\n        this.tomes = tomes;\n        const requested = new Set();\n        for (const tome of tomes) {\n          if (!requested.has(tome.owner)) {\n            requested.add(tome.owner);\n            this.discord.getUser(tome.owner)\n              .subscribe(user => this.owners.set(tome.owner, user));\n          }\n        }\n      });\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewTomeDialog, {\n      width: '60%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let data = {name: result.name, public: result.public, desc: result.desc, image: result.image};\n        this.new(data);\n      }\n    });\n  }\n\n  beginShare(tome: Tome) {\n    const dialogRef = this.dialog.open(TomeShareDialog, {\n      data: tome,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        tome = Object.assign(tome, result);\n        this.commit(tome);\n      }\n    });\n  }\n\n  new(tome: { name: string, public: boolean, desc: string, image: string }) {\n    // HTTP POST /homebrew/spells\n    this.homebrewService.newTome(tome)\n      .subscribe(result => {\n        if (result.success) {\n          this.router.navigate([result.tomeId], {relativeTo: this.route});\n        }\n      });\n  }\n\n  commit(tome: Tome) {\n    // HTTP PUT /homebrew/spells/:tome\n    this.homebrewService.putTome(tome)\n      .subscribe(result => {\n        console.log(result);\n      });\n  }\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {Tome} from '../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-tome-delete-dialog',\n  templateUrl: './tome-delete-dialog.component.html',\n})\nexport class TomeDeleteDialog implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Tome) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>{{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, image: image, desc: desc}\" [disabled]=\"!name\">\n    Save\n  </button>\n  <button mat-raised-button color=\"warn\" (click)=\"beginDelete()\" *ngIf=\"isOwner\">Delete</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Deleting {{data.name}}...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Are you sure you want to delete {{data.name}}? This will remove the tome from all editors' libraries, and\n    invalidate any sharing links. <b>This cannot be undone.</b>\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" color=\"warn\">\n    Delete\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {getUser} from '../../../APIHelper';\nimport {Tome} from '../../../../schemas/homebrew/Spells';\nimport {TomeDeleteDialog} from './tome-delete-dialog.component';\n\n@Component({\n  selector: 'avr-tome-options-dialog',\n  templateUrl: './tome-options-dialog.component.html',\n  styleUrls: ['./tome-options-dialog.component.css']\n})\nexport class TomeOptionsDialog implements OnInit {\n\n  name: string;\n  image: string;\n  desc: string;\n  isOwner: boolean;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Tome, private dialog: MatDialog,\n              private dialogRef: MatDialogRef<TomeOptionsDialog>) {\n    this.name = data.name;\n    this.image = data.image;\n    this.desc = data.desc;\n    this.isOwner = getUser().id === data.owner;\n  }\n\n  ngOnInit() {\n  }\n\n  beginDelete() {\n    const dialogRef = this.dialog.open(TomeDeleteDialog, {\n      data: this.data,\n      width: '40%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.dialogRef.close({delete: true});\n      }\n    });\n  }\n\n}\n","import {Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {parseLevel, parseSchool} from '../../../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-spell-panel-description',\n  template: `\n    <mat-panel-description>{{description}}</mat-panel-description>`\n})\nexport class SpellPanelDescriptionComponent implements OnInit, OnChanges {\n\n  @Input() level: number;\n  @Input() school: string;\n\n  description: string;\n\n  constructor() {\n  }\n\n\n  genDesc() {\n    this.description = this.level ?\n      `${parseLevel(this.level)} ${parseSchool(this.school)}` : `${parseSchool(this.school)} ${parseLevel(this.level)}`;\n  }\n\n  ngOnInit() {\n    this.genDesc();\n  }\n\n  ngOnChanges(changes) {\n    this.genDesc();\n  }\n\n}\n","<mat-expansion-panel (opened)=\"opened.emit()\">\n  <!-- PANEL HEADER -->\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      <div>\n        {{spell.name}}\n      </div>\n    </mat-panel-title>\n    <avr-spell-panel-description [level]=\"spell.level\" [school]=\"spell.school\"></avr-spell-panel-description>\n  </mat-expansion-panel-header>\n  <ng-template matExpansionPanelContent>\n    <div class=\"form-container\">\n      <!-- NAME AND IMAGE -->\n      <div fxLayout=\"row\" fxLayoutGap=\"4px\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Name\" (change)=\"emitChange()\" [(ngModel)]=\"spell.name\">\n        </mat-form-field>\n        <mat-form-field fxFlex *ngIf=\"spell.image != undefined\">\n          <input matInput placeholder=\"Image URL\" (change)=\"emitChange()\" [(ngModel)]=\"spell.image\">\n        </mat-form-field>\n      </div>\n\n      <!-- LEVEL, SCHOOL, RITUAL -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\" fxLayoutAlign=\"center center\">\n        <mat-form-field fxFlex>\n          <mat-label>Level</mat-label>\n          <mat-select [(value)]=\"spell.level\" (selectionChange)=\"emitChange()\">\n            <mat-option [value]=\"0\">Cantrip</mat-option>\n            <mat-option [value]=\"1\">1st Level</mat-option>\n            <mat-option [value]=\"2\">2nd Level</mat-option>\n            <mat-option [value]=\"3\">3rd Level</mat-option>\n            <mat-option [value]=\"4\">4th Level</mat-option>\n            <mat-option [value]=\"5\">5th Level</mat-option>\n            <mat-option [value]=\"6\">6th Level</mat-option>\n            <mat-option [value]=\"7\">7th Level</mat-option>\n            <mat-option [value]=\"8\">8th Level</mat-option>\n            <mat-option [value]=\"9\">9th Level</mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field fxFlex>\n          <mat-label>School</mat-label>\n          <mat-select [(value)]=\"spell.school\" (selectionChange)=\"emitChange()\" *ngIf=\"!customSpellSchool\">\n            <mat-option value=\"A\">Abjuration</mat-option>\n            <mat-option value=\"C\">Conjuration</mat-option>\n            <mat-option value=\"D\">Divination</mat-option>\n            <mat-option value=\"E\">Enchantment</mat-option>\n            <mat-option value=\"V\">Evocation</mat-option>\n            <mat-option value=\"I\">Illusion</mat-option>\n            <mat-option value=\"N\">Necromancy</mat-option>\n            <mat-option value=\"T\">Transmutation</mat-option>\n            <mat-option value=\"Custom\" (click)=\"customSpellSchool = true\">Custom</mat-option>\n          </mat-select>\n          <input matInput placeholder=\"School\" (change)=\"emitChange()\" [(ngModel)]=\"spell.school\"\n                 *ngIf=\"customSpellSchool\">\n          <button mat-icon-button matSuffix matTooltip=\"Delete custom school\" (click)=\"customSpellSchool = false\"\n                  *ngIf=\"customSpellSchool\">\n            <mat-icon>remove_circle_outline</mat-icon>\n          </button>\n        </mat-form-field>\n\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.ritual\" (change)=\"emitChange()\">Ritual</mat-checkbox>\n      </div>\n\n      <!-- TIME AND RANGE -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Casting Time\" (change)=\"emitChange()\" [(ngModel)]=\"spell.casttime\">\n        </mat-form-field>\n\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Range\" (change)=\"emitChange()\" [(ngModel)]=\"spell.range\">\n        </mat-form-field>\n      </div>\n\n      <!-- COMPONENTS -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\" fxLayoutAlign=\"center center\">\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.components.verbal\" (change)=\"emitChange()\">\n          Verbal\n        </mat-checkbox>\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.components.somatic\" (change)=\"emitChange()\">\n          Somatic\n        </mat-checkbox>\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Material\" (change)=\"emitChange()\" [(ngModel)]=\"spell.components.material\">\n        </mat-form-field>\n      </div>\n\n      <!-- DURATION AND CONC -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\" fxLayoutAlign=\"center center\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Duration\" (change)=\"emitChange()\" [(ngModel)]=\"spell.duration\">\n        </mat-form-field>\n\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.concentration\" (change)=\"emitChange()\">\n          Concentration\n        </mat-checkbox>\n      </div>\n\n      <!-- DESCRIPTION -->\n      <mat-form-field>\n        <textarea matInput placeholder=\"Description\" rows=\"7\" (change)=\"emitChange()\"\n                  [(ngModel)]=\"spell.description\"></textarea>\n      </mat-form-field>\n\n      <!-- HIGHER LEVELS -->\n      <mat-form-field>\n        <textarea matInput placeholder=\"At Higher Levels\" rows=\"3\" (change)=\"emitChange()\"\n                  [(ngModel)]=\"spell.higherlevels\"></textarea>\n      </mat-form-field>\n\n      <!-- CLASSES AND SUBCLASSES -->\n      <div fxLayout=\"row\" fxLayoutGap=\"6px\">\n        <mat-form-field fxFlex matTooltip=\"Separate classes with commas.\">\n          <input matInput placeholder=\"Classes\" (change)=\"emitChange()\" [(ngModel)]=\"spell.classes\">\n        </mat-form-field>\n\n        <mat-form-field fxFlex matTooltip=\"Separate subclasses with commas.\">\n          <input matInput placeholder=\"Subclasses\" (change)=\"emitChange()\" [(ngModel)]=\"spell.subclasses\">\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- ACTION BUTTONS -->\n    <div class=\"actions\" fxLayout=\"row\">\n      <span fxFlex *ngIf=\"spell.image === undefined\">\n        <button mat-icon-button matTooltip=\"Add image\" (click)=\"spell.image=''; emitChange()\">\n          <mat-icon aria-label=\"Add image\">add_photo_alternate</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Export to JSON\" (click)=\"beginJSONExport()\">\n          <mat-icon aria-label=\"Export to JSON\">vertical_align_top</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Edit Automation\" (click)=\"moveToEditor.emit()\">\n          <mat-icon aria-label=\"Edit Automation\">build</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isFirst\">\n        <button mat-icon-button matTooltip=\"Move Up\" (click)=\"moveUp.emit()\">\n          <mat-icon aria-label=\"Move Up\">arrow_upward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isLast\">\n        <button mat-icon-button matTooltip=\"Move Down\" (click)=\"moveDown.emit()\">\n          <mat-icon aria-label=\"Move Down\">arrow_downward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex=\"grow\"></span>\n      <span fxFlex>\n        <button mat-icon-button color=\"warn\" (click)=\"delete.emit()\">\n          <mat-icon aria-label=\"Delete\">delete</mat-icon>\n        </button>\n      </span>\n    </div>\n  </ng-template>\n</mat-expansion-panel>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Spell, SPELL_SCHOOLS} from '../../../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../../../schemas/UserInfo';\nimport {JSONExportDialog} from '../../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\n\n@Component({\n  selector: 'avr-spell-detail',\n  templateUrl: './spell-detail.component.html',\n  styleUrls: ['./spell-detail.component.css']\n})\nexport class SpellDetailComponent implements OnInit {\n\n  @Input() spell: Spell;\n  @Input() isFirst: boolean;\n  @Input() isLast: boolean;\n  @Output() moveUp = new EventEmitter();\n  @Output() moveDown = new EventEmitter();\n  @Output() changed = new EventEmitter();\n  @Output() opened = new EventEmitter();\n  @Output() delete = new EventEmitter();\n  @Output() moveToEditor = new EventEmitter();\n\n  customSpellSchool: boolean;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.customSpellSchool = !SPELL_SCHOOLS.includes(this.spell.school);\n  }\n\n  emitChange() {\n    this.changed.emit();\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.spell.name, data: this.spell},\n      width: '60%'\n    });\n  }\n\n}\n","<div class=\"container\" fxLayout=\"row\" fxLayoutGap=\"8px\">\n  <div class=\"spell-list\" fxFlex=\"grow\" *ngIf=\"tome.spells.length\">\n    <mat-accordion>\n      <avr-spell-detail *ngFor=\"let spell of tome.spells; first as isFirst; last as isLast\" [spell]=\"spell\"\n                        [isFirst]=\"isFirst\" [isLast]=\"isLast\" (moveUp)=\"moveUp(spell)\" (moveDown)=\"moveDown(spell)\"\n                        (changed)=\"changed.emit()\" (opened)=\"selectedSpell = spell; selected.emit(spell)\"\n                        (delete)=\"deleteSpell(spell)\" (moveToEditor)=\"moveToEditor.emit()\" ></avr-spell-detail>\n      <mat-card fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"new-spell-card\">\n        <span class=\"no-text-cursor\">New...</span>\n        <span class=\"toolbar-spacer\"></span>\n        <span>\n            <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"newFromJSON()\">\n              <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n            </button>\n            <button mat-icon-button matTooltip=\"Copy SRD spell\" (click)=\"newFromSRD()\">\n              <mat-icon aria-label=\"From existing spell\">scanner</mat-icon>\n            </button>\n            <button mat-icon-button (click)=\"newSpell()\">\n              <mat-icon aria-label=\"New\">add</mat-icon>\n            </button>\n          </span>\n      </mat-card>\n    </mat-accordion>\n  </div>\n\n  <div class=\"spell-list\" fxFlex=\"grow\" *ngIf=\"!tome.spells.length\">\n    <mat-card>\n      <p>Looks like this tome is empty.</p>\n      <button mat-raised-button color=\"accent\" (click)=\"newSpell()\">Make a Spell</button>\n      <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"newFromJSON()\">\n        <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n      </button>\n      <button mat-icon-button matTooltip=\"Copy SRD spell\" (click)=\"newFromSRD()\">\n        <mat-icon aria-label=\"From existing spell\">scanner</mat-icon>\n      </button>\n    </mat-card>\n  </div>\n\n  <div class=\"spell-preview mat-typography mat-elevation-z3\" fxFlex=\"grow\">\n    <avr-spell-embed [name]=\"selectedSpell?.name\" [image]=\"selectedSpell?.image\" [level]=\"selectedSpell?.level\"\n                     [school]=\"selectedSpell?.school\" [classes]=\"selectedSpell?.classes\"\n                     [subclasses]=\"selectedSpell?.subclasses\" [verbal]=\"selectedSpell?.components.verbal\"\n                     [somatic]=\"selectedSpell?.components.somatic\" [material]=\"selectedSpell?.components.material\"\n                     [time]=\"selectedSpell?.casttime\" [ritual]=\"selectedSpell?.ritual\" [range]=\"selectedSpell?.range\"\n                     [concentration]=\"selectedSpell?.concentration\" [duration]=\"selectedSpell?.duration\"\n                     [description]=\"selectedSpell?.description\" [higherlevels]=\"selectedSpell?.higherlevels\"\n                     [user]=\"user\"></avr-spell-embed>\n  </div>\n</div>\n","import {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {Spell, Tome} from '../../../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../../../schemas/UserInfo';\nimport {JSONImportDialog} from '../../../../../shared/dialogs/json-import-dialog/json-import-dialog.component';\nimport {SRDCopyDialog} from '../../../../../shared/dialogs/srd-copy-dialog/srd-copy-dialog.component';\nimport {HomebrewService} from '../../../homebrew.service';\n\n@Component({\n  selector: 'avr-spell-list',\n  templateUrl: './spell-list.component.html',\n  styleUrls: ['./spell-list.component.scss']\n})\nexport class SpellListComponent implements OnInit {\n\n  @Input() tome: Tome;\n  @Input() user: UserInfo;\n  @Output() selected = new EventEmitter();\n  @Output() changed = new EventEmitter();\n  @Output() moveToEditor = new EventEmitter();\n\n  selectedSpell: Spell;\n\n  constructor(private dialog: MatDialog, private hbService: HomebrewService) {\n  }\n\n  ngOnInit() {\n  }\n\n  newSpell() {\n    this.tome.spells.push(new Spell());\n    this.changed.emit();\n  }\n\n  newFromJSON() {\n\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {validator: (data) => this.validateSpellJSON(dialogRef, data)}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let spell: Spell | Spell[] = result;\n        console.log(spell);\n        if (spell instanceof Array) {\n          this.tome.spells.push(...spell);\n        } else {\n          this.tome.spells.push(spell);\n        }\n        this.changed.emit();\n      }\n    });\n  }\n\n  newFromSRD() {\n    const dialogRef = this.dialog.open(SRDCopyDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {getter: () => this.hbService.getTemplateSpells(), namer: a => a.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.tome.spells.push(result);\n        this.changed.emit();\n      }\n    });\n  }\n\n  deleteSpell(spell: Spell) {\n    this.tome.spells = this.tome.spells.filter(obj => obj !== spell);\n    this.changed.emit();\n  }\n\n  // spell import validation\n  validateSpellJSON(dialogRef: MatDialogRef<JSONImportDialog>, data) {\n    this.hbService.validateSpellJSON(data)\n      .subscribe(\n        result => this.onValidationReply(dialogRef, result)\n      );\n  }\n\n  onValidationReply(dialogRef: MatDialogRef<JSONImportDialog>, result) {\n    console.log(result);\n    dialogRef.componentInstance.loading = false;\n    if (result.success) {\n      dialogRef.close(JSON.parse(dialogRef.componentInstance.data));\n    } else {\n      dialogRef.componentInstance.error = result.result;\n    }\n  }\n\n\n  // move items in list\n  moveUp(spell: Spell) {\n    const index = this.tome.spells.indexOf(spell);\n    const newIndex = index - 1;\n    if (newIndex > -1) {\n      moveItemInArray(this.tome.spells, index, newIndex);\n      this.changed.emit();\n    }\n  }\n\n  moveDown(spell: Spell) {\n    const index = this.tome.spells.indexOf(spell);\n    const newIndex = index + 1;\n    if (newIndex < this.tome.spells.length) {\n      moveItemInArray(this.tome.spells, index, newIndex);\n      this.changed.emit();\n    }\n  }\n}\n","<div *ngIf=\"spell\" class=\"container\">\n  <mat-card>\n    <p>Editing {{spell.name}}...</p>\n    <p>You can find help on how to use the spell editor\n      <a target=\"_blank\" href=\"https://avrae.readthedocs.io/en/latest/automation_ref.html\">here</a>.</p>\n    <avr-automation-editor [automation]=\"getAutomation(spell)\" [spell]=\"spell\"\n                           (changed)=\"changed.emit()\"></avr-automation-editor>\n  </mat-card>\n</div>\n\n<div *ngIf=\"!spell\" class=\"container\">\n  <mat-card>\n    <p>\n      No spell selected.\n    </p>\n  </mat-card>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AutomationEffect} from '../../../../../schemas/homebrew/AutomationEffects';\nimport {Spell} from '../../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-spell-editor',\n  templateUrl: './spell-editor.component.html',\n  styleUrls: ['./spell-editor.component.css']\n})\nexport class SpellEditorComponent implements OnInit {\n\n  @Input() spell: Spell;\n  @Output() changed = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  getAutomation(spell: Spell): AutomationEffect[] {\n    if (spell.automation === null) {\n      spell.automation = [];\n    }\n    return spell.automation;\n  }\n\n\n}\n","<div *ngIf=\"tome && canEdit != undefined\">\n  <mat-toolbar color=\"primary\" class=\"tome-toolbar\">\n    <span>\n      <button mat-icon-button (click)=\"back()\">\n        <mat-icon aria-label=\"Back\">arrow_back</mat-icon>\n      </button>\n    </span>\n    <span>\n      {{tome.name}}\n    </span>\n    <span class=\"toolbar-spacer\"></span>\n    <span>\n      <button mat-icon-button (click)=\"commit()\">\n        <mat-icon aria-label=\"Save\">save</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginSettings()\">\n        <mat-icon aria-label=\"Settings\">settings</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginShare()\">\n        <mat-icon aria-label=\"Share\">launch</mat-icon>\n      </button>\n    </span>\n  </mat-toolbar>\n\n  <mat-tab-group backgroundColor=\"primary\" #tabGroup>\n    <mat-tab label=\"Spells\">\n      <avr-spell-list [tome]=\"tome\" [user]=\"user\" (selected)=\"selectedSpell = $event\"\n                      (changed)=\"ensureChangesNotif()\" (moveToEditor)=\"tabGroup.selectedIndex = 1\"></avr-spell-list>\n    </mat-tab>\n    <mat-tab label=\"Editor\">\n      <avr-spell-editor [spell]=\"selectedSpell\" (changed)=\"ensureChangesNotif()\"></avr-spell-editor>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n\n<div *ngIf=\"!tome\">\n  <div class=\"container\">\n    <mat-card>\n      <mat-spinner [diameter]=\"24\"></mat-spinner>\n    </mat-card>\n  </div>\n</div>\n\n<div *ngIf=\"tome && !canEdit\">\n  <div class=\"container\">\n    <mat-card>\n      <p>You do not have permission to edit this tome.</p>\n      <button mat-raised-button color=\"accent\" (click)=\"back()\">Go Back</button>\n    </mat-card>\n  </div>\n</div>\n","import {Location} from '@angular/common';\nimport {Component, OnDestroy, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {ActivatedRoute, Router} from '@angular/router';\n\nimport {Spell, Tome} from '../../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../../schemas/UserInfo';\nimport {getUser} from '../../../APIHelper';\nimport {DashboardService} from '../../../dashboard.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {TomeOptionsDialog} from '../dialogs/tome-options-dialog.component';\nimport {TomeShareDialog} from '../dialogs/tome-share-dialog.component';\n\n@Component({\n  selector: 'avr-tome-detail',\n  templateUrl: './tome-detail.component.html',\n  styleUrls: ['./tome-detail.component.scss']\n})\nexport class TomeDetailComponent implements OnInit, OnDestroy {\n\n  tome: Tome;\n  user: UserInfo = getUser();\n  canEdit: boolean;\n  isOwner: boolean;\n  changesOpen = false;\n  selectedSpell: Spell;\n\n  constructor(private route: ActivatedRoute, private homebrewService: HomebrewService,\n              private dashboardService: DashboardService, private location: Location, private dialog: MatDialog,\n              private router: Router, private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.getTome();\n  }\n\n  ngOnDestroy() {\n    this.snackBar.dismiss();\n  }\n\n  getTome() {\n    const id = this.route.snapshot.paramMap.get('tome');\n    this.homebrewService.getTome(id)\n      .subscribe(tome => {\n        this.tome = tome;\n        this.calcCanEdit();\n      });\n  }\n\n  calcCanEdit() {\n    if (!this.tome || !this.user) {\n      return;\n    }\n    this.isOwner = this.user.id === this.tome.owner;\n    if (this.isOwner) {\n      this.canEdit = true;\n    } else {\n      const id = this.tome._id.$oid;\n      this.homebrewService.getTomeEditors(id)\n        .subscribe(editors => this.canEdit = editors.some(e => e === this.user.id));\n    }\n  }\n\n  ensureChangesNotif() {\n    if (!this.changesOpen) {\n      this.changesOpen = true;\n      let snackBarRef = this.snackBar.open('You have unsaved changes!', 'Save', {duration: -1, horizontalPosition: 'right'});\n\n      snackBarRef.onAction().subscribe(() => {\n        this.commit();\n      });\n    }\n  }\n\n  beginShare() {\n    const dialogRef = this.dialog.open(TomeShareDialog, {\n      data: this.tome,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        this.tome = Object.assign(this.tome, result);\n        this.commit();\n      }\n    });\n  }\n\n  beginSettings() {\n    const dialogRef = this.dialog.open(TomeOptionsDialog, {\n      data: this.tome,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        if (result.delete) {\n          this.delete();\n        } else {\n          this.tome = Object.assign(this.tome, result);\n          this.commit();\n        }\n      }\n    });\n  }\n\n  commit() {\n    // HTTP PUT /homebrew/spells/:tome\n    this.homebrewService.putTome(this.tome)\n      .subscribe(result => {\n        console.log(result);\n        this.changesOpen = false;\n        this.snackBar.open(`${result} Use \"!tome ${this.tome.name}\" to activate the tome in Discord!`, null, {horizontalPosition: 'right'});\n      });\n  }\n\n  delete() {\n    // HTTP DELETE /homebrew/spells/:tome\n    this.homebrewService.deleteTome(this.tome)\n      .subscribe(result => {\n        console.log(result);\n        this.router.navigate(['../'], {relativeTo: this.route});\n      });\n  }\n\n  back() {\n    this.location.back();\n  }\n}\n\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {ItemsComponent} from './items/items.component';\nimport {PackDetailComponent} from './items/pack-detail/pack-detail.component';\nimport {SpellsComponent} from './spells/spells.component';\nimport {TomeDetailComponent} from './spells/tome-detail/tome-detail.component';\n\nconst routes: Routes = [\n  {\n    path: '', children: [\n      {path: 'items', component: ItemsComponent},\n      {path: 'items/:pack', component: PackDetailComponent},\n\n      {path: 'spells', component: SpellsComponent},\n      {path: 'spells/:tome', component: TomeDetailComponent},\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomebrewRoutingModule {\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule} from '@angular/forms';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {MaterialModule} from '../../material/material.module';\nimport {AutomationEditorModule} from '../../shared/automation-editor/automation-editor.module';\nimport {DiscordEmbedModule} from '../../shared/discord-embed/discord-embed.module';\nimport {SpellEmbedModule} from '../../shared/spell-embed/spell-embed.module';\n\nimport {HomebrewRoutingModule} from './homebrew-routing.module';\nimport {ItemsComponent} from './items/items.component';\nimport {NewPackDialog} from './items/new-pack-dialog/new-pack-dialog.component';\nimport {PackDeleteDialog} from './items/pack-delete-dialog/pack-delete-dialog.component';\nimport {ItemDetailComponent} from './items/pack-detail/item-detail/item-detail.component';\nimport {PackDetailComponent} from './items/pack-detail/pack-detail.component';\nimport {PackMarkdownDialog} from './items/pack-markdown-dialog/pack-markdown-dialog.component';\nimport {PackOptionsDialog} from './items/pack-options-dialog/pack-options-dialog.component';\nimport {PackShareDialog} from './items/pack-share-dialog/pack-share-dialog.component';\nimport {NewTomeDialog} from './spells/dialogs/new-tome-dialog.component';\nimport {TomeDeleteDialog} from './spells/dialogs/tome-delete-dialog.component';\nimport {TomeMarkdownDialog} from './spells/dialogs/tome-markdown-dialog/tome-markdown-dialog.component';\nimport {TomeOptionsDialog} from './spells/dialogs/tome-options-dialog.component';\nimport {TomeShareDialog} from './spells/dialogs/tome-share-dialog.component';\nimport {SpellsComponent} from './spells/spells.component';\nimport {SpellDetailComponent} from './spells/tome-detail/spell-detail/spell-detail.component';\nimport {SpellPanelDescriptionComponent} from './spells/tome-detail/spell-detail/spell-panel-description/spell-panel-description.component';\nimport {SpellEditorComponent} from './spells/tome-detail/spell-editor/spell-editor.component';\nimport {SpellListComponent} from './spells/tome-detail/spell-list/spell-list.component';\nimport {TomeDetailComponent} from './spells/tome-detail/tome-detail.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    FlexLayoutModule,\n    MarkdownModule.forChild(),\n    DiscordEmbedModule,\n    AutomationEditorModule,\n    SpellEmbedModule,\n    HomebrewRoutingModule,\n  ],\n  declarations: [\n    ItemsComponent,\n    PackDetailComponent,\n    NewPackDialog,\n    PackOptionsDialog,\n    PackShareDialog,\n    PackDeleteDialog,\n    ItemDetailComponent,\n    PackMarkdownDialog,\n\n    SpellsComponent,\n    NewTomeDialog,\n    TomeShareDialog,\n    TomeDetailComponent,\n    SpellDetailComponent,\n    SpellListComponent,\n    TomeOptionsDialog,\n    TomeDeleteDialog,\n    SpellPanelDescriptionComponent,\n    SpellEditorComponent,\n    TomeMarkdownDialog,\n  ]\n})\nexport class HomebrewModule {\n}\n"]}