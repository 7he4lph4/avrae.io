{"version":3,"mappings":"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","names":["i","constructor","f","ngOnInit","p","m","selectors","t","toggle","e","a","o","super","this","router","navigate","logout","U","l","r","name","automation","_v","proper","verb","addAndSelectNewAttack","beginYAMLImport","newFromSRD","ngOnDestroy","snackBar","dismiss","loadAttacks","charService","getCharacterAttacks","character","upstream","subscribe","allAttacks","ft","push","selectedAttack","dialog","open","Zt","width","disableClose","data","getter","getTemplateAttacks","namer","afterClosed","deleteAttack","indexOf","splice","doSave","saveButtonValue","saveAndExitButtonValue","saveButtonDisabled","putCharacterAttacks","pipe","ht","error","openFromComponent","mt","html","horizontalPosition","duration","errorValue","save","saveAndExit","dialogRef","close","beginYAMLExport","vt","Array","yaml","Ct","validator","validateAttackJSON","componentInstance","loading","success","G","_","beginEditAttacks","getUserInfo","getUserStats","getCharacters","onResize","userInfo","Z","userStats","dashboardService","characters","getCharacterMeta","getInitials","match","shift","pop","toUpperCase","getImage","overrides","image","getDescription","desc","description","getUpstreamURL","startsWith","slice","import_version","MIN_CHARACTER_AUTOMATION_VERSION","panelClass","console","log","window","innerWidth","numCols","$","N","L","ct","it","lt","st","getAliases","http","get","updateAlias","post","handleTextError","deleteAlias","delete","getSnippets","updateSnippet","deleteSnippet","getUvars","updateUvar","deleteUvar","q","factory","beginEdit","confirmDelete","beginNew","refresh","custService","showName","type","value","commands","includes","content","ot","z","snippet","length","j","W","getCustomizations","customizations","K","S","getAllGvars","getGvars","newGvar","getGvar","w","H","updateGvar","key","deleteGvar","P","sortedGvars","sort","localeCompare","gvarService","owned","new","V","checkForLookupQuery","lookupGvar","trim","URLSearchParams","location","search","set","pathname","toString","history","pushState","activeGvar","route","snapshot","queryParamMap","X","gvars","forcedTabIndex","tt","canActivate","platformId","navigateByUrl","url","Je","u","canActivateChild","J","Ie","path","component","children","loadChildren","c","then","n","HomebrewModule","Promise","WorkshopModule","redirectTo","pathMatch","I","R","x","d","k","O","v","b","Y","put","A","oxw","select","filterTemplates","h","g","getTemplates","filteredTemplates","templates","filter","toLowerCase","D"],"sources":["./src/app/dashboard/confirm-delete-dialog/confirm-delete-dialog.component.html","./src/app/dashboard/confirm-delete-dialog/confirm-delete-dialog.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/dashboard/dashboard.component.ts","./src/app/schemas/Character.ts","./src/app/dashboard/characters/attack-editor-dialog/attack-editor-dialog.component.html","./src/app/dashboard/characters/attack-editor-dialog/attack-editor-dialog.component.ts","./src/app/dashboard/characters/characters.component.html","./src/app/dashboard/characters/characters.component.ts","./src/app/dashboard/edit-dialog/edit-dialog.component.ts","./src/app/dashboard/new-dialog/new-dialog.component.html","./src/app/dashboard/edit-dialog/edit-dialog.component.html","./src/app/dashboard/new-dialog/new-dialog.component.ts","./src/app/dashboard/customization/customization.service.ts","./src/app/dashboard/customization/alias-list/alias-list.component.html","./src/app/dashboard/customization/alias-list/alias-list.component.ts","./src/app/dashboard/customization/snippet-list/snippet-list.component.html","./src/app/dashboard/customization/snippet-list/snippet-list.component.ts","./src/app/dashboard/customization/uvar-list/uvar-list.component.html","./src/app/dashboard/customization/uvar-list/uvar-list.component.ts","./src/app/dashboard/customization/customization.component.ts","./src/app/dashboard/customization/customization.component.html","./src/app/dashboard/gvars/gvar.service.ts","./src/app/dashboard/gvars/gvar-list/gvar-list.component.html","./src/app/dashboard/gvars/gvar-list/gvar-list.component.ts","./src/app/dashboard/gvars/gvar-lookup/gvar-lookup.component.html","./src/app/dashboard/gvars/gvar-lookup/gvar-lookup.component.ts","./src/app/dashboard/gvars/gvars.component.ts","./src/app/dashboard/gvars/gvars.component.html","./src/app/auth.guard.ts","./src/app/dashboard/dashboard-routing.module.ts","./src/app/dashboard/dashboard.module.ts","./src/app/dashboard/dashboard.service.ts","./src/app/shared/dialogs/srd-copy-dialog/srd-copy-dialog.component.html","./src/app/shared/dialogs/srd-copy-dialog/srd-copy-dialog.component.ts","./src/app/shared/validation-snackbar/validation-snackbar.component.ts","./src/app/shared/validation-snackbar/validation-snackbar.component.html"],"sourcesContent":["<h2 mat-dialog-title>Deleting {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Are you sure you want to delete {{data.name}}?\n  </p>\n  <p *ngIf=\"data.message\">\n    {{data.message}}\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>No</button>\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Yes</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\ninterface ConfirmDeleteDialogData {\n  name: string;\n  message?: string;\n}\n\n@Component({\n  selector: 'avr-confirm-delete-dialog',\n  templateUrl: './confirm-delete-dialog.component.html',\n  styleUrls: ['./confirm-delete-dialog.component.css']\n})\nexport class ConfirmDeleteDialog implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ConfirmDeleteDialogData) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<!-- Side Menu Floating Button -->\n<button mat-icon-button\n        *ngIf=\"(small || mobile) && !sidenav.opened\"\n        (click)=\"sidenav.toggle()\"\n        class=\"small-menu-button mat-fab\"\n        color=\"accent\">\n  <mat-icon>double_arrow</mat-icon>\n</button>\n\n<mat-sidenav-container class=\"sidenav-container\"\n                       [ngClass]=\"{'side-menu-open': !sidenav.opened}\">\n\n  <mat-sidenav\n    #sidenav\n    [(opened)]=\"medium\"\n    [mode]=\"small || mobile ? 'over' : 'side'\"\n    class=\"sidenav mat-elevation-z3\"\n    fixedTopGap=\"56px\">\n    <mat-nav-list>\n      <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" [routerLink]=\"['characters']\">Characters</a>\n\n      <mat-expansion-panel expanded class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title class=\"nav-panel\">\n            Alias Workshop\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"nav-panel-body\">\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/workshop\">Explore</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/workshop/my-subscriptions\">My Subscriptions</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/workshop/my-work\">My Work</a>\n        </div>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel expanded class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title class=\"nav-panel\">\n            Customization\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"nav-panel-body\">\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" [routerLink]=\"['aliases']\">My Customizations</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" [routerLink]=\"['gvars']\">Global Variables</a>\n        </div>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel expanded class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title class=\"nav-panel\">\n            Homebrew\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"nav-panel-body\">\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/homebrew/items\">Items</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/homebrew/spells\">Spells</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" href=\"https://critterdb.com/#/index\" target=\"_blank\" rel=\"noopener noreferrer\">Creatures\n            <mat-icon class=\"icon-in-panel\">launch</mat-icon>\n          </a>\n        </div>\n      </mat-expansion-panel>\n\n      <div class=\"spacer\"></div>\n      <a mat-list-item (click)=\"logout()\">Logout</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <!-- Add Content Here -->\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import {BreakpointObserver} from '@angular/cdk/layout';\nimport {Component} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {isLoggedIn, removeToken} from '../SecurityHelper';\nimport {BreakpointBaseComponent} from '../shared/breakpoints';\nimport {DashboardService} from './dashboard.service';\n\n@Component({\n  selector: 'avr-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent extends BreakpointBaseComponent {\n\n  constructor(private router: Router, private dashboardService: DashboardService, private bp: BreakpointObserver) {\n    super(bp);\n    if (!isLoggedIn()) {\n      this.router.navigate(['login']);\n    }\n  }\n\n  logout() {\n    removeToken();\n    this.router.navigate(['']);\n  }\n}\n","import {AutomationEffect} from './homebrew/AutomationEffects';\n\nexport class Character {\n  owner: string;\n  active: boolean;\n  upstream: string;\n  type: string;\n  version: number;\n  stats: Stats;\n  levels: Map<string, number>;\n  hp: number;\n  armor: number;\n  attacks: Attack[];\n  skills: Skills;\n  resist: string[];\n  immune: string[];\n  vuln: string[];\n  saves: Saves;\n  stat_cvars?: Map<string, any>;\n  skill_effects?: Map<string, string>;\n  consumables?: Consumables;\n  spellbook?: Spellbook;\n  live?: boolean;\n}\n\nexport class CharacterMeta {\n  upstream: string;\n  active: boolean;\n  name: string;\n  description: string;\n  image: string;\n  levels: { total_level: number, classes: Map<string, number> };\n  import_version: number;\n  overrides: { desc: string, image: string, attacks: Array<any>, spells: Array<any> };\n}\n\nexport class Stats {\n  name: string;\n  image: string;\n  description: string;\n  strength: number;\n  dexterity: number;\n  constitution: number;\n  intelligence: number;\n  wisdom: number;\n  charisma: number;\n  strengthMod: number;\n  dexterityMod: number;\n  constitutionMod: number;\n  intelligenceMod: number;\n  wisdomMod: number;\n  charismaMod: number;\n  proficiencyBonus: number;\n}\n\nexport class Attack {\n  name: string;\n  automation: AutomationEffect[];\n  _v: 2;\n  proper?: boolean;\n  verb?: string;\n  phrase?: string;\n  thumb?: string;\n  criton?: number;\n  extra_crit_damage?: string;\n\n  constructor(name = '', automation: AutomationEffect[] = [], proper: boolean = false, verb: string = null) {\n    this.name = name;\n    this.automation = automation;\n    this._v = 2;\n    this.proper = proper;\n    this.verb = verb;\n  }\n}\n\nexport class Skills {\n  acrobatics: number;\n  animalHandling: number;\n  arcana: number;\n  athletics: number;\n  deception: number;\n  history: number;\n  initiative: number;\n  insight: number;\n  intimidation: number;\n  investigation: number;\n  medicine: number;\n  nature: number;\n  perception: number;\n  performance: number;\n  persuasion: number;\n  religion: number;\n  sleightOfHand: number;\n  stealth: number;\n  survival: number;\n  strengthSave: number;\n  dexteritySave: number;\n  constitutionSave: number;\n  intelligenceSave: number;\n  wisdomSave: number;\n  charismaSave: number;\n  strength: number;\n  dexterity: number;\n  constitution: number;\n  intelligence: number;\n  wisdom: number;\n  charisma: number;\n}\n\nexport class Saves {\n  strengthSave: number;\n  dexteritySave: number;\n  constitutionSave: number;\n  intelligenceSave: number;\n  wisdomSave: number;\n  charismaSave: number;\n}\n\nexport class Consumables {\n  custom?: Map<string, Counter>;\n  hp?: Counter;\n  deathsaves?: DeathSaves;\n  spellslots?: SpellSlotsConsumable;\n}\n\nexport class Counter {\n  value: number;\n  reset?: string;\n  max?: number;\n  min?: number;\n  live?: string;\n  type?: string;\n}\n\nexport class DeathSaves {\n  fail: Counter;\n  success: Counter;\n}\n\nexport class SpellSlotsConsumable {\n  '1': Counter;\n  '2': Counter;\n  '3': Counter;\n  '4': Counter;\n  '5': Counter;\n  '6': Counter;\n  '7': Counter;\n  '8': Counter;\n  '9': Counter;\n}\n\nexport class Spellbook {\n  spellslots: SpellSlots;\n  spells: string[];\n  dc: number;\n  attackBonus: number;\n  dicecloud_id?: string;\n}\n\nexport class SpellSlots {\n  '1': number;\n  '2': number;\n  '3': number;\n  '4': number;\n  '5': number;\n  '6': number;\n  '7': number;\n  '8': number;\n  '9': number;\n}\n","<h2 mat-dialog-title>Editing Attacks: {{character.name}}</h2>\n\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"allAttacks\">\n  <div>\n    <p>\n      Need help using the editor? Check out the docs\n      <a href=\"https://avrae.readthedocs.io/en/stable/automation_ref.html\" target=\"_blank\"\n         rel=\"noopener noreferrer\">here</a>!\n    </p>\n  </div>\n\n  <div fxLayout=\"row\" class=\"auto-row\">\n    <mat-form-field>\n      <mat-label>Select an attack</mat-label>\n      <mat-select [(value)]=\"selectedAttack\">\n        <mat-option *ngFor=\"let attack of allAttacks\" [value]=\"attack\">\n          {{attack.name}}\n        </mat-option>\n        <mat-option (click)=\"addAndSelectNewAttack()\">New...</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Import YAML\" (click)=\"beginYAMLImport()\">\n          <mat-icon aria-label=\"Import from YAML\">vertical_align_bottom</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Copy SRD Monster Action\" (click)=\"newFromSRD()\">\n          <mat-icon aria-label=\"Copy SRD Monster Action\">scanner</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Export All to YAML\" (click)=\"beginYAMLExport(allAttacks)\">\n          <mat-icon aria-label=\"Export All to YAML\">vertical_align_top</mat-icon>\n        </button>\n      </span>\n    </span>\n    <span fxFlex=\"grow\"></span>\n  </div>\n\n  <mat-divider class=\"beefy-divider\"></mat-divider>\n\n  <p *ngIf=\"!selectedAttack\">Please select an attack.</p>\n\n  <div *ngIf=\"selectedAttack\">\n    <!-- name, delete, export -->\n    <div fxLayout=\"row\" fxLayoutGap=\"4px\" class=\"auto-row\">\n      <mat-form-field fxFlex=\"grow\">\n        <input matInput placeholder=\"Attack Name\" [(ngModel)]=\"selectedAttack.name\">\n      </mat-form-field>\n      <span>\n        <span fxFlex>\n          <button mat-icon-button color=\"warn\" (click)=\"deleteAttack(selectedAttack)\">\n            <mat-icon>delete</mat-icon>\n          </button>\n        </span>\n        <span fxFlex>\n          <button mat-icon-button matTooltip=\"Export to YAML\" (click)=\"beginYAMLExport(selectedAttack)\">\n            <mat-icon aria-label=\"Export to YAML\">vertical_align_top</mat-icon>\n          </button>\n        </span>\n      </span>\n    </div>\n\n    <span (click)=\"showAdvancedOptions = !showAdvancedOptions\" class=\"toggle-advanced-options\">\n      Advanced Options\n      <mat-icon>\n        {{showAdvancedOptions ? 'expand_less' : 'expand_more'}}\n      </mat-icon>\n    </span>\n\n    <div class=\"advanced-options\" *ngIf=\"showAdvancedOptions\">\n      <!-- display options -->\n      <mat-divider class=\"beefy-divider\"></mat-divider>\n      <h3>\n        Display Options\n      </h3>\n      <div class=\"display-options-container\">\n      <span>\n        Display: {{character.name}}\n        <mat-form-field>\n          <input matInput placeholder=\"attacks with\" [(ngModel)]=\"selectedAttack.verb\">\n        </mat-form-field>\n        {{selectedAttack.proper ? selectedAttack.name : 'a ' + selectedAttack.name}}!\n      </span>\n\n        <mat-checkbox [(ngModel)]=\"selectedAttack.proper\">Proper Noun</mat-checkbox>\n\n        <mat-form-field>\n          <input matInput placeholder=\"Thumbnail URL\" [(ngModel)]=\"selectedAttack.thumb\"\n                 matTooltip=\"The URL of an image that will display each time this attack is used.\">\n        </mat-form-field>\n\n        <mat-form-field>\n          <input matInput placeholder=\"Flavor Text\" [(ngModel)]=\"selectedAttack.phrase\"\n                 matTooltip=\"Some text that will display each time this attack is used.\">\n        </mat-form-field>\n      </div>\n\n      <!-- crit options -->\n      <mat-divider class=\"beefy-divider\"></mat-divider>\n      <h3>\n        Critical Hit Options\n      </h3>\n      <div class=\"crit-options-container auto-row\">\n        <mat-form-field>\n          <input matInput placeholder=\"Criton\" [(ngModel)]=\"selectedAttack.criton\" type=\"number\" min=\"1\" max=\"20\"\n                 matTooltip=\"The natural roll this attack will crit on.\">\n        </mat-form-field>\n\n        <mat-form-field>\n          <input matInput placeholder=\"Extra Crit Damage\" [(ngModel)]=\"selectedAttack.extra_crit_damage\"\n                 matTooltip=\"How much extra damage this attack does on a crit, beyond doubling dice.\">\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- automation editor -->\n    <mat-divider class=\"beefy-divider\"></mat-divider>\n    <h3>\n      Automation\n    </h3>\n    <avr-automation-editor [automation]=\"selectedAttack.automation\"></avr-automation-editor>\n  </div>\n\n  <p *ngIf=\"errorValue\" class=\"error-text\">\n    {{errorValue}}\n  </p>\n</mat-dialog-content>\n\n<!-- Loading Spinner -->\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"!allAttacks\">\n  <mat-spinner [diameter]=\"24\"></mat-spinner>\n  <p>\n    Loading attacks...\n  </p>\n</mat-dialog-content>\n\n<!-- Buttons -->\n<mat-dialog-actions>\n  <button mat-flat-button mat-dialog-close color=\"warn\">Cancel</button>\n  <span>\n    <button mat-flat-button (click)=\"save()\" [disabled]=\"saveButtonDisabled\"\n            color=\"primary\">{{saveButtonValue}}</button>\n    <button mat-flat-button (click)=\"saveAndExit()\" [disabled]=\"saveButtonDisabled\"\n            color=\"primary\">{{saveAndExitButtonValue}}</button>\n  </span>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Attack, CharacterMeta} from '../../../schemas/Character';\nimport {JSONExportDialog} from '../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {JSONImportDialog} from '../../../shared/dialogs/json-import-dialog/json-import-dialog.component';\nimport {SRDCopyDialog} from '../../../shared/dialogs/srd-copy-dialog/srd-copy-dialog.component';\nimport {ValidationSnackbar} from '../../../shared/validation-snackbar/validation-snackbar.component';\nimport {ApiResponse} from '../../APIHelper';\nimport {DashboardService} from '../../dashboard.service';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'avr-attack-editor-dialog',\n  templateUrl: './attack-editor-dialog.component.html',\n  styleUrls: ['./attack-editor-dialog.component.scss']\n})\nexport class AttackEditorDialog implements OnInit {\n\n  selectedAttack: Attack;\n  allAttacks: Attack[];\n\n  saveButtonValue = 'Save';\n  saveAndExitButtonValue = 'Save and Exit';\n  saveButtonDisabled = false;\n  errorValue: string;\n  showAdvancedOptions = false;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public character: CharacterMeta, private charService: DashboardService,\n              private dialogRef: MatDialogRef<AttackEditorDialog>, private dialog: MatDialog, private snackBar: MatSnackBar) {\n  }\n\n\n  ngOnDestroy() {\n    this.snackBar.dismiss();\n  }\n\n  ngOnInit() {\n    this.loadAttacks();\n  }\n\n  loadAttacks() {\n    this.charService.getCharacterAttacks(this.character.upstream)\n      .subscribe(result => {\n        this.allAttacks = result;\n      });\n  }\n\n  addAndSelectNewAttack() {\n    const atk = new Attack();\n    this.allAttacks.push(atk);\n    this.selectedAttack = atk;\n  }\n\n  newFromSRD() {\n    const dialogRef = this.dialog.open(SRDCopyDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {getter: () => this.charService.getTemplateAttacks(), namer: a => a.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.allAttacks.push(result);\n        this.selectedAttack = result;\n      }\n    });\n  }\n\n  deleteAttack(attack: Attack) {\n    const index = this.allAttacks.indexOf(attack);\n    if (index > -1) {\n      this.allAttacks.splice(index, 1);\n    }\n    this.selectedAttack = null;\n  }\n\n  doSave(): Observable<ApiResponse<string>> {\n    this.saveButtonValue = `Saving...`;\n    this.saveAndExitButtonValue = `Saving...`;\n    this.saveButtonDisabled = true;\n\n    return this.charService.putCharacterAttacks(this.character.upstream, this.allAttacks)\n      .pipe(map(result => {\n        this.saveButtonValue = 'Save';\n        this.saveAndExitButtonValue = 'Save and Exit';\n        this.saveButtonDisabled = false;\n\n        if (!result || result.error) {\n          this.snackBar.openFromComponent(ValidationSnackbar, {\n            data: {\n              html: `${result.error}`\n            },\n            horizontalPosition: 'right',\n            duration: -1\n          });\n        } else {\n          this.errorValue = null;\n        }\n        return result;\n      }));\n  }\n\n  save() {\n    this.doSave().subscribe();\n  }\n\n  saveAndExit() {\n    this.doSave()\n      .subscribe(result => {\n        if (result && !result.error) {\n          // successful PUT, exit\n          this.dialogRef.close();\n        }\n      });\n  }\n\n  // YAML\n  beginYAMLExport(attack: Attack | Attack[]) {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: (attack instanceof Array) ? 'All Attacks' : attack.name, data: attack, yaml: true},\n      width: '60%'\n    });\n  }\n\n  beginYAMLImport() {\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {validator: (data) => this.validateAttackJSON(dialogRef, data), yaml: true}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        const attack: Attack | Attack[] = result;\n        if (attack instanceof Array) {\n          this.allAttacks.push(...attack);\n        } else {\n          this.allAttacks.push(attack);\n        }\n      }\n    });\n  }\n\n  validateAttackJSON(dialogRef: MatDialogRef<JSONImportDialog>, data) {\n    this.charService.validateAttackJSON(data)\n      .subscribe(\n        result => {\n          dialogRef.componentInstance.loading = false;\n          if (result.success) {\n            dialogRef.close(data);\n          } else {\n            this.snackBar.openFromComponent(ValidationSnackbar, {\n              data: {\n                html: `${result.error}`\n              },\n              horizontalPosition: 'right',\n              duration: -1\n            });\n          }\n        }\n      );\n  }\n}\n","<div class=\"characterList\">\n  <mat-card class=\"user-card\" *ngIf=\"(userInfo | async)\">\n    <mat-grid-list cols=\"4\" rowHeight=\"{{ !mobile ? '1:1' : '1:2' }}\">\n      <mat-grid-tile colspan=\"{{ !mobile ? 1 : 4 }}\" >\n        <img alt=\"avatar\" [src]=\"(userInfo | async)?.avatarUrl\" class=\"avatarImg mat-elevation-z1\">\n      </mat-grid-tile>\n      <mat-grid-tile colspan=\"{{ !mobile ? 3 : 4 }}\" class=\"user-stats\">\n        <div>\n          <h1 class=\"mat-display-2 smallmargin\">\n            {{(userInfo | async)?.username}}<span class=\"mat-small\">#{{(userInfo | async)?.discriminator}}</span>\n          </h1>\n          <p class=\"mat-h3\">\n            Characters: {{(userStats | async)?.numCharacters}}<br>\n            Customizations: {{(userStats | async)?.numCustomizations}}\n          </p>\n        </div>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n\n  <div class=\"spacer-8px\"></div>\n\n  <mat-grid-list [cols]=\"numCols\" rowHeight=\"5:6\" gutterSize=\"8\" (window:resize)=\"onResize($event)\">\n    <mat-grid-tile class=\"character-tile\" *ngFor=\"let character of characters | async\">\n      <div class=\"character-name-underlay mat-typography character-image\">\n        <p class=\"ignore-theme\" *ngIf=\"!getImage(character)\">\n          {{getInitials(character.name)}}\n        </p>\n      </div>\n      <img class=\"character-image\" [src]=\"getImage(character)\" [alt]=\"'Image for ' + character.name\"\n           *ngIf=\"getImage(character)\">\n      <div class=\"character-meta\">\n        <div class=\"mat-typography ignore-theme character-text\">\n          <h3>\n            {{character.name}}\n          </h3>\n          <p>\n            {{getDescription(character)}}\n          </p>\n        </div>\n        <div class=\"mat-typography ignore-theme character-actions\">\n          <a mat-icon-button matTooltip=\"View Sheet\"\n             [href]=\"getUpstreamURL(character.upstream)\" target=\"_blank\">\n            <mat-icon>menu_book</mat-icon>\n          </a>\n          <button mat-icon-button\n                  [matTooltip]=\"character.import_version < MIN_CHARACTER_AUTOMATION_VERSION ? 'Please !update your character to use Automation.' : 'Edit Attacks'\"\n                  (click)=\"beginEditAttacks(character)\">\n            <mat-icon>build</mat-icon>\n          </button>\n        </div>\n      </div>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Observable, of} from 'rxjs';\nimport {CharacterMeta} from '../../schemas/Character';\nimport {UserInfo, UserStats} from '../../schemas/UserInfo';\nimport {getUser} from '../APIHelper';\nimport {DashboardService} from '../dashboard.service';\nimport {AttackEditorDialog} from './attack-editor-dialog/attack-editor-dialog.component';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {BreakpointBaseComponent} from '../../shared/breakpoints';\n\n@Component({\n  selector: 'avr-characters',\n  templateUrl: './characters.component.html',\n  styleUrls: ['./characters.component.css']\n})\nexport class CharactersComponent extends BreakpointBaseComponent implements OnInit {\n\n  userInfo: Observable<UserInfo>;\n  userStats: Observable<UserStats>;\n  characters: Observable<CharacterMeta[]>;\n  numCols: number;\n\n  MIN_CHARACTER_AUTOMATION_VERSION = 17;\n\n  constructor(private dashboardService: DashboardService,\n    private dialog: MatDialog,\n    private bp: BreakpointObserver) {\n      super(bp);\n    }\n\n  ngOnInit() {\n    this.getUserInfo();\n    this.getUserStats();\n    this.getCharacters();\n    this.onResize(null);\n  }\n\n  getUserInfo(): void {\n    this.userInfo = of(getUser());\n  }\n\n  getUserStats(): void {\n    this.userStats = this.dashboardService.getUserStats();\n  }\n\n  getCharacters(): void {\n    this.characters = this.dashboardService.getCharacterMeta();\n  }\n\n  getInitials(name: string): string {\n    const match = name.match(/\\b\\w/g) || [];\n    return ((match.shift() || '') + (match.pop() || '')).toUpperCase();\n  }\n\n  getImage(character: CharacterMeta): string {\n    return character.overrides.image || character.image;\n  }\n\n  getDescription(character: CharacterMeta): string {\n    return character.overrides.desc || character.description;\n  }\n\n  getUpstreamURL(upstream: string): string {\n    if (upstream.startsWith('dicecloud-')) {\n      return `https://dicecloud.com/character/${upstream.slice(10)}`;\n    } else if (upstream.startsWith('google-')) {\n      return `https://docs.google.com/spreadsheets/d/${upstream.slice(7)}`;\n    } else if (upstream.startsWith('beyond-')) {\n      return `https://ddb.ac/characters/${upstream.slice(7)}`;\n    }\n    return '';\n  }\n\n  // Attack Editor\n  beginEditAttacks(character: CharacterMeta) {\n    if (character.import_version < this.MIN_CHARACTER_AUTOMATION_VERSION) {\n      return;\n    }\n\n    this.dialog.open(AttackEditorDialog, {\n      width: '75%', disableClose: true,\n      data: character,\n      panelClass: 'automation-overlay'\n    })\n      .afterClosed().subscribe(result => {\n      console.log(result);\n    });\n  }\n\n  // Responsiveness\n  onResize(_) {\n    // reflects Material Design's breakpoints (https://material.io/design/layout/responsive-layout-grid.html#breakpoints)\n    if (window.innerWidth < 600) {\n      this.numCols = 1; // xsmall\n    } else if (window.innerWidth < 1024) {\n      this.numCols = 2; // small\n    } else if (window.innerWidth < 1440) {\n      this.numCols = 4; // medium\n    } else {\n      this.numCols = 6; // large\n    }\n  }\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'avr-edit-dialog',\n  templateUrl: './edit-dialog.component.html',\n  styleUrls: ['./edit-dialog.component.css']\n})\nexport class EditDialog implements OnInit {\n\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>New {{data.type}}...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field *ngIf=\"data.showName\">\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Value\" [(ngModel)]=\"value\"></textarea>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, value: value}\">Done</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Editing {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <mat-form-field>\n    <textarea matInput [(ngModel)]=\"data.content\" spellcheck=false></textarea>\n  </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"data.content\">Done</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'avr-new-dialog',\n  templateUrl: './new-dialog.component.html',\n  styleUrls: ['./new-dialog.component.css']\n})\nexport class NewDialog implements OnInit {\n\n  name: string;\n  value: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\nimport {Alias, Snippet, UserVar} from '../../schemas/Customization';\nimport {Observable, of} from 'rxjs';\nimport {defaultOptions, defaultTextOptions} from '../APIHelper';\nimport {catchError} from 'rxjs/operators';\n\nconst aliasUrl = `${environment.apiURL}/customizations/aliases`;\nconst snippetUrl = `${environment.apiURL}/customizations/snippets`;\nconst uvarUrl = `${environment.apiURL}/customizations/uvars`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomizationService {\n\n\n  constructor(private http: HttpClient) {\n  }\n\n  getAliases(): Observable<Alias[]> {\n    return this.http.get<Alias[]>(aliasUrl, defaultOptions());\n  }\n\n  updateAlias(alias: { name: string, commands: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${aliasUrl}/${alias.name}`, alias, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateAlias'))\n      );\n  }\n\n  deleteAlias(alias: Alias): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${aliasUrl}/${alias.name}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteAlias'))\n      );\n  }\n\n  getSnippets(): Observable<Snippet[]> {\n    return this.http.get<Snippet[]>(snippetUrl, defaultOptions());\n  }\n\n  updateSnippet(snippet: { name: string, snippet: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${snippetUrl}/${snippet.name}`, snippet, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateSnippet'))\n      );\n  }\n\n  deleteSnippet(snippet: Snippet): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${snippetUrl}/${snippet.name}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteSnippet'))\n      );\n  }\n\n  getUvars(): Observable<UserVar[]> {\n    return this.http.get<UserVar[]>(uvarUrl, defaultOptions());\n  }\n\n  updateUvar(uvar: { name: string, value: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${uvarUrl}/${uvar.name}`, uvar, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateUvar'))\n      );\n  }\n\n  deleteUvar(uvar: UserVar): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${uvarUrl}/${uvar.name}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteUvar'))\n      );\n  }\n\n  private handleTextError<T>(operation = 'operation') {\n    return (error: any): Observable<string> => {\n      console.error(error); // log to console instead\n\n      return of(`${operation} failed: ${error.error}`);\n    };\n  }\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\" sticky>\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n    <td mat-cell *matCellDef=\"let alias\">{{alias.name}}</td>\n    <td mat-footer-cell *matFooterCellDef>Create New</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"commands\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Commands</th>\n    <td mat-cell *matCellDef=\"let alias\">\n      <pre>{{alias.commands}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\" stickyEnd>\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let alias\">\n      <button mat-icon-button (click)=\"beginEdit(alias)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(alias)\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Alias} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\nimport {CustomizationService} from '../customization.service';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\n\n@Component({\n  selector: 'avr-alias-list',\n  templateUrl: './alias-list.component.html',\n  styleUrls: ['./alias-list.component.css']\n})\nexport class AliasListComponent implements OnInit {\n\n  @Input() data: Alias[];\n\n  columnsToDisplay: string[] = ['name', 'commands', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private custService: CustomizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    this.custService.getAliases()\n      .subscribe(aliases => this.data = aliases);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: true, type: 'alias'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.name || !result.value) {\n          this.snackBar.open('Name or commands cannot be empty.');\n          return;\n        }\n        let data = {name: result.name, commands: result.value};\n        if (data.name.includes(' ')) {\n          this.snackBar.open('Name cannot contain whitespace.');\n          return;\n        }\n        this.post(data);\n      }\n    });\n  }\n\n  beginEdit(alias: Alias) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: alias.name, content: alias.commands},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        alias.commands = result;\n        this.post(alias);\n      }\n    });\n  }\n\n  confirmDelete(alias: Alias) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: alias.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(alias);\n      }\n    });\n  }\n\n  post(alias: { name: string, commands: string }) {\n    // HTTP POST /customizations/aliases/:name\n    this.custService.updateAlias(alias)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(alias: Alias) {\n    // HTTP DELETE /customizations/aliases/:name\n    this.custService.deleteAlias(alias)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\" sticky>\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n    <td mat-cell *matCellDef=\"let snippet\">{{snippet.name}}</td>\n    <td mat-footer-cell *matFooterCellDef>Create New</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"snippet\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Value</th>\n    <td mat-cell *matCellDef=\"let snippet\">\n      <pre>{{snippet.snippet}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\" stickyEnd>\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let snippet\">\n      <button mat-icon-button (click)=\"beginEdit(snippet)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(snippet)\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Snippet} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {CustomizationService} from '../customization.service';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\n\n@Component({\n  selector: 'avr-snippet-list',\n  templateUrl: './snippet-list.component.html',\n  styleUrls: ['./snippet-list.component.css']\n})\nexport class SnippetListComponent implements OnInit {\n\n  @Input() data: Snippet[];\n\n  columnsToDisplay: string[] = ['name', 'snippet', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private custService: CustomizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    this.custService.getSnippets()\n      .subscribe(snippets => this.data = snippets);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: true, type: 'snippet'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.name || !result.value) {\n          this.snackBar.open('Name or value cannot be empty.');\n          return;\n        }\n        let data = {name: result.name, snippet: result.value};\n        if (data.name.includes(' ')) {\n          this.snackBar.open('Name cannot contain whitespace.');\n          return;\n        }\n        if (data.name.length < 2) {\n          this.snackBar.open('Name must be at least 2 characters.');\n          return;\n        }\n        this.post(data);\n      }\n    });\n  }\n\n  beginEdit(snippet: Snippet) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: snippet.name, content: snippet.snippet},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        snippet.snippet = result;\n        this.post(snippet);\n      }\n    });\n  }\n\n  confirmDelete(snippet: Snippet) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: snippet.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(snippet);\n      }\n    });\n  }\n\n  post(snippet: { name: string, snippet: string }) {\n    // HTTP POST /customizations/snippets/:name\n    this.custService.updateSnippet(snippet)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(snippet: Snippet) {\n    // HTTP DELETE /customizations/snippets/:name\n    this.custService.deleteSnippet(snippet)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\" sticky>\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n    <td mat-cell *matCellDef=\"let uvar\">{{uvar.name}}</td>\n    <td mat-footer-cell *matFooterCellDef>Create New</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"value\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Value</th>\n    <td mat-cell *matCellDef=\"let uvar\">\n      <pre>{{uvar.value}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\" stickyEnd>\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let uvar\">\n      <button mat-icon-button (click)=\"beginEdit(uvar)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(uvar)\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {UserVar} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {CustomizationService} from '../customization.service';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\n\n@Component({\n  selector: 'avr-uvar-list',\n  templateUrl: './uvar-list.component.html',\n  styleUrls: ['./uvar-list.component.css']\n})\nexport class UvarListComponent implements OnInit {\n\n  @Input() data: UserVar[];\n\n  columnsToDisplay: string[] = ['name', 'value', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private custService: CustomizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    this.custService.getUvars()\n      .subscribe(uvars => this.data = uvars);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: true, type: 'uvar'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.name || !result.value) {\n          this.snackBar.open('Name or value cannot be empty.');\n          return;\n        }\n        let data = {name: result.name, value: result.value};\n        this.post(data);\n      }\n    });\n  }\n\n  beginEdit(uvar: UserVar) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: uvar.name, content: uvar.value},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        uvar.value = result;\n        this.post(uvar);\n      }\n    });\n  }\n\n  confirmDelete(uvar: UserVar) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: uvar.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(uvar);\n      }\n    });\n  }\n\n  post(uvar: { name: string, value: string }) {\n    // HTTP POST /customizations/uvars/:name\n    this.custService.updateUvar(uvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(uvar: UserVar) {\n    // HTTP DELETE /customizations/uvars/:name\n    this.custService.deleteUvar(uvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {CharVar, Customizations} from '../../schemas/Customization';\nimport {DashboardService} from '../dashboard.service';\nimport {Observable} from 'rxjs';\n\n@Component({\n  selector: 'avr-customization',\n  templateUrl: './customization.component.html',\n  styleUrls: ['./customization.component.css']\n})\nexport class CustomizationComponent implements OnInit {\n\n  cvars: CharVar[];\n  customizations: Observable<Customizations>;\n\n  constructor(private dashboardService: DashboardService) {\n  }\n\n  ngOnInit() {\n    this.getCustomizations();\n  }\n\n  getCustomizations(): void {\n    this.customizations = this.dashboardService.getCustomizations();\n  }\n\n}\n","<div class=\"container\">\n  <mat-card>\n    <mat-tab-group>\n      <mat-tab label=\"Aliases\">\n        <avr-alias-list [data]=\"(customizations | async)?.aliases\"></avr-alias-list>\n      </mat-tab>\n      <mat-tab label=\"Snippets\">\n        <avr-snippet-list [data]=\"(customizations | async)?.snippets\"></avr-snippet-list>\n      </mat-tab>\n      <mat-tab label=\"Uvars\">\n        <avr-uvar-list [data]=\"(customizations | async)?.uvars\"></avr-uvar-list>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-card>\n</div>\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {environment} from '../../../environments/environment';\nimport {GlobalVar} from '../../schemas/Customization';\nimport {defaultOptions, defaultTextOptions} from '../APIHelper';\n\nconst gvarUrl = `${environment.apiURL}/customizations/gvars`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GvarService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getAllGvars(): Observable<{ owned: GlobalVar[], editable: GlobalVar[] }> {\n    return this.http.get<{ owned: GlobalVar[], editable: GlobalVar[] }>(gvarUrl, defaultOptions());\n  }\n\n  getGvars(owned: boolean): Observable<GlobalVar[]> {\n    return this.http.get<GlobalVar[]>(`${gvarUrl}/${owned ? 'owned' : 'editable'}`, defaultOptions());\n  }\n\n  newGvar(gvar: { value: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${gvarUrl}`, gvar, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('newGvar'))\n      );\n  }\n\n  getGvar(key: string): Observable<GlobalVar | boolean> {\n    return this.http.get<GlobalVar>(`${gvarUrl}/${key}`, defaultOptions())\n      .pipe(\n        catchError(_ => of(false))\n      );\n  }\n\n  updateGvar(gvar: GlobalVar): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${gvarUrl}/${gvar.key}`, gvar, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateGvar'))\n      );\n  }\n\n  deleteGvar(gvar: GlobalVar): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${gvarUrl}/${gvar.key}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteGvar'))\n      );\n  }\n\n  private handleTextError<T>(operation = 'operation') {\n    return (error: any): Observable<string> => {\n      console.error(error); // log to console instead\n\n      return of(`${operation} failed: ${error.error}`);\n    };\n  }\n\n}\n","<table mat-table [dataSource]=\"sortedGvars(data)\" class=\"list-table\">\n  <ng-container matColumnDef=\"name\" sticky>\n    <th mat-header-cell *matHeaderCellDef>ID</th>\n    <td mat-cell *matCellDef=\"let gvar\">{{gvar.key}}</td>\n    <td mat-footer-cell *matFooterCellDef>{{owned ? \"Create New\" : \"\"}}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"value\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Value</th>\n    <td mat-cell *matCellDef=\"let gvar\">\n      <pre>{{gvar.value}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\" stickyEnd>\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let gvar\">\n      <button mat-icon-button (click)=\"beginEdit(gvar)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(gvar)\" *ngIf=\"owned\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\" *ngIf=\"owned\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <div *ngIf=\"owned\">\n    <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n  </div>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {GlobalVar} from '../../../schemas/Customization';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\nimport {GvarService} from '../gvar.service';\n\n@Component({\n  selector: 'avr-gvar-list',\n  templateUrl: './gvar-list.component.html',\n  styleUrls: ['./gvar-list.component.css']\n})\nexport class GvarListComponent implements OnInit {\n\n  @Input() data: GlobalVar[];\n  @Input() owned: boolean;\n\n  columnsToDisplay: string[] = ['name', 'value', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private gvarService: GvarService) {\n  }\n\n  ngOnInit() {\n  }\n\n  sortedGvars(gvars: GlobalVar[]) {\n    return gvars?.sort((a, b) => a.key.localeCompare(b.key));\n  }\n\n  refresh() {\n    // HTTP GET /customizations/gvars/[owned|editable]\n    this.gvarService.getGvars(this.owned)\n      .subscribe(gvars => this.data = gvars);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: false, type: 'gvar'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.value) {\n          this.snackBar.open('Value cannot be empty.');\n          return;\n        }\n        let data = {value: result.value};\n        this.new(data);\n      }\n    });\n  }\n\n  beginEdit(gvar: GlobalVar) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: gvar.key, content: gvar.value},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        gvar.value = result;\n        this.post(gvar);\n      }\n    });\n  }\n\n  confirmDelete(gvar: GlobalVar) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: gvar.key}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(gvar);\n      }\n    });\n  }\n\n  new(gvar: { value: string }) {\n    // HTTP POST /customizations/gvars\n    this.gvarService.newGvar(gvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  post(gvar: GlobalVar) {\n    // HTTP POST /customizations/gvars/:key\n    this.gvarService.updateGvar(gvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(gvar: GlobalVar) {\n    // HTTP DELETE /customizations/gvars/:key\n    this.gvarService.deleteGvar(gvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n}\n","<mat-form-field class=\"lookup-id-input\">\n  <input matInput placeholder=\"Gvar ID\" #lookupIdInput>\n</mat-form-field>\n<button mat-flat-button color=\"primary\" (click)=\"lookupGvar(lookupIdInput.value)\">Lookup</button>\n\n<div *ngIf=\"activeGvar\">\n  <p>\n    {{activeGvar.key}}\n  </p>\n  <p>\n    <i>Owned by: {{activeGvar.owner_name}}</i>\n  </p>\n\n  <mat-divider></mat-divider>\n\n  <div class=\"gvar-value-container\">\n    <pre class=\"gvar-value-display\">{{activeGvar.value}}</pre>\n  </div>\n</div>\n\n<div *ngIf=\"error\">\n  <p style=\"color: red\">\n    {{error}}\n  </p>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {GlobalVar} from '../../../schemas/Customization';\nimport {GvarService} from '../gvar.service';\n\n@Component({\n  selector: 'avr-gvar-lookup',\n  templateUrl: './gvar-lookup.component.html',\n  styleUrls: ['./gvar-lookup.component.css']\n})\nexport class GvarLookupComponent implements OnInit {\n\n  activeGvar: GlobalVar;\n  error: string;\n\n  constructor(private gvarService: GvarService, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.checkForLookupQuery();\n  }\n\n  lookupGvar(key: string) {\n    key = key.trim();\n    console.log(key);\n\n    // set query param for permalinking\n    const searchParams = new URLSearchParams(window.location.search);\n    searchParams.set('lookup', key);\n    const newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();\n    history.pushState(null, '', newRelativePathQuery);\n\n    // HTTP GET /customizations/gvars/:key\n    this.gvarService.getGvar(key)\n      .subscribe(gvar => {\n        this.activeGvar = null;\n        this.error = null;\n        if (gvar === false) {\n          this.error = 'Failed to get gvar.';\n        } else {\n          this.activeGvar = gvar as GlobalVar;\n        }\n      });\n  }\n\n  checkForLookupQuery() {\n    const lookupId = this.route.snapshot.queryParamMap.get('lookup');\n    if (lookupId) {\n      this.lookupGvar(lookupId);\n    }\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {GlobalVar} from '../../schemas/Customization';\nimport {GvarService} from './gvar.service';\n\n@Component({\n  selector: 'avr-gvars',\n  templateUrl: './gvars.component.html',\n  styleUrls: ['./gvars.component.css']\n})\nexport class GvarsComponent implements OnInit {\n\n  gvars: Observable<{ owned: GlobalVar[]; editable: GlobalVar[] }>;\n  forcedTabIndex: number;\n\n  constructor(private gvarService: GvarService, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.getCustomizations();\n    this.checkForLookupQuery();\n  }\n\n  getCustomizations(): void {\n    this.gvars = this.gvarService.getAllGvars();\n  }\n\n  checkForLookupQuery(): void {\n    const lookupId = this.route.snapshot.queryParamMap.get('lookup');\n    if (lookupId) {\n      this.forcedTabIndex = 2;\n    }\n  }\n}\n","<div class=\"container\">\n  <mat-card>\n    <mat-tab-group [(selectedIndex)]=\"forcedTabIndex\">\n      <mat-tab label=\"Owned\">\n        <avr-gvar-list [data]=\"(gvars | async)?.owned\" [owned]=\"true\"></avr-gvar-list>\n      </mat-tab>\n      <mat-tab label=\"Editable\">\n        <avr-gvar-list [data]=\"(gvars | async)?.editable\" [owned]=\"false\"></avr-gvar-list>\n      </mat-tab>\n      <mat-tab label=\"Lookup\">\n        <avr-gvar-lookup></avr-gvar-lookup>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-card>\n</div>\n","import {isPlatformServer} from '@angular/common';\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot} from '@angular/router';\nimport {isLoggedIn, navigateToDiscordOauth} from './SecurityHelper';\nimport {setLocalStorage} from './shared/StorageUtils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    private router: Router,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n    if (isLoggedIn()) {\n      return true;\n    } else if (isPlatformServer(this.platformId)) {\n      // servers cannot do auth\n      // try and route to the ssr module - if it doesn't exist this will render the home page instead\n      this.router.navigateByUrl(`/ssr${state.url}`);\n      return false;\n    } else {\n      // the discord auth endpoint requires an exact redirect_uri (no after param) so we store where the user wanted to go in localStorage\n      setLocalStorage('after-login-redirect', state.url);\n      navigateToDiscordOauth();\n      // > Note: The guard can also tell the router to navigate elsewhere, effectively canceling the current navigation.\n      // > When doing so inside a guard, the guard should return false;\n      // https://angular.io/guide/router#milestone-5-route-guards\n      return false;\n    }\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot) {\n    return this.canActivate(childRoute, state);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {DashboardComponent} from './dashboard.component';\nimport {CharactersComponent} from './characters/characters.component';\nimport {CustomizationComponent} from './customization/customization.component';\nimport {GvarsComponent} from './gvars/gvars.component';\nimport {AuthGuard} from '../auth.guard';\n\n\nconst dashboardRoutes: Routes = [\n  {\n    path: '', canActivate: [AuthGuard], component: DashboardComponent, children: [\n      {path: 'characters', component: CharactersComponent},\n      {path: 'aliases', component: CustomizationComponent},\n      {path: 'gvars', component: GvarsComponent},\n      {path: 'homebrew', loadChildren: () => import('./homebrew/homebrew.module').then(mod => mod.HomebrewModule)},\n      {path: 'workshop', loadChildren: () => import('./workshop/workshop.module').then(mod => mod.WorkshopModule)},\n      {path: '', redirectTo: 'characters', pathMatch: 'full'}\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(dashboardRoutes)],\n  exports: [RouterModule]\n})\nexport class DashboardRoutingModule {\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexModule} from '@angular/flex-layout';\nimport {FormsModule} from '@angular/forms';\nimport {MaterialModule} from '../material/material.module';\nimport {AutomationEditorModule} from '../shared/automation-editor/automation-editor.module';\nimport {AttackEditorDialog} from './characters/attack-editor-dialog/attack-editor-dialog.component';\nimport {CharactersComponent} from './characters/characters.component';\nimport {ConfirmDeleteDialog} from './confirm-delete-dialog/confirm-delete-dialog.component';\nimport {AliasListComponent} from './customization/alias-list/alias-list.component';\nimport {CustomizationComponent} from './customization/customization.component';\nimport {SnippetListComponent} from './customization/snippet-list/snippet-list.component';\nimport {UvarListComponent} from './customization/uvar-list/uvar-list.component';\nimport {DashboardRoutingModule} from './dashboard-routing.module';\nimport {DashboardComponent} from './dashboard.component';\nimport {EditDialog} from './edit-dialog/edit-dialog.component';\nimport {GvarListComponent} from './gvars/gvar-list/gvar-list.component';\nimport {GvarLookupComponent} from './gvars/gvar-lookup/gvar-lookup.component';\nimport {GvarsComponent} from './gvars/gvars.component';\nimport {NewDialog} from './new-dialog/new-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    DashboardRoutingModule,\n    FlexModule,\n    AutomationEditorModule,\n  ],\n  declarations: [\n    DashboardComponent,\n    CharactersComponent,\n    CustomizationComponent,\n    AliasListComponent,\n    SnippetListComponent,\n    UvarListComponent,\n    GvarsComponent,\n    ConfirmDeleteDialog,\n    EditDialog,\n    NewDialog,\n    AttackEditorDialog,\n    GvarListComponent,\n    GvarLookupComponent,\n  ]\n})\n\nexport class DashboardModule {\n}\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {environment} from '../../environments/environment';\nimport {Attack, CharacterMeta} from '../schemas/Character';\nimport {Customizations} from '../schemas/Customization';\nimport {UserStats} from '../schemas/UserInfo';\nimport {ApiResponse, defaultErrorHandler, defaultOptions} from './APIHelper';\n\nconst userInfoUrl = `${environment.apiURL}/user`;\nconst userStatsUrl = `${environment.apiURL}/userStats`;\n\nconst characterBaseUrl = `${environment.apiURL}/characters`;\nconst characterMetaUrl = `${characterBaseUrl}/meta`;\n\nconst customizationsUrl = `${environment.apiURL}/customizations`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n\n\n  constructor(private http: HttpClient) {\n  }\n\n  getUserStats(): Observable<UserStats> {\n    return this.http.get<UserStats>(userStatsUrl, defaultOptions());\n  }\n\n  getCharacterMeta(): Observable<CharacterMeta[]> {\n    return this.http.get<CharacterMeta[]>(characterMetaUrl, defaultOptions());\n  }\n\n  // character attack stuff\n  getCharacterAttacks(upstream: string): Observable<Attack[]> {\n    const endpt = `${characterBaseUrl}/${upstream}/attacks`;\n    return this.http.get<Attack[]>(endpt, defaultOptions());\n  }\n\n  getTemplateAttacks(): Observable<Attack[]> {\n    return this.http.get<Attack[]>(`${characterBaseUrl}/attacks/srd`, defaultOptions());\n  }\n\n  putCharacterAttacks(upstream: string, attacks: Attack[]): Observable<ApiResponse<string>> {\n    const endpt = `${characterBaseUrl}/${upstream}/attacks`;\n    return this.http.put<ApiResponse<string>>(endpt, attacks, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  validateAttackJSON(attacks: Attack | Attack[]): Observable<ApiResponse<string>> {\n    const endpt = `${characterBaseUrl}/attacks/validate`;\n    return this.http.post<ApiResponse<string>>(endpt, attacks, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  getCustomizations(): Observable<Customizations> {\n    return this.http.get<Customizations>(customizationsUrl, defaultOptions());\n  }\n}\n","<h2 mat-dialog-title>Copying SRD object...</h2>\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"templates\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Search...\" [(ngModel)]=\"search\" (keyup)=\"filterTemplates()\">\n    </mat-form-field>\n  </div>\n  <div class=\"results\" *ngIf=\"filteredTemplates?.length\">\n    <mat-list>\n      <mat-list-item *ngFor=\"let obj of filteredTemplates\" class=\"hoverable pointer\"\n                     (click)=\"select(obj)\">\n        {{data.namer(obj)}}\n      </mat-list-item>\n    </mat-list>\n  </div>\n  <div class=\"results\" *ngIf=\"!filteredTemplates?.length\">\n    No results found.\n  </div>\n</mat-dialog-content>\n\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"!templates\">\n  <mat-spinner [diameter]=\"24\"></mat-spinner>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\n\nclass SRDDialogData<T> {\n  getter: () => Observable<T[]>;\n  namer: (obj: T) => string;\n}\n\n@Component({\n  selector: 'avr-srd-copy-dialog',\n  templateUrl: './srd-copy-dialog.component.html'\n})\nexport class SRDCopyDialog<T> implements OnInit {\n\n  search = '';\n  templates: T[];\n  filteredTemplates: T[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: SRDDialogData<T>,\n              private dialogRef: MatDialogRef<SRDCopyDialog<T>>) {\n  }\n\n  ngOnInit() {\n    this.getTemplates();\n  }\n\n  select(obj: T) {\n    this.dialogRef.close(obj);\n  }\n\n  filterTemplates() {\n    this.filteredTemplates = this.templates.filter(\n      obj => this.data.namer(obj).toLowerCase().includes(this.search.toLowerCase())\n    );\n  }\n\n  getTemplates() {\n    this.data.getter()\n      .subscribe(objs => {\n        this.templates = objs;\n        this.filterTemplates();\n      });\n  }\n\n}\n","import { Component } from \"@angular/core\";\nimport { MatSnackBar, MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS } from \"@angular/material/snack-bar\";\nimport { Inject } from '@angular/core';  \n\n\n@Component({\n  selector: 'validation-snackbar',\n  templateUrl: 'validation-snackbar.component.html',\n  styleUrls: ['./validation-snackbar.component.css']\n})\n\nexport class ValidationSnackbar { \n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any,\n              public snackBar: MatSnackBar) {\n  }\n}\n","<div class=\"mat-simple-snackbar\">\n  <div [innerHTML]=\"data.html\" class=\"validation-error\"></div>\n  <div class=\"mat-simple-snackbar-action ng-star-inserted\">\n    <button mat-raised-button (click)=\"snackBar.dismiss()\" \n            class=\"mat-focus-indicator mat-button mat-button-base\">\n      Close\n    </button>\n  </div>\n</div>"],"sourceRoot":"webpack:///","file":"354.c8369e5758eda65f.js"}