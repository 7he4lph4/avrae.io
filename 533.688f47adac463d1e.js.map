{"version":3,"file":"533.688f47adac463d1e.js","mappings":"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","names":["c","constructor","x","ngOnInit","_","d","selectors","t","MAs","toggle","e","n","o","super","this","router","navigate","logout","L","r","g","Object","i","name","automation","_v","proper","verb","oxw","addAndSelectNewAttack","beginYAMLImport","newFromSRD","ngOnDestroy","snackBar","dismiss","loadAttacks","charService","getCharacterAttacks","character","upstream","subscribe","allAttacks","Nt","push","selectedAttack","dialog","open","St","width","disableClose","data","getter","getTemplateAttacks","namer","afterClosed","deleteAttack","indexOf","splice","doSave","saveButtonValue","saveAndExitButtonValue","saveButtonDisabled","putCharacterAttacks","pipe","error","openFromComponent","At","html","horizontalPosition","duration","errorValue","save","saveAndExit","dialogRef","close","beginYAMLExport","Et","Array","yaml","Lt","validator","validateAttackJSON","componentInstance","loading","success","a","defineProperty","get","set","P","h","V","et","beginEditAttacks","getUserInfo","getUserStats","getCharacters","onResize","userInfo","userStats","dashboardService","characters","getCharacterMeta","getInitials","match","shift","pop","toUpperCase","getImage","overrides","image","getDescription","desc","description","getUpstreamURL","startsWith","slice","import_version","MIN_CHARACTER_AUTOMATION_VERSION","panelClass","console","log","window","innerWidth","numCols","nt","J","R","vt","gt","Ct","xt","getAliases","http","updateAlias","post","handleTextError","deleteAlias","delete","getSnippets","updateSnippet","deleteSnippet","getUvars","updateUvar","deleteUvar","Y","factory","beginEdit","confirmDelete","beginNew","refresh","custService","showName","type","value","commands","includes","content","_t","at","snippet","length","ot","it","getCustomizations","customizations","rt","F","getAllGvars","getGvars","newGvar","getGvar","updateGvar","key","deleteGvar","Q","sortedGvars","sort","localeCompare","gvarService","owned","new","ct","checkForLookupQuery","lookupGvar","trim","URLSearchParams","location","search","pathname","toString","history","pushState","activeGvar","route","snapshot","queryParamMap","lt","gvars","forcedTabIndex","st","canActivate","platformId","navigateByUrl","url","tn","canActivateChild","B","en","path","component","children","loadChildren","l","then","HomebrewModule","Promise","WorkshopModule","redirectTo","pathMatch","q","G","Z","u","U","v","I","b","k","W","put","O","select","filterTemplates","C","f","getTemplates","filteredTemplates","templates","filter","toLowerCase","E"],"sourceRoot":"webpack:///","sources":["./src/app/dashboard/confirm-delete-dialog/confirm-delete-dialog.component.html","./src/app/dashboard/confirm-delete-dialog/confirm-delete-dialog.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/dashboard/dashboard.component.ts","./node_modules/source-map-loader/dist/cjs.js","./src/app/schemas/Character.ts","./src/app/dashboard/characters/attack-editor-dialog/attack-editor-dialog.component.html","./src/app/dashboard/characters/attack-editor-dialog/attack-editor-dialog.component.ts","./src/app/dashboard/characters/characters.component.html","./src/app/dashboard/characters/characters.component.ts","./src/app/dashboard/edit-dialog/edit-dialog.component.ts","./src/app/dashboard/new-dialog/new-dialog.component.html","./src/app/dashboard/edit-dialog/edit-dialog.component.html","./src/app/dashboard/new-dialog/new-dialog.component.ts","./src/app/dashboard/customization/customization.service.ts","./src/app/dashboard/customization/alias-list/alias-list.component.html","./src/app/dashboard/customization/alias-list/alias-list.component.ts","./src/app/dashboard/customization/snippet-list/snippet-list.component.html","./src/app/dashboard/customization/snippet-list/snippet-list.component.ts","./src/app/dashboard/customization/uvar-list/uvar-list.component.html","./src/app/dashboard/customization/uvar-list/uvar-list.component.ts","./src/app/dashboard/customization/customization.component.ts","./src/app/dashboard/customization/customization.component.html","./src/app/dashboard/gvars/gvar.service.ts","./src/app/dashboard/gvars/gvar-list/gvar-list.component.html","./src/app/dashboard/gvars/gvar-list/gvar-list.component.ts","./src/app/dashboard/gvars/gvar-lookup/gvar-lookup.component.html","./src/app/dashboard/gvars/gvar-lookup/gvar-lookup.component.ts","./src/app/dashboard/gvars/gvars.component.ts","./src/app/dashboard/gvars/gvars.component.html","./src/app/auth.guard.ts","./src/app/dashboard/dashboard-routing.module.ts","./src/app/dashboard/dashboard.module.ts","./src/app/dashboard/dashboard.service.ts","./src/app/shared/dialogs/srd-copy-dialog/srd-copy-dialog.component.html","./src/app/shared/dialogs/srd-copy-dialog/srd-copy-dialog.component.ts","./src/app/shared/validation-snackbar/validation-snackbar.component.ts","./src/app/shared/validation-snackbar/validation-snackbar.component.html"],"sourcesContent":["<h2 mat-dialog-title>Deleting {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Are you sure you want to delete {{data.name}}?\n  </p>\n  <p *ngIf=\"data.message\">\n    {{data.message}}\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>No</button>\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Yes</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\ninterface ConfirmDeleteDialogData {\n  name: string;\n  message?: string;\n}\n\n@Component({\n  selector: 'avr-confirm-delete-dialog',\n  templateUrl: './confirm-delete-dialog.component.html',\n  styleUrls: ['./confirm-delete-dialog.component.css']\n})\nexport class ConfirmDeleteDialog implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ConfirmDeleteDialogData) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<!-- Side Menu Floating Button -->\n<button mat-icon-button\n        *ngIf=\"(small || mobile) && !sidenav.opened\"\n        (click)=\"sidenav.toggle()\"\n        class=\"small-menu-button mat-fab\"\n        color=\"accent\">\n  <mat-icon>double_arrow</mat-icon>\n</button>\n\n<mat-sidenav-container class=\"sidenav-container\"\n                       [ngClass]=\"{'side-menu-open': !sidenav.opened}\">\n\n  <mat-sidenav\n    #sidenav\n    [(opened)]=\"medium\"\n    [mode]=\"small || mobile ? 'over' : 'side'\"\n    class=\"sidenav mat-elevation-z3\"\n    fixedTopGap=\"56px\">\n    <mat-nav-list>\n      <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" [routerLink]=\"['characters']\">Characters</a>\n\n      <mat-expansion-panel expanded class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title class=\"nav-panel\">\n            Alias Workshop\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"nav-panel-body\">\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/workshop\">Explore</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/workshop/my-subscriptions\">My Subscriptions</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/workshop/my-work\">My Work</a>\n        </div>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel expanded class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title class=\"nav-panel\">\n            Customization\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"nav-panel-body\">\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" [routerLink]=\"['aliases']\">My Customizations</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" [routerLink]=\"['gvars']\">Global Variables</a>\n        </div>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel expanded class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title class=\"nav-panel\">\n            Homebrew\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"nav-panel-body\">\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/homebrew/items\">Items</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" routerLink=\"/dashboard/homebrew/spells\">Spells</a>\n          <a mat-list-item (click)=\"(small || mobile) && sidenav.toggle()\" href=\"https://critterdb.com/#/index\" target=\"_blank\" rel=\"noopener noreferrer\">Creatures\n            <mat-icon class=\"icon-in-panel\">launch</mat-icon>\n          </a>\n        </div>\n      </mat-expansion-panel>\n\n      <div class=\"spacer\"></div>\n      <a mat-list-item (click)=\"logout()\">Logout</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <!-- Add Content Here -->\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import {BreakpointObserver} from '@angular/cdk/layout';\nimport {Component} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {isLoggedIn, removeToken} from '../SecurityHelper';\nimport {BreakpointBaseComponent} from '../shared/breakpoints';\nimport {DashboardService} from './dashboard.service';\n\n@Component({\n  selector: 'avr-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent extends BreakpointBaseComponent {\n\n  constructor(private router: Router, private dashboardService: DashboardService, private bp: BreakpointObserver) {\n    super(bp);\n    if (!isLoggedIn()) {\n      this.router.navigate(['login']);\n    }\n  }\n\n  logout() {\n    removeToken();\n    this.router.navigate(['']);\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import {AutomationEffect} from '../shared/automation-editor/types';\n\nexport class Character {\n  owner: string;\n  active: boolean;\n  upstream: string;\n  type: string;\n  version: number;\n  stats: Stats;\n  levels: Map<string, number>;\n  hp: number;\n  armor: number;\n  attacks: Attack[];\n  skills: Skills;\n  resist: string[];\n  immune: string[];\n  vuln: string[];\n  saves: Saves;\n  stat_cvars?: Map<string, any>;\n  skill_effects?: Map<string, string>;\n  consumables?: Consumables;\n  spellbook?: Spellbook;\n  live?: boolean;\n}\n\nexport class CharacterMeta {\n  upstream: string;\n  active: boolean;\n  name: string;\n  description: string;\n  image: string;\n  levels: { total_level: number, classes: Map<string, number> };\n  import_version: number;\n  overrides: { desc: string, image: string, attacks: Array<any>, spells: Array<any> };\n}\n\nexport class Stats {\n  name: string;\n  image: string;\n  description: string;\n  strength: number;\n  dexterity: number;\n  constitution: number;\n  intelligence: number;\n  wisdom: number;\n  charisma: number;\n  strengthMod: number;\n  dexterityMod: number;\n  constitutionMod: number;\n  intelligenceMod: number;\n  wisdomMod: number;\n  charismaMod: number;\n  proficiencyBonus: number;\n}\n\nexport class Attack {\n  name: string;\n  automation: AutomationEffect[];\n  _v: 2;\n  proper?: boolean;\n  verb?: string;\n  phrase?: string;\n  thumb?: string;\n  criton?: number;\n  extra_crit_damage?: string;\n\n  constructor(name = '', automation: AutomationEffect[] = [], proper: boolean = false, verb: string = null) {\n    this.name = name;\n    this.automation = automation;\n    this._v = 2;\n    this.proper = proper;\n    this.verb = verb;\n  }\n}\n\nexport class Skills {\n  acrobatics: number;\n  animalHandling: number;\n  arcana: number;\n  athletics: number;\n  deception: number;\n  history: number;\n  initiative: number;\n  insight: number;\n  intimidation: number;\n  investigation: number;\n  medicine: number;\n  nature: number;\n  perception: number;\n  performance: number;\n  persuasion: number;\n  religion: number;\n  sleightOfHand: number;\n  stealth: number;\n  survival: number;\n  strengthSave: number;\n  dexteritySave: number;\n  constitutionSave: number;\n  intelligenceSave: number;\n  wisdomSave: number;\n  charismaSave: number;\n  strength: number;\n  dexterity: number;\n  constitution: number;\n  intelligence: number;\n  wisdom: number;\n  charisma: number;\n}\n\nexport class Saves {\n  strengthSave: number;\n  dexteritySave: number;\n  constitutionSave: number;\n  intelligenceSave: number;\n  wisdomSave: number;\n  charismaSave: number;\n}\n\nexport class Consumables {\n  custom?: Map<string, Counter>;\n  hp?: Counter;\n  deathsaves?: DeathSaves;\n  spellslots?: SpellSlotsConsumable;\n}\n\nexport class Counter {\n  value: number;\n  reset?: string;\n  max?: number;\n  min?: number;\n  live?: string;\n  type?: string;\n}\n\nexport class DeathSaves {\n  fail: Counter;\n  success: Counter;\n}\n\nexport class SpellSlotsConsumable {\n  '1': Counter;\n  '2': Counter;\n  '3': Counter;\n  '4': Counter;\n  '5': Counter;\n  '6': Counter;\n  '7': Counter;\n  '8': Counter;\n  '9': Counter;\n}\n\nexport class Spellbook {\n  spellslots: SpellSlots;\n  spells: string[];\n  dc: number;\n  attackBonus: number;\n  dicecloud_id?: string;\n}\n\nexport class SpellSlots {\n  '1': number;\n  '2': number;\n  '3': number;\n  '4': number;\n  '5': number;\n  '6': number;\n  '7': number;\n  '8': number;\n  '9': number;\n}\n","<h2 mat-dialog-title>Editing Attacks: {{character.name}}</h2>\n\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"allAttacks\">\n  <div>\n    <p>\n      Need help using the editor? Check out the docs\n      <a href=\"https://avrae.readthedocs.io/en/stable/automation_ref.html\" target=\"_blank\"\n         rel=\"noopener noreferrer\">here</a>!\n    </p>\n  </div>\n\n  <div fxLayout=\"row\" class=\"auto-row\">\n    <mat-form-field>\n      <mat-label>Select an attack</mat-label>\n      <mat-select [(value)]=\"selectedAttack\">\n        <mat-option *ngFor=\"let attack of allAttacks\" [value]=\"attack\">\n          {{attack.name}}\n        </mat-option>\n        <mat-option (click)=\"addAndSelectNewAttack()\">New...</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Import YAML\" (click)=\"beginYAMLImport()\">\n          <mat-icon aria-label=\"Import from YAML\">vertical_align_bottom</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Copy SRD Monster Action\" (click)=\"newFromSRD()\">\n          <mat-icon aria-label=\"Copy SRD Monster Action\">scanner</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Export All to YAML\" (click)=\"beginYAMLExport(allAttacks)\">\n          <mat-icon aria-label=\"Export All to YAML\">vertical_align_top</mat-icon>\n        </button>\n      </span>\n    </span>\n    <span fxFlex=\"grow\"></span>\n  </div>\n\n  <mat-divider class=\"beefy-divider\"></mat-divider>\n\n  <p *ngIf=\"!selectedAttack\">Please select an attack.</p>\n\n  <div *ngIf=\"selectedAttack\">\n    <!-- name, delete, export -->\n    <div fxLayout=\"row\" fxLayoutGap=\"4px\" class=\"auto-row\">\n      <mat-form-field fxFlex=\"grow\">\n        <input matInput placeholder=\"Attack Name\" [(ngModel)]=\"selectedAttack.name\">\n      </mat-form-field>\n      <span>\n        <span fxFlex>\n          <button mat-icon-button color=\"warn\" (click)=\"deleteAttack(selectedAttack)\">\n            <mat-icon>delete</mat-icon>\n          </button>\n        </span>\n        <span fxFlex>\n          <button mat-icon-button matTooltip=\"Export to YAML\" (click)=\"beginYAMLExport(selectedAttack)\">\n            <mat-icon aria-label=\"Export to YAML\">vertical_align_top</mat-icon>\n          </button>\n        </span>\n      </span>\n    </div>\n\n    <span (click)=\"showAdvancedOptions = !showAdvancedOptions\" class=\"toggle-advanced-options\">\n      Advanced Options\n      <mat-icon>\n        {{showAdvancedOptions ? 'expand_less' : 'expand_more'}}\n      </mat-icon>\n    </span>\n\n    <div class=\"advanced-options\" *ngIf=\"showAdvancedOptions\">\n      <!-- display options -->\n      <mat-divider class=\"beefy-divider\"></mat-divider>\n      <h3>\n        Display Options\n      </h3>\n      <div class=\"display-options-container\">\n      <span>\n        Display: {{character.name}}\n        <mat-form-field>\n          <input matInput placeholder=\"attacks with\" [(ngModel)]=\"verbWrapper\">\n        </mat-form-field>\n        {{selectedAttack.proper ? selectedAttack.name : 'a ' + selectedAttack.name}}!\n      </span>\n\n        <mat-checkbox [(ngModel)]=\"selectedAttack.proper\">Proper Noun</mat-checkbox>\n\n        <mat-form-field>\n          <input matInput placeholder=\"Thumbnail URL\" [(ngModel)]=\"thumbWrapper\"\n                 matTooltip=\"The URL of an image that will display each time this attack is used.\">\n        </mat-form-field>\n\n        <mat-form-field>\n          <input matInput placeholder=\"Flavor Text\" [(ngModel)]=\"phraseWrapper\"\n                 matTooltip=\"Some text that will display each time this attack is used.\">\n        </mat-form-field>\n      </div>\n\n      <!-- crit options -->\n      <mat-divider class=\"beefy-divider\"></mat-divider>\n      <h3>\n        Critical Hit Options\n      </h3>\n      <div class=\"crit-options-container auto-row\">\n        <mat-form-field>\n          <input matInput placeholder=\"Criton\" [(ngModel)]=\"critonWrapper\" type=\"number\" min=\"1\" max=\"20\"\n                 matTooltip=\"The natural roll this attack will crit on.\">\n        </mat-form-field>\n\n        <mat-form-field>\n          <input matInput placeholder=\"Extra Crit Damage\" [(ngModel)]=\"extraCritDamageWrapper\"\n                 matTooltip=\"How much extra damage this attack does on a crit, beyond doubling dice.\">\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- automation editor -->\n    <mat-divider class=\"beefy-divider\"></mat-divider>\n    <h3>\n      Automation\n    </h3>\n    <avr-automation-editor [automation]=\"selectedAttack.automation\"></avr-automation-editor>\n  </div>\n\n  <p *ngIf=\"errorValue\" class=\"error-text\">\n    {{errorValue}}\n  </p>\n</mat-dialog-content>\n\n<!-- Loading Spinner -->\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"!allAttacks\">\n  <mat-spinner [diameter]=\"24\"></mat-spinner>\n  <p>\n    Loading attacks...\n  </p>\n</mat-dialog-content>\n\n<!-- Buttons -->\n<mat-dialog-actions>\n  <button mat-flat-button mat-dialog-close color=\"warn\">Cancel</button>\n  <span>\n    <button mat-flat-button (click)=\"save()\" [disabled]=\"saveButtonDisabled\"\n            color=\"primary\">{{saveButtonValue}}</button>\n    <button mat-flat-button (click)=\"saveAndExit()\" [disabled]=\"saveButtonDisabled\"\n            color=\"primary\">{{saveAndExitButtonValue}}</button>\n  </span>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Attack, CharacterMeta} from '../../../schemas/Character';\nimport {JSONExportDialog} from '../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {JSONImportDialog} from '../../../shared/dialogs/json-import-dialog/json-import-dialog.component';\nimport {SRDCopyDialog} from '../../../shared/dialogs/srd-copy-dialog/srd-copy-dialog.component';\nimport {ValidationSnackbar} from '../../../shared/validation-snackbar/validation-snackbar.component';\nimport {ApiResponse} from '../../APIHelper';\nimport {DashboardService} from '../../dashboard.service';\n\n@Component({\n  selector: 'avr-attack-editor-dialog',\n  templateUrl: './attack-editor-dialog.component.html',\n  styleUrls: ['./attack-editor-dialog.component.scss']\n})\nexport class AttackEditorDialog implements OnInit {\n\n  selectedAttack: Attack;\n  allAttacks: Attack[];\n\n  saveButtonValue = 'Save';\n  saveAndExitButtonValue = 'Save and Exit';\n  saveButtonDisabled = false;\n  errorValue: string;\n  showAdvancedOptions = false;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public character: CharacterMeta, private charService: DashboardService,\n              private dialogRef: MatDialogRef<AttackEditorDialog>, private dialog: MatDialog, private snackBar: MatSnackBar) {\n  }\n\n\n  ngOnDestroy() {\n    this.snackBar.dismiss();\n  }\n\n  ngOnInit() {\n    this.loadAttacks();\n  }\n\n  loadAttacks() {\n    this.charService.getCharacterAttacks(this.character.upstream)\n      .subscribe(result => {\n        this.allAttacks = result;\n      });\n  }\n\n  addAndSelectNewAttack() {\n    const atk = new Attack('New Attack');\n    this.allAttacks.push(atk);\n    this.selectedAttack = atk;\n  }\n\n  newFromSRD() {\n    const dialogRef = this.dialog.open(SRDCopyDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {getter: () => this.charService.getTemplateAttacks(), namer: a => a.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.allAttacks.push(result);\n        this.selectedAttack = result;\n      }\n    });\n  }\n\n  deleteAttack(attack: Attack) {\n    const index = this.allAttacks.indexOf(attack);\n    if (index > -1) {\n      this.allAttacks.splice(index, 1);\n    }\n    this.selectedAttack = null;\n  }\n\n  doSave(): Observable<ApiResponse<string>> {\n    this.saveButtonValue = `Saving...`;\n    this.saveAndExitButtonValue = `Saving...`;\n    this.saveButtonDisabled = true;\n\n    return this.charService.putCharacterAttacks(this.character.upstream, this.allAttacks)\n      .pipe(map(result => {\n        this.saveButtonValue = 'Save';\n        this.saveAndExitButtonValue = 'Save and Exit';\n        this.saveButtonDisabled = false;\n\n        if (!result || result.error) {\n          this.snackBar.openFromComponent(ValidationSnackbar, {\n            data: {\n              html: `${result.error}`\n            },\n            horizontalPosition: 'right',\n            duration: -1\n          });\n        } else {\n          this.errorValue = null;\n        }\n        return result;\n      }));\n  }\n\n  save() {\n    this.doSave().subscribe();\n  }\n\n  saveAndExit() {\n    this.doSave()\n      .subscribe(result => {\n        if (result && !result.error) {\n          // successful PUT, exit\n          this.dialogRef.close();\n        }\n      });\n  }\n\n  // YAML\n  beginYAMLExport(attack: Attack | Attack[]) {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: (attack instanceof Array) ? 'All Attacks' : attack.name, data: attack, yaml: true},\n      width: '60%'\n    });\n  }\n\n  beginYAMLImport() {\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {validator: (data) => this.validateAttackJSON(dialogRef, data), yaml: true}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        const attack: Attack | Attack[] = result;\n        if (attack instanceof Array) {\n          this.allAttacks.push(...attack);\n        } else {\n          this.allAttacks.push(attack);\n        }\n      }\n    });\n  }\n\n  validateAttackJSON(dialogRef: MatDialogRef<JSONImportDialog>, data) {\n    this.charService.validateAttackJSON(data)\n      .subscribe(\n        result => {\n          dialogRef.componentInstance.loading = false;\n          if (result.success) {\n            dialogRef.close(data);\n          } else {\n            this.snackBar.openFromComponent(ValidationSnackbar, {\n              data: {\n                html: `${result.error}`\n              },\n              horizontalPosition: 'right',\n              duration: -1\n            });\n          }\n        }\n      );\n  }\n\n  // attack model wrappers\n  @removeEmpty('verb') verbWrapper: string;\n  @removeEmpty('thumb') thumbWrapper: string;\n  @removeEmpty('phrase') phraseWrapper: string;\n  @removeEmpty('criton') critonWrapper: number;\n  @removeEmpty('extra_crit_damage') extraCritDamageWrapper: string;\n}\n\n// adapted from https://stackoverflow.com/questions/59651284/dynamic-setter-from-decorator-typescript-complains-about-read-only-property\n// used to define getters/setters for wrapped props on selectedAttack that undefine them if the set value is empty\nfunction removeEmpty(attackProp: string) {\n  return function (target, propertyKey: string) {\n    Object.defineProperty(target, propertyKey, {\n      get: function (this) {\n        return this.selectedAttack[attackProp];\n      },\n      set: function (this, value) {\n        this.selectedAttack[attackProp] = value || undefined;\n      },\n    });\n  };\n}\n","<div class=\"characterList\">\n  <mat-card class=\"user-card\" *ngIf=\"(userInfo | async)\">\n    <mat-grid-list cols=\"4\" rowHeight=\"{{ !mobile ? '1:1' : '1:2' }}\">\n      <mat-grid-tile colspan=\"{{ !mobile ? 1 : 4 }}\" >\n        <img alt=\"avatar\" [src]=\"(userInfo | async)?.avatarUrl\" class=\"avatarImg mat-elevation-z1\">\n      </mat-grid-tile>\n      <mat-grid-tile colspan=\"{{ !mobile ? 3 : 4 }}\" class=\"user-stats\">\n        <div>\n          <h1 class=\"mat-display-2 smallmargin\">\n            {{(userInfo | async)?.username}}<span class=\"mat-small\">#{{(userInfo | async)?.discriminator}}</span>\n          </h1>\n          <p class=\"mat-h3\">\n            Characters: {{(userStats | async)?.numCharacters}}<br>\n            Customizations: {{(userStats | async)?.numCustomizations}}\n          </p>\n        </div>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n\n  <div class=\"spacer-8px\"></div>\n\n  <mat-grid-list [cols]=\"numCols\" rowHeight=\"5:6\" gutterSize=\"8\" (window:resize)=\"onResize($event)\">\n    <mat-grid-tile class=\"character-tile\" *ngFor=\"let character of characters | async\">\n      <div class=\"character-name-underlay mat-typography character-image\">\n        <p class=\"ignore-theme\" *ngIf=\"!getImage(character)\">\n          {{getInitials(character.name)}}\n        </p>\n      </div>\n      <img class=\"character-image\" [src]=\"getImage(character)\" [alt]=\"'Image for ' + character.name\"\n           *ngIf=\"getImage(character)\">\n      <div class=\"character-meta\">\n        <div class=\"mat-typography ignore-theme character-text\">\n          <h3>\n            {{character.name}}\n          </h3>\n          <p>\n            {{getDescription(character)}}\n          </p>\n        </div>\n        <div class=\"mat-typography ignore-theme character-actions\">\n          <a mat-icon-button matTooltip=\"View Sheet\"\n             [href]=\"getUpstreamURL(character.upstream)\" target=\"_blank\">\n            <mat-icon>menu_book</mat-icon>\n          </a>\n          <button mat-icon-button\n                  [matTooltip]=\"character.import_version < MIN_CHARACTER_AUTOMATION_VERSION ? 'Please !update your character to use Automation.' : 'Edit Attacks'\"\n                  (click)=\"beginEditAttacks(character)\">\n            <mat-icon>build</mat-icon>\n          </button>\n        </div>\n      </div>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Observable, of} from 'rxjs';\nimport {CharacterMeta} from '../../schemas/Character';\nimport {UserInfo, UserStats} from '../../schemas/UserInfo';\nimport {getUser} from '../APIHelper';\nimport {DashboardService} from '../dashboard.service';\nimport {AttackEditorDialog} from './attack-editor-dialog/attack-editor-dialog.component';\nimport {BreakpointObserver} from '@angular/cdk/layout';\nimport {BreakpointBaseComponent} from '../../shared/breakpoints';\n\n@Component({\n  selector: 'avr-characters',\n  templateUrl: './characters.component.html',\n  styleUrls: ['./characters.component.css']\n})\nexport class CharactersComponent extends BreakpointBaseComponent implements OnInit {\n\n  userInfo: Observable<UserInfo>;\n  userStats: Observable<UserStats>;\n  characters: Observable<CharacterMeta[]>;\n  numCols: number;\n\n  MIN_CHARACTER_AUTOMATION_VERSION = 17;\n\n  constructor(private dashboardService: DashboardService,\n    private dialog: MatDialog,\n    private bp: BreakpointObserver) {\n      super(bp);\n    }\n\n  ngOnInit() {\n    this.getUserInfo();\n    this.getUserStats();\n    this.getCharacters();\n    this.onResize(null);\n  }\n\n  getUserInfo(): void {\n    this.userInfo = of(getUser());\n  }\n\n  getUserStats(): void {\n    this.userStats = this.dashboardService.getUserStats();\n  }\n\n  getCharacters(): void {\n    this.characters = this.dashboardService.getCharacterMeta();\n  }\n\n  getInitials(name: string): string {\n    const match = name.match(/\\b\\w/g) || [];\n    return ((match.shift() || '') + (match.pop() || '')).toUpperCase();\n  }\n\n  getImage(character: CharacterMeta): string {\n    return character.overrides.image || character.image;\n  }\n\n  getDescription(character: CharacterMeta): string {\n    return character.overrides.desc || character.description;\n  }\n\n  getUpstreamURL(upstream: string): string {\n    if (upstream.startsWith('dicecloud-')) {\n      return `https://dicecloud.com/character/${upstream.slice(10)}`;\n    } else if (upstream.startsWith('google-')) {\n      return `https://docs.google.com/spreadsheets/d/${upstream.slice(7)}`;\n    } else if (upstream.startsWith('beyond-')) {\n      return `https://ddb.ac/characters/${upstream.slice(7)}`;\n    }\n    return '';\n  }\n\n  // Attack Editor\n  beginEditAttacks(character: CharacterMeta) {\n    if (character.import_version < this.MIN_CHARACTER_AUTOMATION_VERSION) {\n      return;\n    }\n\n    this.dialog.open(AttackEditorDialog, {\n      width: '95%',\n      disableClose: true,\n      data: character,\n      panelClass: 'automation-overlay'\n    })\n      .afterClosed().subscribe(result => {\n      console.log(result);\n    });\n  }\n\n  // Responsiveness\n  onResize(_) {\n    // reflects Material Design's breakpoints (https://material.io/design/layout/responsive-layout-grid.html#breakpoints)\n    if (window.innerWidth < 600) {\n      this.numCols = 1; // xsmall\n    } else if (window.innerWidth < 1024) {\n      this.numCols = 2; // small\n    } else if (window.innerWidth < 1440) {\n      this.numCols = 4; // medium\n    } else {\n      this.numCols = 6; // large\n    }\n  }\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'avr-edit-dialog',\n  templateUrl: './edit-dialog.component.html',\n  styleUrls: ['./edit-dialog.component.css']\n})\nexport class EditDialog implements OnInit {\n\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>New {{data.type}}...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field *ngIf=\"data.showName\">\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Value\" [(ngModel)]=\"value\"></textarea>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, value: value}\">Done</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Editing {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <mat-form-field>\n    <textarea matInput [(ngModel)]=\"data.content\" spellcheck=false></textarea>\n  </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"data.content\">Done</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'avr-new-dialog',\n  templateUrl: './new-dialog.component.html',\n  styleUrls: ['./new-dialog.component.css']\n})\nexport class NewDialog implements OnInit {\n\n  name: string;\n  value: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\nimport {Alias, Snippet, UserVar} from '../../schemas/Customization';\nimport {Observable, of} from 'rxjs';\nimport {defaultOptions, defaultTextOptions} from '../APIHelper';\nimport {catchError} from 'rxjs/operators';\n\nconst aliasUrl = `${environment.apiURL}/customizations/aliases`;\nconst snippetUrl = `${environment.apiURL}/customizations/snippets`;\nconst uvarUrl = `${environment.apiURL}/customizations/uvars`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomizationService {\n\n\n  constructor(private http: HttpClient) {\n  }\n\n  getAliases(): Observable<Alias[]> {\n    return this.http.get<Alias[]>(aliasUrl, defaultOptions());\n  }\n\n  updateAlias(alias: { name: string, commands: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${aliasUrl}/${alias.name}`, alias, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateAlias'))\n      );\n  }\n\n  deleteAlias(alias: Alias): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${aliasUrl}/${alias.name}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteAlias'))\n      );\n  }\n\n  getSnippets(): Observable<Snippet[]> {\n    return this.http.get<Snippet[]>(snippetUrl, defaultOptions());\n  }\n\n  updateSnippet(snippet: { name: string, snippet: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${snippetUrl}/${snippet.name}`, snippet, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateSnippet'))\n      );\n  }\n\n  deleteSnippet(snippet: Snippet): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${snippetUrl}/${snippet.name}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteSnippet'))\n      );\n  }\n\n  getUvars(): Observable<UserVar[]> {\n    return this.http.get<UserVar[]>(uvarUrl, defaultOptions());\n  }\n\n  updateUvar(uvar: { name: string, value: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${uvarUrl}/${uvar.name}`, uvar, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateUvar'))\n      );\n  }\n\n  deleteUvar(uvar: UserVar): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${uvarUrl}/${uvar.name}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteUvar'))\n      );\n  }\n\n  private handleTextError<T>(operation = 'operation') {\n    return (error: any): Observable<string> => {\n      console.error(error); // log to console instead\n\n      return of(`${operation} failed: ${error.error}`);\n    };\n  }\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\" sticky>\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n    <td mat-cell *matCellDef=\"let alias\">{{alias.name}}</td>\n    <td mat-footer-cell *matFooterCellDef>Create New</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"commands\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Commands</th>\n    <td mat-cell *matCellDef=\"let alias\">\n      <pre>{{alias.commands}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\" stickyEnd>\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let alias\">\n      <button mat-icon-button (click)=\"beginEdit(alias)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(alias)\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Alias} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\nimport {CustomizationService} from '../customization.service';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\n\n@Component({\n  selector: 'avr-alias-list',\n  templateUrl: './alias-list.component.html',\n  styleUrls: ['./alias-list.component.css']\n})\nexport class AliasListComponent implements OnInit {\n\n  @Input() data: Alias[];\n\n  columnsToDisplay: string[] = ['name', 'commands', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private custService: CustomizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    this.custService.getAliases()\n      .subscribe(aliases => this.data = aliases);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: true, type: 'alias'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.name || !result.value) {\n          this.snackBar.open('Name or commands cannot be empty.');\n          return;\n        }\n        let data = {name: result.name, commands: result.value};\n        if (data.name.includes(' ')) {\n          this.snackBar.open('Name cannot contain whitespace.');\n          return;\n        }\n        this.post(data);\n      }\n    });\n  }\n\n  beginEdit(alias: Alias) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: alias.name, content: alias.commands},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        alias.commands = result;\n        this.post(alias);\n      }\n    });\n  }\n\n  confirmDelete(alias: Alias) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: alias.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(alias);\n      }\n    });\n  }\n\n  post(alias: { name: string, commands: string }) {\n    // HTTP POST /customizations/aliases/:name\n    this.custService.updateAlias(alias)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(alias: Alias) {\n    // HTTP DELETE /customizations/aliases/:name\n    this.custService.deleteAlias(alias)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\" sticky>\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n    <td mat-cell *matCellDef=\"let snippet\">{{snippet.name}}</td>\n    <td mat-footer-cell *matFooterCellDef>Create New</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"snippet\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Value</th>\n    <td mat-cell *matCellDef=\"let snippet\">\n      <pre>{{snippet.snippet}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\" stickyEnd>\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let snippet\">\n      <button mat-icon-button (click)=\"beginEdit(snippet)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(snippet)\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Snippet} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {CustomizationService} from '../customization.service';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\n\n@Component({\n  selector: 'avr-snippet-list',\n  templateUrl: './snippet-list.component.html',\n  styleUrls: ['./snippet-list.component.css']\n})\nexport class SnippetListComponent implements OnInit {\n\n  @Input() data: Snippet[];\n\n  columnsToDisplay: string[] = ['name', 'snippet', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private custService: CustomizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    this.custService.getSnippets()\n      .subscribe(snippets => this.data = snippets);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: true, type: 'snippet'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.name || !result.value) {\n          this.snackBar.open('Name or value cannot be empty.');\n          return;\n        }\n        let data = {name: result.name, snippet: result.value};\n        if (data.name.includes(' ')) {\n          this.snackBar.open('Name cannot contain whitespace.');\n          return;\n        }\n        if (data.name.length < 2) {\n          this.snackBar.open('Name must be at least 2 characters.');\n          return;\n        }\n        this.post(data);\n      }\n    });\n  }\n\n  beginEdit(snippet: Snippet) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: snippet.name, content: snippet.snippet},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        snippet.snippet = result;\n        this.post(snippet);\n      }\n    });\n  }\n\n  confirmDelete(snippet: Snippet) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: snippet.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(snippet);\n      }\n    });\n  }\n\n  post(snippet: { name: string, snippet: string }) {\n    // HTTP POST /customizations/snippets/:name\n    this.custService.updateSnippet(snippet)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(snippet: Snippet) {\n    // HTTP DELETE /customizations/snippets/:name\n    this.custService.deleteSnippet(snippet)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\" sticky>\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n    <td mat-cell *matCellDef=\"let uvar\">{{uvar.name}}</td>\n    <td mat-footer-cell *matFooterCellDef>Create New</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"value\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Value</th>\n    <td mat-cell *matCellDef=\"let uvar\">\n      <pre>{{uvar.value}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\" stickyEnd>\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let uvar\">\n      <button mat-icon-button (click)=\"beginEdit(uvar)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(uvar)\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {UserVar} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {CustomizationService} from '../customization.service';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\n\n@Component({\n  selector: 'avr-uvar-list',\n  templateUrl: './uvar-list.component.html',\n  styleUrls: ['./uvar-list.component.css']\n})\nexport class UvarListComponent implements OnInit {\n\n  @Input() data: UserVar[];\n\n  columnsToDisplay: string[] = ['name', 'value', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private custService: CustomizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    this.custService.getUvars()\n      .subscribe(uvars => this.data = uvars);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: true, type: 'uvar'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.name || !result.value) {\n          this.snackBar.open('Name or value cannot be empty.');\n          return;\n        }\n        let data = {name: result.name, value: result.value};\n        this.post(data);\n      }\n    });\n  }\n\n  beginEdit(uvar: UserVar) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: uvar.name, content: uvar.value},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        uvar.value = result;\n        this.post(uvar);\n      }\n    });\n  }\n\n  confirmDelete(uvar: UserVar) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: uvar.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(uvar);\n      }\n    });\n  }\n\n  post(uvar: { name: string, value: string }) {\n    // HTTP POST /customizations/uvars/:name\n    this.custService.updateUvar(uvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(uvar: UserVar) {\n    // HTTP DELETE /customizations/uvars/:name\n    this.custService.deleteUvar(uvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {CharVar, Customizations} from '../../schemas/Customization';\nimport {DashboardService} from '../dashboard.service';\nimport {Observable} from 'rxjs';\n\n@Component({\n  selector: 'avr-customization',\n  templateUrl: './customization.component.html',\n  styleUrls: ['./customization.component.css']\n})\nexport class CustomizationComponent implements OnInit {\n\n  cvars: CharVar[];\n  customizations: Observable<Customizations>;\n\n  constructor(private dashboardService: DashboardService) {\n  }\n\n  ngOnInit() {\n    this.getCustomizations();\n  }\n\n  getCustomizations(): void {\n    this.customizations = this.dashboardService.getCustomizations();\n  }\n\n}\n","<div class=\"container\">\n  <mat-card>\n    <mat-tab-group>\n      <mat-tab label=\"Aliases\">\n        <avr-alias-list [data]=\"(customizations | async)?.aliases\"></avr-alias-list>\n      </mat-tab>\n      <mat-tab label=\"Snippets\">\n        <avr-snippet-list [data]=\"(customizations | async)?.snippets\"></avr-snippet-list>\n      </mat-tab>\n      <mat-tab label=\"Uvars\">\n        <avr-uvar-list [data]=\"(customizations | async)?.uvars\"></avr-uvar-list>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-card>\n</div>\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {environment} from '../../../environments/environment';\nimport {GlobalVar} from '../../schemas/Customization';\nimport {defaultOptions, defaultTextOptions} from '../APIHelper';\n\nconst gvarUrl = `${environment.apiURL}/customizations/gvars`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GvarService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getAllGvars(): Observable<{ owned: GlobalVar[], editable: GlobalVar[] }> {\n    return this.http.get<{ owned: GlobalVar[], editable: GlobalVar[] }>(gvarUrl, defaultOptions());\n  }\n\n  getGvars(owned: boolean): Observable<GlobalVar[]> {\n    return this.http.get<GlobalVar[]>(`${gvarUrl}/${owned ? 'owned' : 'editable'}`, defaultOptions());\n  }\n\n  newGvar(gvar: { value: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${gvarUrl}`, gvar, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('newGvar'))\n      );\n  }\n\n  getGvar(key: string): Observable<GlobalVar | boolean> {\n    return this.http.get<GlobalVar>(`${gvarUrl}/${key}`, defaultOptions())\n      .pipe(\n        catchError(_ => of(false))\n      );\n  }\n\n  updateGvar(gvar: GlobalVar): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${gvarUrl}/${gvar.key}`, gvar, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateGvar'))\n      );\n  }\n\n  deleteGvar(gvar: GlobalVar): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${gvarUrl}/${gvar.key}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteGvar'))\n      );\n  }\n\n  private handleTextError<T>(operation = 'operation') {\n    return (error: any): Observable<string> => {\n      console.error(error); // log to console instead\n\n      return of(`${operation} failed: ${error.error}`);\n    };\n  }\n\n}\n","<table mat-table [dataSource]=\"sortedGvars(data)\" class=\"list-table\">\n  <ng-container matColumnDef=\"name\" sticky>\n    <th mat-header-cell *matHeaderCellDef>ID</th>\n    <td mat-cell *matCellDef=\"let gvar\">{{gvar.key}}</td>\n    <td mat-footer-cell *matFooterCellDef>{{owned ? \"Create New\" : \"\"}}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"value\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Value</th>\n    <td mat-cell *matCellDef=\"let gvar\">\n      <pre>{{gvar.value}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\" stickyEnd>\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let gvar\">\n      <button mat-icon-button (click)=\"beginEdit(gvar)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(gvar)\" *ngIf=\"owned\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\" *ngIf=\"owned\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <div *ngIf=\"owned\">\n    <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n  </div>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {GlobalVar} from '../../../schemas/Customization';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\nimport {GvarService} from '../gvar.service';\n\n@Component({\n  selector: 'avr-gvar-list',\n  templateUrl: './gvar-list.component.html',\n  styleUrls: ['./gvar-list.component.css']\n})\nexport class GvarListComponent implements OnInit {\n\n  @Input() data: GlobalVar[];\n  @Input() owned: boolean;\n\n  columnsToDisplay: string[] = ['name', 'value', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private gvarService: GvarService) {\n  }\n\n  ngOnInit() {\n  }\n\n  sortedGvars(gvars: GlobalVar[]) {\n    return gvars?.sort((a, b) => a.key.localeCompare(b.key));\n  }\n\n  refresh() {\n    // HTTP GET /customizations/gvars/[owned|editable]\n    this.gvarService.getGvars(this.owned)\n      .subscribe(gvars => this.data = gvars);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: false, type: 'gvar'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.value) {\n          this.snackBar.open('Value cannot be empty.');\n          return;\n        }\n        let data = {value: result.value};\n        this.new(data);\n      }\n    });\n  }\n\n  beginEdit(gvar: GlobalVar) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: gvar.key, content: gvar.value},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        gvar.value = result;\n        this.post(gvar);\n      }\n    });\n  }\n\n  confirmDelete(gvar: GlobalVar) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: gvar.key}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(gvar);\n      }\n    });\n  }\n\n  new(gvar: { value: string }) {\n    // HTTP POST /customizations/gvars\n    this.gvarService.newGvar(gvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  post(gvar: GlobalVar) {\n    // HTTP POST /customizations/gvars/:key\n    this.gvarService.updateGvar(gvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(gvar: GlobalVar) {\n    // HTTP DELETE /customizations/gvars/:key\n    this.gvarService.deleteGvar(gvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n}\n","<mat-form-field class=\"lookup-id-input\">\n  <input matInput placeholder=\"Gvar ID\" #lookupIdInput>\n</mat-form-field>\n<button mat-flat-button color=\"primary\" (click)=\"lookupGvar(lookupIdInput.value)\">Lookup</button>\n\n<div *ngIf=\"activeGvar\">\n  <p>\n    {{activeGvar.key}}\n  </p>\n  <p>\n    <i>Owned by: {{activeGvar.owner_name}}</i>\n  </p>\n\n  <mat-divider></mat-divider>\n\n  <div class=\"gvar-value-container\">\n    <pre class=\"gvar-value-display\">{{activeGvar.value}}</pre>\n  </div>\n</div>\n\n<div *ngIf=\"error\">\n  <p style=\"color: red\">\n    {{error}}\n  </p>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {GlobalVar} from '../../../schemas/Customization';\nimport {GvarService} from '../gvar.service';\n\n@Component({\n  selector: 'avr-gvar-lookup',\n  templateUrl: './gvar-lookup.component.html',\n  styleUrls: ['./gvar-lookup.component.css']\n})\nexport class GvarLookupComponent implements OnInit {\n\n  activeGvar: GlobalVar;\n  error: string;\n\n  constructor(private gvarService: GvarService, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.checkForLookupQuery();\n  }\n\n  lookupGvar(key: string) {\n    key = key.trim();\n    console.log(key);\n\n    // set query param for permalinking\n    const searchParams = new URLSearchParams(window.location.search);\n    searchParams.set('lookup', key);\n    const newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();\n    history.pushState(null, '', newRelativePathQuery);\n\n    // HTTP GET /customizations/gvars/:key\n    this.gvarService.getGvar(key)\n      .subscribe(gvar => {\n        this.activeGvar = null;\n        this.error = null;\n        if (gvar === false) {\n          this.error = 'Failed to get gvar.';\n        } else {\n          this.activeGvar = gvar as GlobalVar;\n        }\n      });\n  }\n\n  checkForLookupQuery() {\n    const lookupId = this.route.snapshot.queryParamMap.get('lookup');\n    if (lookupId) {\n      this.lookupGvar(lookupId);\n    }\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {GlobalVar} from '../../schemas/Customization';\nimport {GvarService} from './gvar.service';\n\n@Component({\n  selector: 'avr-gvars',\n  templateUrl: './gvars.component.html',\n  styleUrls: ['./gvars.component.css']\n})\nexport class GvarsComponent implements OnInit {\n\n  gvars: Observable<{ owned: GlobalVar[]; editable: GlobalVar[] }>;\n  forcedTabIndex: number;\n\n  constructor(private gvarService: GvarService, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.getCustomizations();\n    this.checkForLookupQuery();\n  }\n\n  getCustomizations(): void {\n    this.gvars = this.gvarService.getAllGvars();\n  }\n\n  checkForLookupQuery(): void {\n    const lookupId = this.route.snapshot.queryParamMap.get('lookup');\n    if (lookupId) {\n      this.forcedTabIndex = 2;\n    }\n  }\n}\n","<div class=\"container\">\n  <mat-card>\n    <mat-tab-group [(selectedIndex)]=\"forcedTabIndex\">\n      <mat-tab label=\"Owned\">\n        <avr-gvar-list [data]=\"(gvars | async)?.owned\" [owned]=\"true\"></avr-gvar-list>\n      </mat-tab>\n      <mat-tab label=\"Editable\">\n        <avr-gvar-list [data]=\"(gvars | async)?.editable\" [owned]=\"false\"></avr-gvar-list>\n      </mat-tab>\n      <mat-tab label=\"Lookup\">\n        <avr-gvar-lookup></avr-gvar-lookup>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-card>\n</div>\n","import {isPlatformServer} from '@angular/common';\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot} from '@angular/router';\nimport {isLoggedIn, navigateToDiscordOauth} from './SecurityHelper';\nimport {setLocalStorage} from './shared/StorageUtils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    private router: Router,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n    if (isLoggedIn()) {\n      return true;\n    } else if (isPlatformServer(this.platformId)) {\n      // servers cannot do auth\n      // try and route to the ssr module - if it doesn't exist this will render the home page instead\n      this.router.navigateByUrl(`/ssr${state.url}`);\n      return false;\n    } else {\n      // the discord auth endpoint requires an exact redirect_uri (no after param) so we store where the user wanted to go in localStorage\n      setLocalStorage('after-login-redirect', state.url);\n      navigateToDiscordOauth();\n      // > Note: The guard can also tell the router to navigate elsewhere, effectively canceling the current navigation.\n      // > When doing so inside a guard, the guard should return false;\n      // https://angular.io/guide/router#milestone-5-route-guards\n      return false;\n    }\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot) {\n    return this.canActivate(childRoute, state);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {DashboardComponent} from './dashboard.component';\nimport {CharactersComponent} from './characters/characters.component';\nimport {CustomizationComponent} from './customization/customization.component';\nimport {GvarsComponent} from './gvars/gvars.component';\nimport {AuthGuard} from '../auth.guard';\n\n\nconst dashboardRoutes: Routes = [\n  {\n    path: '', canActivate: [AuthGuard], component: DashboardComponent, children: [\n      {path: 'characters', component: CharactersComponent},\n      {path: 'aliases', component: CustomizationComponent},\n      {path: 'gvars', component: GvarsComponent},\n      {path: 'homebrew', loadChildren: () => import('./homebrew/homebrew.module').then(mod => mod.HomebrewModule)},\n      {path: 'workshop', loadChildren: () => import('./workshop/workshop.module').then(mod => mod.WorkshopModule)},\n      {path: '', redirectTo: 'characters', pathMatch: 'full'}\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(dashboardRoutes)],\n  exports: [RouterModule]\n})\nexport class DashboardRoutingModule {\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexModule} from '@angular/flex-layout';\nimport {FormsModule} from '@angular/forms';\nimport {MaterialModule} from '../material/material.module';\nimport {AutomationEditorModule} from '../shared/automation-editor/automation-editor.module';\nimport {AttackEditorDialog} from './characters/attack-editor-dialog/attack-editor-dialog.component';\nimport {CharactersComponent} from './characters/characters.component';\nimport {ConfirmDeleteDialog} from './confirm-delete-dialog/confirm-delete-dialog.component';\nimport {AliasListComponent} from './customization/alias-list/alias-list.component';\nimport {CustomizationComponent} from './customization/customization.component';\nimport {SnippetListComponent} from './customization/snippet-list/snippet-list.component';\nimport {UvarListComponent} from './customization/uvar-list/uvar-list.component';\nimport {DashboardRoutingModule} from './dashboard-routing.module';\nimport {DashboardComponent} from './dashboard.component';\nimport {EditDialog} from './edit-dialog/edit-dialog.component';\nimport {GvarListComponent} from './gvars/gvar-list/gvar-list.component';\nimport {GvarLookupComponent} from './gvars/gvar-lookup/gvar-lookup.component';\nimport {GvarsComponent} from './gvars/gvars.component';\nimport {NewDialog} from './new-dialog/new-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    DashboardRoutingModule,\n    FlexModule,\n    AutomationEditorModule,\n  ],\n  declarations: [\n    DashboardComponent,\n    CharactersComponent,\n    CustomizationComponent,\n    AliasListComponent,\n    SnippetListComponent,\n    UvarListComponent,\n    GvarsComponent,\n    ConfirmDeleteDialog,\n    EditDialog,\n    NewDialog,\n    AttackEditorDialog,\n    GvarListComponent,\n    GvarLookupComponent,\n  ]\n})\n\nexport class DashboardModule {\n}\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {environment} from '../../environments/environment';\nimport {Attack, CharacterMeta} from '../schemas/Character';\nimport {Customizations} from '../schemas/Customization';\nimport {UserStats} from '../schemas/UserInfo';\nimport {ApiResponse, defaultErrorHandler, defaultOptions} from './APIHelper';\n\nconst userInfoUrl = `${environment.apiURL}/user`;\nconst userStatsUrl = `${environment.apiURL}/userStats`;\n\nconst characterBaseUrl = `${environment.apiURL}/characters`;\nconst characterMetaUrl = `${characterBaseUrl}/meta`;\n\nconst customizationsUrl = `${environment.apiURL}/customizations`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n\n\n  constructor(private http: HttpClient) {\n  }\n\n  getUserStats(): Observable<UserStats> {\n    return this.http.get<UserStats>(userStatsUrl, defaultOptions());\n  }\n\n  getCharacterMeta(): Observable<CharacterMeta[]> {\n    return this.http.get<CharacterMeta[]>(characterMetaUrl, defaultOptions());\n  }\n\n  // character attack stuff\n  getCharacterAttacks(upstream: string): Observable<Attack[]> {\n    const endpt = `${characterBaseUrl}/${upstream}/attacks`;\n    return this.http.get<Attack[]>(endpt, defaultOptions());\n  }\n\n  getTemplateAttacks(): Observable<Attack[]> {\n    return this.http.get<Attack[]>(`${characterBaseUrl}/attacks/srd`, defaultOptions());\n  }\n\n  putCharacterAttacks(upstream: string, attacks: Attack[]): Observable<ApiResponse<string>> {\n    const endpt = `${characterBaseUrl}/${upstream}/attacks`;\n    return this.http.put<ApiResponse<string>>(endpt, attacks, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  validateAttackJSON(attacks: Attack | Attack[]): Observable<ApiResponse<string>> {\n    const endpt = `${characterBaseUrl}/attacks/validate`;\n    return this.http.post<ApiResponse<string>>(endpt, attacks, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  getCustomizations(): Observable<Customizations> {\n    return this.http.get<Customizations>(customizationsUrl, defaultOptions());\n  }\n}\n","<h2 mat-dialog-title>Copying SRD object...</h2>\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"templates\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Search...\" [(ngModel)]=\"search\" (keyup)=\"filterTemplates()\">\n    </mat-form-field>\n  </div>\n  <div class=\"results\" *ngIf=\"filteredTemplates?.length\">\n    <mat-list>\n      <mat-list-item *ngFor=\"let obj of filteredTemplates\" class=\"hoverable pointer\"\n                     (click)=\"select(obj)\">\n        {{data.namer(obj)}}\n      </mat-list-item>\n    </mat-list>\n  </div>\n  <div class=\"results\" *ngIf=\"!filteredTemplates?.length\">\n    No results found.\n  </div>\n</mat-dialog-content>\n\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"!templates\">\n  <mat-spinner [diameter]=\"24\"></mat-spinner>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\n\nclass SRDDialogData<T> {\n  getter: () => Observable<T[]>;\n  namer: (obj: T) => string;\n}\n\n@Component({\n  selector: 'avr-srd-copy-dialog',\n  templateUrl: './srd-copy-dialog.component.html'\n})\nexport class SRDCopyDialog<T> implements OnInit {\n\n  search = '';\n  templates: T[];\n  filteredTemplates: T[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: SRDDialogData<T>,\n              private dialogRef: MatDialogRef<SRDCopyDialog<T>>) {\n  }\n\n  ngOnInit() {\n    this.getTemplates();\n  }\n\n  select(obj: T) {\n    this.dialogRef.close(obj);\n  }\n\n  filterTemplates() {\n    this.filteredTemplates = this.templates.filter(\n      obj => this.data.namer(obj).toLowerCase().includes(this.search.toLowerCase())\n    );\n  }\n\n  getTemplates() {\n    this.data.getter()\n      .subscribe(objs => {\n        this.templates = objs;\n        this.filterTemplates();\n      });\n  }\n\n}\n","import { Component } from \"@angular/core\";\nimport { MatSnackBar, MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS } from \"@angular/material/snack-bar\";\nimport { Inject } from '@angular/core';  \n\n\n@Component({\n  selector: 'validation-snackbar',\n  templateUrl: 'validation-snackbar.component.html',\n  styleUrls: ['./validation-snackbar.component.css']\n})\n\nexport class ValidationSnackbar { \n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: any,\n              public snackBar: MatSnackBar) {\n  }\n}\n","<div class=\"mat-simple-snackbar\">\n  <div [innerHTML]=\"data.html\" class=\"validation-error\"></div>\n  <div class=\"mat-simple-snackbar-action ng-star-inserted\">\n    <button mat-raised-button (click)=\"snackBar.dismiss()\" \n            class=\"mat-focus-indicator mat-button mat-button-base\">\n      Close\n    </button>\n  </div>\n</div>"]}