{"version":3,"sources":["webpack:///src/app/shared/dialogs/json-import-dialog/json-import-dialog.component.ts","webpack:///src/app/shared/dialogs/json-import-dialog/json-import-dialog.component.html","webpack:///src/app/dashboard/confirm-delete-dialog/confirm-delete-dialog.component.ts","webpack:///src/app/dashboard/confirm-delete-dialog/confirm-delete-dialog.component.html","webpack:///src/app/dashboard/dashboard.service.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/schemas/Character.ts","webpack:///src/app/dashboard/characters/attack-editor-dialog/attack-editor-dialog.component.html","webpack:///src/app/dashboard/characters/attack-editor-dialog/attack-editor-dialog.component.ts","webpack:///src/app/dashboard/characters/characters.component.html","webpack:///src/app/dashboard/characters/characters.component.ts","webpack:///src/app/dashboard/customization/customization.service.ts","webpack:///src/app/dashboard/edit-dialog/edit-dialog.component.ts","webpack:///src/app/dashboard/new-dialog/new-dialog.component.html","webpack:///src/app/dashboard/edit-dialog/edit-dialog.component.html","webpack:///src/app/dashboard/new-dialog/new-dialog.component.ts","webpack:///src/app/dashboard/customization/alias-list/alias-list.component.html","webpack:///src/app/dashboard/customization/alias-list/alias-list.component.ts","webpack:///src/app/dashboard/customization/snippet-list/snippet-list.component.html","webpack:///src/app/dashboard/customization/snippet-list/snippet-list.component.ts","webpack:///src/app/dashboard/customization/uvar-list/uvar-list.component.html","webpack:///src/app/dashboard/customization/uvar-list/uvar-list.component.ts","webpack:///src/app/dashboard/customization/customization.component.ts","webpack:///src/app/dashboard/customization/customization.component.html","webpack:///src/app/dashboard/gvars/gvar.service.ts","webpack:///src/app/dashboard/gvars/gvar-list/gvar-list.component.html","webpack:///src/app/dashboard/gvars/gvar-list/gvar-list.component.ts","webpack:///src/app/dashboard/gvars/gvar-lookup/gvar-lookup.component.html","webpack:///src/app/dashboard/gvars/gvar-lookup/gvar-lookup.component.ts","webpack:///src/app/dashboard/gvars/gvars.component.ts","webpack:///src/app/dashboard/gvars/gvars.component.html","webpack:///src/app/auth.guard.ts","webpack:///src/app/dashboard/dashboard-routing.module.ts","webpack:///src/app/dashboard/dashboard.module.ts","webpack:///src/app/shared/dialogs/srd-copy-dialog/srd-copy-dialog.component.ts","webpack:///src/app/shared/dialogs/srd-copy-dialog/srd-copy-dialog.component.html","webpack:///src/app/shared/dialogs/json-export-dialog/json-export-dialog.component.ts","webpack:///src/app/shared/dialogs/json-export-dialog/json-export-dialog.component.html"],"names":["JSONImportDialog","dialogRef","input","loading","parsed","this","error","JSON","parse","data","e","validator","close","validateAndExit","ConfirmDeleteDialog","apiURL","userStatsUrl","characterBaseUrl","characterMetaUrl","customizationsUrl","DashboardService","http","get","upstream","endpt","attacks","put","pipe","_","post","err","console","success","result","router","dashboardService","navigate","logout","Attack","name","automation","proper","verb","_v","character","charService","dialog","saveButtonValue","saveButtonDisabled","loadAttacks","getCharacterAttacks","subscribe","allAttacks","atk","push","selectedAttack","open","width","disableClose","getter","getTemplateAttacks","namer","a","afterClosed","attack","index","indexOf","splice","putCharacterAttacks","errorValue","Array","validateAttackJSON","log","componentInstance","saveAndExit","MIN_CHARACTER_AUTOMATION_VERSION","getUserInfo","getUserStats","getCharacters","onResize","userInfo","of","userStats","characters","getCharacterMeta","match","shift","pop","toUpperCase","overrides","image","desc","description","startsWith","slice","import_version","window","innerWidth","numCols","aliasUrl","environment","snippetUrl","uvarUrl","alias","catchError","handleTextError","snippet","uvar","operation","EditDialog","NewDialog","snackBar","custService","columnsToDisplay","getAliases","aliases","showName","type","value","commands","includes","content","updateAlias","refresh","deleteAlias","getSnippets","snippets","length","updateSnippet","deleteSnippet","getUvars","uvars","updateUvar","deleteUvar","CustomizationComponent","getCustomizations","customizations","gvarUrl","owned","gvar","key","gvarService","getGvars","gvars","newGvar","updateGvar","deleteGvar","GvarLookupComponent","route","checkForLookupQuery","trim","searchParams","URLSearchParams","location","search","set","newRelativePathQuery","pathname","toString","history","pushState","getGvar","activeGvar","lookupId","snapshot","queryParamMap","lookupGvar","GvarsComponent","getAllGvars","forcedTabIndex","next","state","url","dashboardRoutes","path","canActivate","component","children","loadChildren","then","mod","HomebrewModule","WorkshopModule","redirectTo","pathMatch","DashboardRoutingModule","forChild","DashboardModule","SRDCopyDialog","getTemplates","obj","filteredTemplates","templates","filter","toLowerCase","objs","filterTemplates","JSONExportDialog","jsonData","stringify","inputElement","select","document","execCommand","setSelectionRange","copy"],"mappings":"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","file":"x","sourcesContent":["import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\n@Component({\n  selector: 'avr-json-import-dialog',\n  templateUrl: './json-import-dialog.component.html',\n  styleUrls: ['./json-import-dialog.component.css']\n})\nexport class JSONImportDialog implements OnInit {\n\n  data: string;\n  error: string;\n  loading = false;\n\n  constructor(private dialogRef: MatDialogRef<JSONImportDialog>,\n              @Inject(MAT_DIALOG_DATA) public input: {\n                validator: (data: object) => void\n              }) {\n  }\n\n  ngOnInit() {\n  }\n\n  validateAndExit() {\n    this.loading = true;\n    this.error = null;\n\n    let parsed;\n    try {\n      parsed = JSON.parse(this.data);\n    } catch (e) {\n      this.error = 'Invalid data format';\n      this.loading = false;\n      return;\n    }\n\n    if (this.input.validator) {\n      this.input.validator(parsed);\n    } else {\n      this.dialogRef.close(parsed);\n    }\n  }\n}\n","<h2 mat-dialog-title>Importing from JSON...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Paste your JSON here. This should be either an object or list exported from this site.\n  </p>\n  <div class=\"form-container\">\n    <mat-form-field>\n      <textarea matInput placeholder=\"JSON\" rows=\"10\" [(ngModel)]=\"data\"></textarea>\n    </mat-form-field>\n  </div>\n  <mat-error *ngIf=\"error\">{{error}}</mat-error>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button (click)=\"validateAndExit()\">\n    Import\n  </button>\n  <mat-spinner [diameter]=\"18\" *ngIf=\"loading\"></mat-spinner>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\ninterface ConfirmDeleteDialogData {\n  name: string;\n  message?: string;\n}\n\n@Component({\n  selector: 'avr-confirm-delete-dialog',\n  templateUrl: './confirm-delete-dialog.component.html',\n  styleUrls: ['./confirm-delete-dialog.component.css']\n})\nexport class ConfirmDeleteDialog implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: ConfirmDeleteDialogData) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>Deleting {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Are you sure you want to delete {{data.name}}?\n  </p>\n  <p *ngIf=\"data.message\">\n    {{data.message}}\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>No</button>\n  <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Yes</button>\n</mat-dialog-actions>\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {environment} from '../../environments/environment';\nimport {Attack, CharacterMeta} from '../schemas/Character';\nimport {Customizations} from '../schemas/Customization';\nimport {UserInfo, UserStats} from '../schemas/UserInfo';\nimport {defaultOptions, defaultTextOptions} from './APIHelper';\n\nconst userInfoUrl = `${environment.apiURL}/user`;\nconst userStatsUrl = `${environment.apiURL}/userStats`;\n\nconst characterBaseUrl = `${environment.apiURL}/characters`;\nconst characterMetaUrl = `${characterBaseUrl}/meta`;\n\nconst customizationsUrl = `${environment.apiURL}/customizations`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n\n\n  constructor(private http: HttpClient) {\n  }\n\n  getUserStats(): Observable<UserStats> {\n    return this.http.get<UserStats>(userStatsUrl, defaultOptions());\n  }\n\n  getCharacterMeta(): Observable<CharacterMeta[]> {\n    return this.http.get<CharacterMeta[]>(characterMetaUrl, defaultOptions());\n  }\n\n  // character attack stuff\n  getCharacterAttacks(upstream: string): Observable<Attack[]> {\n    const endpt = `${characterBaseUrl}/${upstream}/attacks`;\n    return this.http.get<Attack[]>(endpt, defaultOptions());\n  }\n\n  getTemplateAttacks(): Observable<Attack[]> {\n    return this.http.get<Attack[]>(`${characterBaseUrl}/attacks/srd`, defaultOptions());\n  }\n\n  putCharacterAttacks(upstream: string, attacks: Attack[]): Observable<string> {\n    // Returns false if the put fails.\n    const endpt = `${characterBaseUrl}/${upstream}/attacks`;\n    // @ts-ignore\n    return this.http.put<string>(endpt, attacks, defaultTextOptions())\n      .pipe(\n        catchError(_ => {\n          return of(false);\n        })\n      );\n  }\n\n  validateAttackJSON(attacks: Attack | Attack[]): Observable<{ success: boolean, result: string }> {\n    const endpt = `${characterBaseUrl}/attacks/validate`;\n    return this.http.post<{ success: boolean, result: string }>(endpt, attacks, defaultOptions())\n      .pipe(\n        catchError(err => {\n          console.error(err);\n          return of({success: false, result: err.error});\n        })\n      );\n  }\n\n  getCustomizations(): Observable<Customizations> {\n    return this.http.get<Customizations>(customizationsUrl, defaultOptions());\n  }\n}\n","import {Component} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {isLoggedIn, removeToken} from '../SecurityHelper';\nimport {DashboardService} from './dashboard.service';\n\n@Component({\n  selector: 'avr-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent {\n\n  constructor(private router: Router, private dashboardService: DashboardService) {\n    if (!isLoggedIn()) {\n      this.router.navigate(['login']);\n    }\n  }\n\n  logout() {\n    removeToken();\n    this.router.navigate(['']);\n  }\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav\n    opened\n    mode=\"side\"\n    class=\"sidenav mat-elevation-z3\"\n    fixedTopGap=\"56px\"\n    disableClose=\"true\">\n    <mat-nav-list>\n      <a mat-list-item [routerLink]=\"['characters']\">Characters</a>\n\n      <mat-expansion-panel expanded class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title class=\"nav-panel\">\n            Alias Workshop\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"nav-panel-body\">\n          <a mat-list-item routerLink=\"/dashboard/workshop\">Explore</a>\n          <a mat-list-item routerLink=\"/dashboard/workshop/my-subscriptions\">My Subscriptions</a>\n          <a mat-list-item routerLink=\"/dashboard/workshop/my-work\">My Work</a>\n        </div>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel expanded class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title class=\"nav-panel\">\n            Customization\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"nav-panel-body\">\n          <a mat-list-item [routerLink]=\"['aliases']\">My Customizations</a>\n          <a mat-list-item [routerLink]=\"['gvars']\">Global Variables</a>\n        </div>\n      </mat-expansion-panel>\n\n      <mat-expansion-panel expanded class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title class=\"nav-panel\">\n            Homebrew\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <div class=\"nav-panel-body\">\n          <a mat-list-item routerLink=\"/dashboard/homebrew/items\">Items</a>\n          <a mat-list-item routerLink=\"/dashboard/homebrew/spells\">Spells</a>\n          <a mat-list-item href=\"https://critterdb.com/#/index\" target=\"_blank\" rel=\"noopener noreferrer\">Creatures\n            <mat-icon class=\"icon-in-panel\">launch</mat-icon>\n          </a>\n        </div>\n      </mat-expansion-panel>\n\n      <div class=\"spacer\"></div>\n      <a mat-list-item (click)=\"logout()\">Logout</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <!-- Add Content Here -->\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import {AutomationEffect} from './homebrew/AutomationEffects';\n\nexport class Character {\n  owner: string;\n  active: boolean;\n  upstream: string;\n  type: string;\n  version: number;\n  stats: Stats;\n  levels: Map<string, number>;\n  hp: number;\n  armor: number;\n  attacks: Attack[];\n  skills: Skills;\n  resist: string[];\n  immune: string[];\n  vuln: string[];\n  saves: Saves;\n  stat_cvars?: Map<string, any>;\n  skill_effects?: Map<string, string>;\n  consumables?: Consumables;\n  spellbook?: Spellbook;\n  live?: boolean;\n}\n\nexport class CharacterMeta {\n  upstream: string;\n  active: boolean;\n  name: string;\n  description: string;\n  image: string;\n  levels: { total_level: number, classes: Map<string, number> };\n  import_version: number;\n  overrides: { desc: string, image: string, attacks: Array<any>, spells: Array<any> };\n}\n\nexport class Stats {\n  name: string;\n  image: string;\n  description: string;\n  strength: number;\n  dexterity: number;\n  constitution: number;\n  intelligence: number;\n  wisdom: number;\n  charisma: number;\n  strengthMod: number;\n  dexterityMod: number;\n  constitutionMod: number;\n  intelligenceMod: number;\n  wisdomMod: number;\n  charismaMod: number;\n  proficiencyBonus: number;\n}\n\nexport class Attack {\n  name: string;\n  automation: AutomationEffect[];\n  _v: 2;\n  proper?: boolean;\n  verb?: string;\n\n  constructor(name = '', automation: AutomationEffect[] = [], proper: boolean = false, verb: string = null) {\n    this.name = name;\n    this.automation = automation;\n    this._v = 2;\n    this.proper = proper;\n    this.verb = verb;\n  }\n}\n\nexport class Skills {\n  acrobatics: number;\n  animalHandling: number;\n  arcana: number;\n  athletics: number;\n  deception: number;\n  history: number;\n  initiative: number;\n  insight: number;\n  intimidation: number;\n  investigation: number;\n  medicine: number;\n  nature: number;\n  perception: number;\n  performance: number;\n  persuasion: number;\n  religion: number;\n  sleightOfHand: number;\n  stealth: number;\n  survival: number;\n  strengthSave: number;\n  dexteritySave: number;\n  constitutionSave: number;\n  intelligenceSave: number;\n  wisdomSave: number;\n  charismaSave: number;\n  strength: number;\n  dexterity: number;\n  constitution: number;\n  intelligence: number;\n  wisdom: number;\n  charisma: number;\n}\n\nexport class Saves {\n  strengthSave: number;\n  dexteritySave: number;\n  constitutionSave: number;\n  intelligenceSave: number;\n  wisdomSave: number;\n  charismaSave: number;\n}\n\nexport class Consumables {\n  custom?: Map<string, Counter>;\n  hp?: Counter;\n  deathsaves?: DeathSaves;\n  spellslots?: SpellSlotsConsumable;\n}\n\nexport class Counter {\n  value: number;\n  reset?: string;\n  max?: number;\n  min?: number;\n  live?: string;\n  type?: string;\n}\n\nexport class DeathSaves {\n  fail: Counter;\n  success: Counter;\n}\n\nexport class SpellSlotsConsumable {\n  '1': Counter;\n  '2': Counter;\n  '3': Counter;\n  '4': Counter;\n  '5': Counter;\n  '6': Counter;\n  '7': Counter;\n  '8': Counter;\n  '9': Counter;\n}\n\nexport class Spellbook {\n  spellslots: SpellSlots;\n  spells: string[];\n  dc: number;\n  attackBonus: number;\n  dicecloud_id?: string;\n}\n\nexport class SpellSlots {\n  '1': number;\n  '2': number;\n  '3': number;\n  '4': number;\n  '5': number;\n  '6': number;\n  '7': number;\n  '8': number;\n  '9': number;\n}\n","<h2 mat-dialog-title>Editing Attacks: {{character.name}}</h2>\n\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"allAttacks\">\n  <div>\n    <p>\n      Need help using the editor? Check out the docs\n      <a href=\"https://avrae.readthedocs.io/en/latest/automation_ref.html\" target=\"_blank\"\n         rel=\"noopener noreferrer\">here</a>!\n    </p>\n  </div>\n\n  <div fxLayout=\"row\">\n    <mat-form-field>\n      <mat-label>Select an attack</mat-label>\n      <mat-select [(value)]=\"selectedAttack\">\n        <mat-option *ngFor=\"let attack of allAttacks\" [value]=\"attack\">\n          {{attack.name}}\n        </mat-option>\n        <mat-option (click)=\"addAndSelectNewAttack()\">New...</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <span fxFlex>\n      <button mat-icon-button matTooltip=\"Import JSON\" (click)=\"beginJSONImport()\">\n        <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n      </button>\n    </span>\n    <span fxFlex>\n      <button mat-icon-button matTooltip=\"Copy SRD Monster Action\" (click)=\"newFromSRD()\">\n        <mat-icon aria-label=\"Copy SRD Monster Action\">scanner</mat-icon>\n      </button>\n    </span>\n    <span fxFlex>\n      <button mat-icon-button matTooltip=\"Export All to JSON\" (click)=\"beginJSONExport(allAttacks)\">\n        <mat-icon aria-label=\"Export All to JSON\">vertical_align_top</mat-icon>\n      </button>\n    </span>\n    <span fxFlex=\"grow\"></span>\n  </div>\n\n  <mat-divider class=\"beefy-divider\"></mat-divider>\n\n  <p *ngIf=\"!selectedAttack\">Please select an attack.</p>\n\n  <div *ngIf=\"selectedAttack\">\n    <div fxLayout=\"row\" fxLayoutGap=\"4px\">\n      <mat-form-field fxFlex=\"grow\">\n        <input matInput placeholder=\"Attack Name\" [(ngModel)]=\"selectedAttack.name\">\n      </mat-form-field>\n\n      <span fxFlex=\"grow\"></span>\n\n      <span fxFlex>\n        <button mat-icon-button color=\"warn\" (click)=\"deleteAttack(selectedAttack)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Export to JSON\" (click)=\"beginJSONExport(selectedAttack)\">\n          <mat-icon aria-label=\"Export to JSON\">vertical_align_top</mat-icon>\n        </button>\n      </span>\n    </div>\n\n    <div fxLayout=\"row\" fxLayoutGap=\"4px\" fxLayoutAlign=\"center center\">\n      <mat-checkbox fxFlex [(ngModel)]=\"selectedAttack.proper\">Proper Noun</mat-checkbox>\n      <mat-form-field fxFlex>\n        <input matInput placeholder=\"Verb\" [(ngModel)]=\"selectedAttack.verb\">\n      </mat-form-field>\n\n      <span fxFlex=\"noshrink\">\n        Display: {{character.name}} {{selectedAttack.verb || 'attacks with'}} {{selectedAttack.proper ? selectedAttack.name : 'a ' + selectedAttack.name}}!\n      </span>\n\n      <span fxFlex=\"grow\"></span>\n    </div>\n\n    <avr-automation-editor [automation]=\"selectedAttack.automation\"></avr-automation-editor>\n  </div>\n\n  <p *ngIf=\"errorValue\" class=\"error-text\">\n    {{errorValue}}\n  </p>\n</mat-dialog-content>\n\n<!-- Loading Spinner -->\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"!allAttacks\">\n  <mat-spinner [diameter]=\"24\"></mat-spinner>\n  <p>\n    Loading attacks...\n  </p>\n</mat-dialog-content>\n\n<!-- Buttons -->\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button (click)=\"saveAndExit()\" [disabled]=\"saveButtonDisabled\">{{saveButtonValue}}</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {Attack, CharacterMeta} from '../../../schemas/Character';\nimport {JSONExportDialog} from '../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {JSONImportDialog} from '../../../shared/dialogs/json-import-dialog/json-import-dialog.component';\nimport {SRDCopyDialog} from '../../../shared/dialogs/srd-copy-dialog/srd-copy-dialog.component';\nimport {DashboardService} from '../../dashboard.service';\n\n@Component({\n  selector: 'avr-attack-editor-dialog',\n  templateUrl: './attack-editor-dialog.component.html',\n  styleUrls: ['./attack-editor-dialog.component.css']\n})\nexport class AttackEditorDialog implements OnInit {\n\n  selectedAttack: Attack;\n  allAttacks: Attack[];\n\n  saveButtonValue = 'Save and Exit';\n  saveButtonDisabled = false;\n  errorValue: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public character: CharacterMeta, private charService: DashboardService,\n              private dialogRef: MatDialogRef<AttackEditorDialog>, private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.loadAttacks();\n  }\n\n  loadAttacks() {\n    this.charService.getCharacterAttacks(this.character.upstream)\n      .subscribe(result => {\n        this.allAttacks = result;\n      });\n  }\n\n  addAndSelectNewAttack() {\n    const atk = new Attack();\n    this.allAttacks.push(atk);\n    this.selectedAttack = atk;\n  }\n\n  newFromSRD() {\n    const dialogRef = this.dialog.open(SRDCopyDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {getter: () => this.charService.getTemplateAttacks(), namer: a => a.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.allAttacks.push(result);\n        this.selectedAttack = result;\n      }\n    });\n  }\n\n  deleteAttack(attack: Attack) {\n    const index = this.allAttacks.indexOf(attack);\n    if (index > -1) {\n      this.allAttacks.splice(index, 1);\n    }\n    this.selectedAttack = null;\n  }\n\n  saveAndExit() {\n    this.saveButtonValue = `Saving...`;\n    this.saveButtonDisabled = true;\n\n    this.charService.putCharacterAttacks(this.character.upstream, this.allAttacks)\n      .subscribe(result => {\n        this.saveButtonValue = 'Save and Exit';\n        this.saveButtonDisabled = false;\n\n        if (result) {\n          // successful PUT, exit\n          this.dialogRef.close();\n        } else {\n          // failed PUT, display error... somewhere\n          this.errorValue = 'Failed to save attacks.';\n        }\n      });\n  }\n\n  // JSON\n  beginJSONExport(attack: Attack | Attack[]) {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: (attack instanceof Array) ? 'All Attacks' : attack.name, data: attack},\n      width: '60%'\n    });\n  }\n\n  beginJSONImport() {\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {validator: (data) => this.validateAttackJSON(dialogRef, data)}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        const attack: Attack | Attack[] = result;\n        if (attack instanceof Array) {\n          this.allAttacks.push(...attack);\n        } else {\n          this.allAttacks.push(attack);\n        }\n      }\n    });\n  }\n\n  validateAttackJSON(dialogRef: MatDialogRef<JSONImportDialog>, data) {\n    this.charService.validateAttackJSON(data)\n      .subscribe(\n        result => {\n          console.log(result);\n          dialogRef.componentInstance.loading = false;\n          if (result.success) {\n            dialogRef.close(JSON.parse(dialogRef.componentInstance.data));\n          } else {\n            dialogRef.componentInstance.error = result.result;\n          }\n        }\n      );\n  }\n}\n","<div class=\"characterList\">\n  <mat-card class=\"user-card\" *ngIf=\"(userInfo | async)\">\n    <mat-grid-list cols=\"4\" rowHeight=\"1:1\">\n      <mat-grid-tile>\n        <img alt=\"avatar\" [src]=\"(userInfo | async)?.avatarUrl\" class=\"avatarImg mat-elevation-z1\">\n      </mat-grid-tile>\n      <mat-grid-tile colspan=\"3\">\n        <div>\n          <h1 class=\"mat-display-2 smallmargin\">\n            {{(userInfo | async)?.username}}<span class=\"mat-small\">#{{(userInfo | async)?.discriminator}}</span>\n          </h1>\n          <p class=\"mat-h3\">\n            Characters: {{(userStats | async)?.numCharacters}}<br>\n            Customizations: {{(userStats | async)?.numCustomizations}}\n          </p>\n        </div>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n\n  <div class=\"spacer-8px\"></div>\n\n  <mat-grid-list [cols]=\"numCols\" rowHeight=\"5:6\" gutterSize=\"8\" (window:resize)=\"onResize($event)\">\n    <mat-grid-tile class=\"character-tile\" *ngFor=\"let character of characters | async\">\n      <div class=\"character-name-underlay mat-typography character-image\">\n        <p class=\"ignore-theme\" *ngIf=\"!getImage(character)\">\n          {{getInitials(character.name)}}\n        </p>\n      </div>\n      <img class=\"character-image\" [src]=\"getImage(character)\" [alt]=\"'Image for ' + character.name\"\n           *ngIf=\"getImage(character)\">\n      <div class=\"character-meta\">\n        <div class=\"mat-typography ignore-theme character-text\">\n          <h3>\n            {{character.name}}\n          </h3>\n          {{getDescription(character)}}\n        </div>\n        <div class=\"mat-typography ignore-theme character-actions\">\n          <a mat-icon-button matTooltip=\"View Sheet\"\n             [href]=\"getUpstreamURL(character.upstream)\" target=\"_blank\">\n            <mat-icon>menu_book</mat-icon>\n          </a>\n          <button mat-icon-button\n                  [matTooltip]=\"character.import_version < MIN_CHARACTER_AUTOMATION_VERSION ? 'Please !update your character to use Automation.' : 'Edit Attacks'\"\n                  (click)=\"beginEditAttacks(character)\">\n            <mat-icon>build</mat-icon>\n          </button>\n        </div>\n      </div>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Observable, of} from 'rxjs';\nimport {CharacterMeta} from '../../schemas/Character';\nimport {UserInfo, UserStats} from '../../schemas/UserInfo';\nimport {getUser} from '../APIHelper';\nimport {DashboardService} from '../dashboard.service';\nimport {AttackEditorDialog} from './attack-editor-dialog/attack-editor-dialog.component';\n\n@Component({\n  selector: 'avr-characters',\n  templateUrl: './characters.component.html',\n  styleUrls: ['./characters.component.css']\n})\nexport class CharactersComponent implements OnInit {\n\n  userInfo: Observable<UserInfo>;\n  userStats: Observable<UserStats>;\n  characters: Observable<CharacterMeta[]>;\n  numCols: number;\n\n  MIN_CHARACTER_AUTOMATION_VERSION = 17;\n\n  constructor(private dashboardService: DashboardService, private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.getUserInfo();\n    this.getUserStats();\n    this.getCharacters();\n    this.onResize(null);\n  }\n\n  getUserInfo(): void {\n    this.userInfo = of(getUser());\n  }\n\n  getUserStats(): void {\n    this.userStats = this.dashboardService.getUserStats();\n  }\n\n  getCharacters(): void {\n    this.characters = this.dashboardService.getCharacterMeta();\n  }\n\n  getInitials(name: string): string {\n    const match = name.match(/\\b\\w/g) || [];\n    return ((match.shift() || '') + (match.pop() || '')).toUpperCase();\n  }\n\n  getImage(character: CharacterMeta): string {\n    return character.overrides.image || character.image;\n  }\n\n  getDescription(character: CharacterMeta): string {\n    return character.overrides.desc || character.description;\n  }\n\n  getUpstreamURL(upstream: string): string {\n    if (upstream.startsWith('dicecloud-')) {\n      return `https://dicecloud.com/character/${upstream.slice(10)}`;\n    } else if (upstream.startsWith('google-')) {\n      return `https://docs.google.com/spreadsheets/d/${upstream.slice(7)}`;\n    } else if (upstream.startsWith('beyond-')) {\n      return `https://ddb.ac/characters/${upstream.slice(7)}`;\n    }\n    return '';\n  }\n\n  // Attack Editor\n  beginEditAttacks(character: CharacterMeta) {\n    if (character.import_version < this.MIN_CHARACTER_AUTOMATION_VERSION) {\n      return;\n    }\n\n    this.dialog.open(AttackEditorDialog, {\n      width: '75%', disableClose: true,\n      data: character\n    })\n      .afterClosed().subscribe(result => {\n      console.log(result);\n    });\n  }\n\n  // Responsiveness\n  onResize(_) {\n    // reflects Material Design's breakpoints (https://material.io/design/layout/responsive-layout-grid.html#breakpoints)\n    if (window.innerWidth < 600) {\n      this.numCols = 1; // xsmall\n    } else if (window.innerWidth < 1024) {\n      this.numCols = 2; // small\n    } else if (window.innerWidth < 1440) {\n      this.numCols = 4; // medium\n    } else {\n      this.numCols = 6; // large\n    }\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../../environments/environment';\nimport {Alias, Snippet, UserVar} from '../../schemas/Customization';\nimport {Observable, of} from 'rxjs';\nimport {defaultOptions, defaultTextOptions} from '../APIHelper';\nimport {catchError} from 'rxjs/operators';\n\nconst aliasUrl = `${environment.apiURL}/customizations/aliases`;\nconst snippetUrl = `${environment.apiURL}/customizations/snippets`;\nconst uvarUrl = `${environment.apiURL}/customizations/uvars`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomizationService {\n\n\n  constructor(private http: HttpClient) {\n  }\n\n  getAliases(): Observable<Alias[]> {\n    return this.http.get<Alias[]>(aliasUrl, defaultOptions());\n  }\n\n  updateAlias(alias: { name: string, commands: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${aliasUrl}/${alias.name}`, alias, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateAlias'))\n      );\n  }\n\n  deleteAlias(alias: Alias): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${aliasUrl}/${alias.name}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteAlias'))\n      );\n  }\n\n  getSnippets(): Observable<Snippet[]> {\n    return this.http.get<Snippet[]>(snippetUrl, defaultOptions());\n  }\n\n  updateSnippet(snippet: { name: string, snippet: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${snippetUrl}/${snippet.name}`, snippet, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateSnippet'))\n      );\n  }\n\n  deleteSnippet(snippet: Snippet): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${snippetUrl}/${snippet.name}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteSnippet'))\n      );\n  }\n\n  getUvars(): Observable<UserVar[]> {\n    return this.http.get<UserVar[]>(uvarUrl, defaultOptions());\n  }\n\n  updateUvar(uvar: { name: string, value: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${uvarUrl}/${uvar.name}`, uvar, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateUvar'))\n      );\n  }\n\n  deleteUvar(uvar: UserVar): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${uvarUrl}/${uvar.name}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteUvar'))\n      );\n  }\n\n  private handleTextError<T>(operation = 'operation') {\n    return (error: any): Observable<string> => {\n      console.error(error); // log to console instead\n\n      return of(`${operation} failed: ${error.error}`);\n    };\n  }\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'avr-edit-dialog',\n  templateUrl: './edit-dialog.component.html',\n  styleUrls: ['./edit-dialog.component.css']\n})\nexport class EditDialog implements OnInit {\n\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>New {{data.type}}...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field *ngIf=\"data.showName\">\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Value\" [(ngModel)]=\"value\"></textarea>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, value: value}\">Done</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Editing {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <mat-form-field>\n    <textarea matInput [(ngModel)]=\"data.content\" spellcheck=false></textarea>\n  </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"data.content\">Done</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'avr-new-dialog',\n  templateUrl: './new-dialog.component.html',\n  styleUrls: ['./new-dialog.component.css']\n})\nexport class NewDialog implements OnInit {\n\n  name: string;\n  value: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n    <td mat-cell *matCellDef=\"let alias\">{{alias.name}}</td>\n    <td mat-footer-cell *matFooterCellDef>Create New</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"commands\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Commands</th>\n    <td mat-cell *matCellDef=\"let alias\">\n      <pre>{{alias.commands}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\">\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let alias\">\n      <button mat-icon-button (click)=\"beginEdit(alias)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(alias)\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Alias} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\nimport {CustomizationService} from '../customization.service';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\n\n@Component({\n  selector: 'avr-alias-list',\n  templateUrl: './alias-list.component.html',\n  styleUrls: ['./alias-list.component.css']\n})\nexport class AliasListComponent implements OnInit {\n\n  @Input() data: Alias[];\n\n  columnsToDisplay: string[] = ['name', 'commands', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private custService: CustomizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    this.custService.getAliases()\n      .subscribe(aliases => this.data = aliases);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: true, type: 'alias'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.name || !result.value) {\n          this.snackBar.open('Name or commands cannot be empty.');\n          return;\n        }\n        let data = {name: result.name, commands: result.value};\n        if (data.name.includes(' ')) {\n          this.snackBar.open('Name cannot contain whitespace.');\n          return;\n        }\n        this.post(data);\n      }\n    });\n  }\n\n  beginEdit(alias: Alias) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: alias.name, content: alias.commands},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        alias.commands = result;\n        this.post(alias);\n      }\n    });\n  }\n\n  confirmDelete(alias: Alias) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: alias.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(alias);\n      }\n    });\n  }\n\n  post(alias: { name: string, commands: string }) {\n    // HTTP POST /customizations/aliases/:name\n    this.custService.updateAlias(alias)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(alias: Alias) {\n    // HTTP DELETE /customizations/aliases/:name\n    this.custService.deleteAlias(alias)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n    <td mat-cell *matCellDef=\"let snippet\">{{snippet.name}}</td>\n    <td mat-footer-cell *matFooterCellDef>Create New</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"snippet\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Value</th>\n    <td mat-cell *matCellDef=\"let snippet\">\n      <pre>{{snippet.snippet}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\">\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let snippet\">\n      <button mat-icon-button (click)=\"beginEdit(snippet)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(snippet)\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Snippet} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {CustomizationService} from '../customization.service';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\n\n@Component({\n  selector: 'avr-snippet-list',\n  templateUrl: './snippet-list.component.html',\n  styleUrls: ['./snippet-list.component.css']\n})\nexport class SnippetListComponent implements OnInit {\n\n  @Input() data: Snippet[];\n\n  columnsToDisplay: string[] = ['name', 'snippet', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private custService: CustomizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    this.custService.getSnippets()\n      .subscribe(snippets => this.data = snippets);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: true, type: 'snippet'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.name || !result.value) {\n          this.snackBar.open('Name or value cannot be empty.');\n          return;\n        }\n        let data = {name: result.name, snippet: result.value};\n        if (data.name.includes(' ')) {\n          this.snackBar.open('Name cannot contain whitespace.');\n          return;\n        }\n        if (data.name.length < 2) {\n          this.snackBar.open('Name must be at least 2 characters.');\n          return;\n        }\n        this.post(data);\n      }\n    });\n  }\n\n  beginEdit(snippet: Snippet) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: snippet.name, content: snippet.snippet},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        snippet.snippet = result;\n        this.post(snippet);\n      }\n    });\n  }\n\n  confirmDelete(snippet: Snippet) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: snippet.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(snippet);\n      }\n    });\n  }\n\n  post(snippet: { name: string, snippet: string }) {\n    // HTTP POST /customizations/snippets/:name\n    this.custService.updateSnippet(snippet)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(snippet: Snippet) {\n    // HTTP DELETE /customizations/snippets/:name\n    this.custService.deleteSnippet(snippet)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n    <td mat-cell *matCellDef=\"let uvar\">{{uvar.name}}</td>\n    <td mat-footer-cell *matFooterCellDef>Create New</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"value\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Value</th>\n    <td mat-cell *matCellDef=\"let uvar\">\n      <pre>{{uvar.value}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\">\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let uvar\">\n      <button mat-icon-button (click)=\"beginEdit(uvar)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(uvar)\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {UserVar} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {CustomizationService} from '../customization.service';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\n\n@Component({\n  selector: 'avr-uvar-list',\n  templateUrl: './uvar-list.component.html',\n  styleUrls: ['./uvar-list.component.css']\n})\nexport class UvarListComponent implements OnInit {\n\n  @Input() data: UserVar[];\n\n  columnsToDisplay: string[] = ['name', 'value', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private custService: CustomizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    this.custService.getUvars()\n      .subscribe(uvars => this.data = uvars);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: true, type: 'uvar'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.name || !result.value) {\n          this.snackBar.open('Name or value cannot be empty.');\n          return;\n        }\n        let data = {name: result.name, value: result.value};\n        this.post(data);\n      }\n    });\n  }\n\n  beginEdit(uvar: UserVar) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: uvar.name, content: uvar.value},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        uvar.value = result;\n        this.post(uvar);\n      }\n    });\n  }\n\n  confirmDelete(uvar: UserVar) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: uvar.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(uvar);\n      }\n    });\n  }\n\n  post(uvar: { name: string, value: string }) {\n    // HTTP POST /customizations/uvars/:name\n    this.custService.updateUvar(uvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(uvar: UserVar) {\n    // HTTP DELETE /customizations/uvars/:name\n    this.custService.deleteUvar(uvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {CharVar, Customizations} from '../../schemas/Customization';\nimport {DashboardService} from '../dashboard.service';\nimport {Observable} from 'rxjs';\n\n@Component({\n  selector: 'avr-customization',\n  templateUrl: './customization.component.html',\n  styleUrls: ['./customization.component.css']\n})\nexport class CustomizationComponent implements OnInit {\n\n  cvars: CharVar[];\n  customizations: Observable<Customizations>;\n\n  constructor(private dashboardService: DashboardService) {\n  }\n\n  ngOnInit() {\n    this.getCustomizations();\n  }\n\n  getCustomizations(): void {\n    this.customizations = this.dashboardService.getCustomizations();\n  }\n\n}\n","<div class=\"container\">\n  <mat-card>\n    <mat-tab-group>\n      <mat-tab label=\"Aliases\">\n        <avr-alias-list [data]=\"(customizations | async)?.aliases\"></avr-alias-list>\n      </mat-tab>\n      <mat-tab label=\"Snippets\">\n        <avr-snippet-list [data]=\"(customizations | async)?.snippets\"></avr-snippet-list>\n      </mat-tab>\n      <mat-tab label=\"Uvars\">\n        <avr-uvar-list [data]=\"(customizations | async)?.uvars\"></avr-uvar-list>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-card>\n</div>\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {environment} from '../../../environments/environment';\nimport {GlobalVar} from '../../schemas/Customization';\nimport {defaultOptions, defaultTextOptions} from '../APIHelper';\n\nconst gvarUrl = `${environment.apiURL}/customizations/gvars`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GvarService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getAllGvars(): Observable<{ owned: GlobalVar[], editable: GlobalVar[] }> {\n    return this.http.get<{ owned: GlobalVar[], editable: GlobalVar[] }>(gvarUrl, defaultOptions());\n  }\n\n  getGvars(owned: boolean): Observable<GlobalVar[]> {\n    return this.http.get<GlobalVar[]>(`${gvarUrl}/${owned ? 'owned' : 'editable'}`, defaultOptions());\n  }\n\n  newGvar(gvar: { value: string }): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${gvarUrl}`, gvar, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('newGvar'))\n      );\n  }\n\n  getGvar(key: string): Observable<GlobalVar | boolean> {\n    return this.http.get<GlobalVar>(`${gvarUrl}/${key}`, defaultOptions())\n      .pipe(\n        catchError(_ => of(false))\n      );\n  }\n\n  updateGvar(gvar: GlobalVar): Observable<string> {\n    // @ts-ignore\n    return this.http.post<string>(`${gvarUrl}/${gvar.key}`, gvar, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('updateGvar'))\n      );\n  }\n\n  deleteGvar(gvar: GlobalVar): Observable<string> {\n    // @ts-ignore\n    return this.http.delete<string>(`${gvarUrl}/${gvar.key}`, defaultTextOptions())\n      .pipe(\n        catchError(this.handleTextError('deleteGvar'))\n      );\n  }\n\n  private handleTextError<T>(operation = 'operation') {\n    return (error: any): Observable<string> => {\n      console.error(error); // log to console instead\n\n      return of(`${operation} failed: ${error.error}`);\n    };\n  }\n\n}\n","<table mat-table [dataSource]=\"data\" matSort class=\"list-table\">\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\n    <td mat-cell *matCellDef=\"let gvar\">{{gvar.key}}</td>\n    <td mat-footer-cell *matFooterCellDef>{{owned ? \"Create New\" : \"\"}}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"value\">\n    <th mat-header-cell *matHeaderCellDef class=\"table-data-cell\">Value</th>\n    <td mat-cell *matCellDef=\"let gvar\">\n      <pre>{{gvar.value}}</pre>\n    </td>\n    <td mat-footer-cell *matFooterCellDef></td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"buttons\">\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let gvar\">\n      <button mat-icon-button (click)=\"beginEdit(gvar)\">\n        <mat-icon aria-label=\"Edit\">edit</mat-icon>\n      </button>\n      <button mat-icon-button color=\"warn\" (click)=\"confirmDelete(gvar)\" *ngIf=\"owned\">\n        <mat-icon aria-label=\"Delete\">delete</mat-icon>\n      </button>\n    </td>\n    <td mat-footer-cell *matFooterCellDef>\n      <button mat-icon-button (click)=\"beginNew()\" *ngIf=\"owned\">\n        <mat-icon aria-label=\"New\">launch</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n  <tr mat-row *matRowDef=\"let rowData; columns: columnsToDisplay\"></tr>\n  <div *ngIf=\"owned\">\n    <tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>\n  </div>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {GlobalVar} from '../../../schemas/Customization';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {NewDialog} from '../../new-dialog/new-dialog.component';\nimport {EditDialog} from '../../edit-dialog/edit-dialog.component';\nimport {ConfirmDeleteDialog} from '../../confirm-delete-dialog/confirm-delete-dialog.component';\nimport {GvarService} from '../gvar.service';\n\n@Component({\n  selector: 'avr-gvar-list',\n  templateUrl: './gvar-list.component.html',\n  styleUrls: ['./gvar-list.component.css']\n})\nexport class GvarListComponent implements OnInit {\n\n  @Input() data: GlobalVar[];\n  @Input() owned: boolean;\n\n  columnsToDisplay: string[] = ['name', 'value', 'buttons'];\n\n  constructor(private dialog: MatDialog, private snackBar: MatSnackBar, private gvarService: GvarService) {\n  }\n\n  ngOnInit() {\n  }\n\n  refresh() {\n    // HTTP GET /customizations/gvars/[owned|editable]\n    this.gvarService.getGvars(this.owned)\n      .subscribe(gvars => this.data = gvars);\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewDialog, {\n      data: {showName: false, type: 'gvar'},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (!result.value) {\n          this.snackBar.open('Value cannot be empty.');\n          return;\n        }\n        let data = {value: result.value};\n        this.new(data);\n      }\n    });\n  }\n\n  beginEdit(gvar: GlobalVar) {\n    const dialogRef = this.dialog.open(EditDialog, {\n      data: {name: gvar.key, content: gvar.value},\n      width: '60%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        gvar.value = result;\n        this.post(gvar);\n      }\n    });\n  }\n\n  confirmDelete(gvar: GlobalVar) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialog, {\n      data: {name: gvar.key}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.delete(gvar);\n      }\n    });\n  }\n\n  new(gvar: { value: string }) {\n    // HTTP POST /customizations/gvars\n    this.gvarService.newGvar(gvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  post(gvar: GlobalVar) {\n    // HTTP POST /customizations/gvars/:key\n    this.gvarService.updateGvar(gvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n  delete(gvar: GlobalVar) {\n    // HTTP DELETE /customizations/gvars/:key\n    this.gvarService.deleteGvar(gvar)\n      .subscribe(result => {\n        this.refresh();\n        this.snackBar.open(result);\n      });\n  }\n\n}\n","<mat-form-field class=\"lookup-id-input\">\n  <input matInput placeholder=\"Gvar ID\" #lookupIdInput>\n</mat-form-field>\n<button mat-flat-button color=\"primary\" (click)=\"lookupGvar(lookupIdInput.value)\">Lookup</button>\n\n<div *ngIf=\"activeGvar\">\n  <p>\n    {{activeGvar.key}}\n  </p>\n  <p>\n    <i>Owned by: {{activeGvar.owner_name}}</i>\n  </p>\n\n  <mat-divider></mat-divider>\n\n  <div class=\"gvar-value-container\">\n    <pre class=\"gvar-value-display\">{{activeGvar.value}}</pre>\n  </div>\n</div>\n\n<div *ngIf=\"error\">\n  <p style=\"color: red\">\n    {{error}}\n  </p>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {GlobalVar} from '../../../schemas/Customization';\nimport {GvarService} from '../gvar.service';\n\n@Component({\n  selector: 'avr-gvar-lookup',\n  templateUrl: './gvar-lookup.component.html',\n  styleUrls: ['./gvar-lookup.component.css']\n})\nexport class GvarLookupComponent implements OnInit {\n\n  activeGvar: GlobalVar;\n  error: string;\n\n  constructor(private gvarService: GvarService, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.checkForLookupQuery();\n  }\n\n  lookupGvar(key: string) {\n    key = key.trim();\n    console.log(key);\n\n    // set query param for permalinking\n    const searchParams = new URLSearchParams(window.location.search);\n    searchParams.set('lookup', key);\n    const newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();\n    history.pushState(null, '', newRelativePathQuery);\n\n    // HTTP GET /customizations/gvars/:key\n    this.gvarService.getGvar(key)\n      .subscribe(gvar => {\n        this.activeGvar = null;\n        this.error = null;\n        if (gvar === false) {\n          this.error = 'Failed to get gvar.';\n        } else {\n          this.activeGvar = gvar as GlobalVar;\n        }\n      });\n  }\n\n  checkForLookupQuery() {\n    const lookupId = this.route.snapshot.queryParamMap.get('lookup');\n    if (lookupId) {\n      this.lookupGvar(lookupId);\n    }\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {GlobalVar} from '../../schemas/Customization';\nimport {GvarService} from './gvar.service';\n\n@Component({\n  selector: 'avr-gvars',\n  templateUrl: './gvars.component.html',\n  styleUrls: ['./gvars.component.css']\n})\nexport class GvarsComponent implements OnInit {\n\n  gvars: Observable<{ owned: GlobalVar[]; editable: GlobalVar[] }>;\n  forcedTabIndex: number;\n\n  constructor(private gvarService: GvarService, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.getCustomizations();\n    this.checkForLookupQuery();\n  }\n\n  getCustomizations(): void {\n    this.gvars = this.gvarService.getAllGvars();\n  }\n\n  checkForLookupQuery(): void {\n    const lookupId = this.route.snapshot.queryParamMap.get('lookup');\n    if (lookupId) {\n      this.forcedTabIndex = 2;\n    }\n  }\n}\n","<div class=\"container\">\n  <mat-card>\n    <mat-tab-group [(selectedIndex)]=\"forcedTabIndex\">\n      <mat-tab label=\"Owned\">\n        <avr-gvar-list [data]=\"(gvars | async)?.owned\" [owned]=\"true\"></avr-gvar-list>\n      </mat-tab>\n      <mat-tab label=\"Editable\">\n        <avr-gvar-list [data]=\"(gvars | async)?.editable\" [owned]=\"false\"></avr-gvar-list>\n      </mat-tab>\n      <mat-tab label=\"Lookup\">\n        <avr-gvar-lookup></avr-gvar-lookup>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-card>\n</div>\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {getDiscordOauthUrl, isLoggedIn, navigateToDiscordOauth} from './SecurityHelper';\nimport {setLocalStorage} from './shared/StorageUtils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private router: Router\n  ) {\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (isLoggedIn()) {\n      return true;\n    } else {\n      // the discord auth endpoint requires an exact redirect_uri (no after param) so we store where the user wanted to go in localStorage\n      setLocalStorage('after-login-redirect', state.url);\n      navigateToDiscordOauth();\n      // > Note: The guard can also tell the router to navigate elsewhere, effectively canceling the current navigation.\n      // > When doing so inside a guard, the guard should return false;\n      // https://angular.io/guide/router#milestone-5-route-guards\n      return false;\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {DashboardComponent} from './dashboard.component';\nimport {CharactersComponent} from './characters/characters.component';\nimport {CustomizationComponent} from './customization/customization.component';\nimport {GvarsComponent} from './gvars/gvars.component';\nimport {AuthGuard} from '../auth.guard';\n\n\nconst dashboardRoutes: Routes = [\n  {\n    path: '', canActivate: [AuthGuard], component: DashboardComponent, children: [\n      {path: 'characters', component: CharactersComponent},\n      {path: 'aliases', component: CustomizationComponent},\n      {path: 'gvars', component: GvarsComponent},\n      {path: 'homebrew', loadChildren: () => import('./homebrew/homebrew.module').then(mod => mod.HomebrewModule)},\n      {path: 'workshop', loadChildren: () => import('./workshop/workshop.module').then(mod => mod.WorkshopModule)},\n      {path: '', redirectTo: 'characters', pathMatch: 'full'}\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(dashboardRoutes)],\n  exports: [RouterModule]\n})\nexport class DashboardRoutingModule {\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexModule} from '@angular/flex-layout';\nimport {FormsModule} from '@angular/forms';\nimport {MaterialModule} from '../material/material.module';\nimport {AutomationEditorModule} from '../shared/automation-editor/automation-editor.module';\nimport {AttackEditorDialog} from './characters/attack-editor-dialog/attack-editor-dialog.component';\nimport {CharactersComponent} from './characters/characters.component';\nimport {ConfirmDeleteDialog} from './confirm-delete-dialog/confirm-delete-dialog.component';\nimport {AliasListComponent} from './customization/alias-list/alias-list.component';\nimport {CustomizationComponent} from './customization/customization.component';\nimport {SnippetListComponent} from './customization/snippet-list/snippet-list.component';\nimport {UvarListComponent} from './customization/uvar-list/uvar-list.component';\nimport {DashboardRoutingModule} from './dashboard-routing.module';\nimport {DashboardComponent} from './dashboard.component';\nimport {EditDialog} from './edit-dialog/edit-dialog.component';\nimport {GvarListComponent} from './gvars/gvar-list/gvar-list.component';\nimport {GvarLookupComponent} from './gvars/gvar-lookup/gvar-lookup.component';\nimport {GvarsComponent} from './gvars/gvars.component';\nimport {NewDialog} from './new-dialog/new-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    DashboardRoutingModule,\n    FlexModule,\n    AutomationEditorModule,\n  ],\n  declarations: [\n    DashboardComponent,\n    CharactersComponent,\n    CustomizationComponent,\n    AliasListComponent,\n    SnippetListComponent,\n    UvarListComponent,\n    GvarsComponent,\n    ConfirmDeleteDialog,\n    EditDialog,\n    NewDialog,\n    AttackEditorDialog,\n    GvarListComponent,\n    GvarLookupComponent,\n  ]\n})\n\nexport class DashboardModule {\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\n\nclass SRDDialogData<T> {\n  getter: () => Observable<T[]>;\n  namer: (obj: T) => string;\n}\n\n@Component({\n  selector: 'avr-srd-copy-dialog',\n  templateUrl: './srd-copy-dialog.component.html'\n})\nexport class SRDCopyDialog<T> implements OnInit {\n\n  search = '';\n  templates: T[];\n  filteredTemplates: T[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: SRDDialogData<T>,\n              private dialogRef: MatDialogRef<SRDCopyDialog<T>>) {\n  }\n\n  ngOnInit() {\n    this.getTemplates();\n  }\n\n  select(obj: T) {\n    this.dialogRef.close(obj);\n  }\n\n  filterTemplates() {\n    this.filteredTemplates = this.templates.filter(\n      obj => this.data.namer(obj).toLowerCase().includes(this.search.toLowerCase())\n    );\n  }\n\n  getTemplates() {\n    this.data.getter()\n      .subscribe(objs => {\n        this.templates = objs;\n        this.filterTemplates();\n      });\n  }\n\n}\n","<h2 mat-dialog-title>Copying SRD object...</h2>\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"templates\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Search...\" [(ngModel)]=\"search\" (keyup)=\"filterTemplates()\">\n    </mat-form-field>\n  </div>\n  <div class=\"results\" *ngIf=\"filteredTemplates?.length\">\n    <mat-list>\n      <mat-list-item *ngFor=\"let obj of filteredTemplates\" class=\"hoverable pointer\"\n                     (click)=\"select(obj)\">\n        {{data.namer(obj)}}\n      </mat-list-item>\n    </mat-list>\n  </div>\n  <div class=\"results\" *ngIf=\"!filteredTemplates?.length\">\n    No results found.\n  </div>\n</mat-dialog-content>\n\n<mat-dialog-content class=\"mat-typography\" *ngIf=\"!templates\">\n  <mat-spinner [diameter]=\"24\"></mat-spinner>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\n@Component({\n  selector: 'avr-json-export-dialog',\n  templateUrl: './json-export-dialog.component.html',\n  styleUrls: ['./json-export-dialog.component.css']\n})\nexport class JSONExportDialog implements OnInit {\n\n  jsonData: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { name: string, data: any }) {\n    this.jsonData = JSON.stringify(this.data.data);\n  }\n\n  ngOnInit() {\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n}\n","<h2 mat-dialog-title>JSON - {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <textarea matInput readonly [value]=\"jsonData\" placeholder=\"JSON\" rows=\"10\" #jsonElem></textarea>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(jsonElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Done</button>\n</mat-dialog-actions>\n"]}