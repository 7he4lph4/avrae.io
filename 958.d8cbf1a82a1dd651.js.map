{"version":3,"mappings":"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","names":["constructor","text","_document","this","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","_a","destroy","remove","undefined","document","pendingCopy","beginCopy","PendingCopy","Clipboard","ɵfac","i0","DOCUMENT","ɵprov","factory","CDK_COPY_TO_CLIPBOARD_CONFIG","InjectionToken","_clipboard","_ngZone","config","attempts","copied","EventEmitter","_pending","Set","remainingAttempts","pending","add","attempt","_destroyed","_currentTimeout","delete","emit","runOutsideAngular","setTimeout","ngOnDestroy","clearTimeout","forEach","clear","CdkCopyToClipboard","ɵdir","selectors","e","inputs","ClipboardModule","ɵmod","ɵinj","o","n","ngOnInit","loadLocalAutomation","JSON","parse","localStorage","getItem","localSavedAutomation","saveLocalAutomation","setItem","stringify","clearLocalAutomation","removeItem","keyEvent","ctrlKey","metaKey","key","preventDefault","beginJSONImport","copyText","getLocalAutomationYaml","getLocalAutomationJson","dialog","open","Z","width","data","yaml","afterClosed","subscribe","beginJSONExport","T","name","clipboard","r","p","h","snackBar","u","t","N","path","component","s","C","d","y","v","f","A"],"sources":["./node_modules/@angular/cdk/fesm2015/clipboard.mjs","./src/app/dev/automation-editor-dev/automation-editor-dev.component.ts","./src/app/dev/automation-editor-dev/automation-editor-dev.component.html","./src/app/dev/dev-routing.module.ts","./src/app/dev/dev.module.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: Clipboard, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nClipboard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: Clipboard, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkCopyToClipboard, deps: [{ token: Clipboard }, { token: i0.NgZone }, { token: CDK_COPY_TO_CLIPBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCopyToClipboard.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkCopyToClipboard, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: Clipboard }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n                    }] }];\n    }, propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nClipboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClipboardModule, declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] });\nClipboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClipboardModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import {Clipboard} from '@angular/cdk/clipboard';\nimport {Component, HostListener, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {stringify as YAMLStringify} from 'yaml';\nimport {AutomationEffect} from '../../schemas/homebrew/AutomationEffects';\nimport {JSONExportDialog} from '../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {JSONImportDialog} from '../../shared/dialogs/json-import-dialog/json-import-dialog.component';\n\n@Component({\n  selector: 'avr-automation-editor-dev',\n  templateUrl: './automation-editor-dev.component.html',\n  styleUrls: ['./automation-editor-dev.component.css']\n})\nexport class AutomationEditorDevComponent implements OnInit {\n  localSavedAutomation: AutomationEffect[] = [];\n\n  constructor(private dialog: MatDialog, private clipboard: Clipboard, private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit(): void {\n    this.loadLocalAutomation();\n  }\n\n  // persistence\n  loadLocalAutomation(): void {\n    const localSave = JSON.parse(localStorage.getItem('dev-automation-editor'));\n    this.localSavedAutomation = localSave || [];\n  }\n\n  saveLocalAutomation(): void {\n    localStorage.setItem('dev-automation-editor', JSON.stringify(this.localSavedAutomation));\n  }\n\n  clearLocalAutomation(): void {\n    localStorage.removeItem('dev-automation-editor');\n    this.localSavedAutomation = [];\n  }\n\n  // keyboard listeners\n  @HostListener('window:keydown', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    if (!(event.ctrlKey || event.metaKey)) {\n      return;\n    }\n\n    switch (event.key) {\n      case 'i':  // ctrl-i: import\n        event.preventDefault();\n        this.beginJSONImport();\n        break;\n      case 'e':  // ctrl-e: copy yaml\n      case 'y':  // also ctrl-y\n        event.preventDefault();\n        this.copyText(this.getLocalAutomationYaml(), 'YAML');\n        break;\n      case 'j':  // ctrl-j: copy json\n        event.preventDefault();\n        this.copyText(this.getLocalAutomationJson(), 'JSON');\n        break;\n    }\n  }\n\n  // serialization tests\n  getLocalAutomationYaml(): string {\n    return YAMLStringify(this.localSavedAutomation);\n  }\n\n  getLocalAutomationJson(): string {\n    return JSON.stringify(this.localSavedAutomation, null, 2);\n  }\n\n  // dialog tests\n  beginJSONImport() {\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      data: {yaml: true}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.localSavedAutomation = result;\n        this.saveLocalAutomation();\n      }\n    });\n  }\n\n  beginJSONExport(automation: AutomationEffect[], allowYaml = true) {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: 'Automation', data: automation, yaml: allowYaml},\n      width: '60%'\n    });\n  }\n\n  // utils\n  copyText(text: string, what = '') {  // https://material.angular.io/cdk/clipboard/overview\n    const pending = this.clipboard.beginCopy(text);\n    let remainingAttempts = 3;\n    const attempt = () => {\n      const result = pending.copy();\n      if (!result && --remainingAttempts) {\n        setTimeout(attempt);\n      } else if (result) {\n        pending.destroy();\n        this.snackBar.open(`Successfully copied ${what}`);\n      } else {\n        pending.destroy();\n      }\n    };\n    attempt();\n  }\n}\n","<div class=\"container\">\n  <mat-card>\n    <h1>Automation Editor Playground</h1>\n    <p>Build automation without tying it to a character or spell here.</p>\n    <p class=\"mat-small\">\n      Keyboard shortcuts: <kbd>Ctrl-I</kbd> to import, <kbd>Ctrl-E</kbd> to copy YAML to clipboard, <kbd>Ctrl-J</kbd>\n      to copy JSON to clipboard\n    </p>\n\n    <mat-divider></mat-divider>\n\n    <avr-automation-editor [automation]=\"localSavedAutomation\"\n                           (changed)=\"saveLocalAutomation()\"></avr-automation-editor>\n\n    <div class=\"button-group\">\n      <button mat-flat-button color=\"warn\" (click)=\"clearLocalAutomation()\">Clear</button>\n      <button mat-flat-button (click)=\"beginJSONImport()\" color=\"primary\">Import</button>\n      <button mat-flat-button (click)=\"beginJSONExport(localSavedAutomation)\" color=\"primary\"\n              matTooltip=\"Note that this will not be importable in the Attack or Spell editors.\">\n        Export\n      </button>\n      <button mat-flat-button (click)=\"beginJSONExport(localSavedAutomation, false)\" color=\"primary\"\n              matTooltip=\"Note that this will not be importable in the Attack or Spell editors.\">\n        Export JSON\n      </button>\n    </div>\n\n    <h3>YAML</h3>\n    <pre class=\"text-monospace\" [innerHTML]=\"getLocalAutomationYaml()\"></pre>\n\n    <h3>JSON</h3>\n    <pre class=\"text-monospace\" [innerHTML]=\"getLocalAutomationJson()\"></pre>\n  </mat-card>\n</div>\n\n\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {AutomationEditorDevComponent} from './automation-editor-dev/automation-editor-dev.component';\n\n\nconst devRoutes: Routes = [\n  {path: 'automation', component: AutomationEditorDevComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(devRoutes)],\n  exports: [RouterModule]\n})\nexport class DevRoutingModule {\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MaterialModule} from '../material/material.module';\nimport {AutomationEditorModule} from '../shared/automation-editor/automation-editor.module';\nimport {AutomationEditorDevComponent} from './automation-editor-dev/automation-editor-dev.component';\nimport {DevRoutingModule} from './dev-routing.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    DevRoutingModule,\n    AutomationEditorModule,\n  ],\n  declarations: [\n    AutomationEditorDevComponent\n  ],\n})\nexport class DevModule {\n}\n"],"sourceRoot":"webpack:///","file":"958.d8cbf1a82a1dd651.js"}