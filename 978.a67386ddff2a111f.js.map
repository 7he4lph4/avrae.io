{"version":3,"mappings":"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","names":["constructor","this","ngOnInit","U","selectors","e","n","generateMD","data","t","name","desc","l","items","meta","replace","mdData","copy","select","document","execCommand","setSelectionRange","J","c","M","le","w","getUserPacks","http","get","r","pipe","newPack","post","getPack","putPack","put","_id","deletePack","delete","updatePackSharing","patch","public","getPackEditors","getTemplateItems","getUserTomes","newTome","getTome","putTome","deleteTome","updateTomeSharing","getTomeEditors","getTemplateSpells","validateSpellJSON","x","factory","beginJSONExport","beginMDExport","o","i","shareLink","loaded","owner","discord","getUser","loadEditors","loadItems","hbService","subscribe","success","forEach","push","editors","dialog","open","z","width","k","oxw","beginShare","beginNew","g","Map","getPacks","homebrewService","packs","Set","has","add","owners","set","disableClose","afterClosed","image","new","console","log","Object","assign","commit","router","navigate","packId","relativeTo","route","snackBar","horizontalPosition","error","duration","panelClass","N","Je","beginDelete","I","isOwner","id","dialogRef","close","y","emitChange","moveUp","moveDown","changed","emit","item","O","ensureChangesNotif","deleteItem","beginNewFromJSON","beginNewFromSRD","newLooseItem","back","beginSettings","oe","ngOnDestroy","dismiss","snapshot","paramMap","pack","calcCanEdit","user","canEdit","some","Ne","filter","changesOpen","onAction","se","validator","validatePackJSON","Array","re","getter","namer","packIsValid","Boolean","length","every","objectIsItem","componentInstance","loading","JSON","parse","openFromComponent","ne","html","location","indexOf","te","P","H","spells","generateSpellMD","level","C","school","casttime","ritual","range","concentration","description","higherlevels","F","loadSpells","q","getTomes","tomes","tomeId","E","Q","Y","genDesc","ngOnChanges","L","moveToEditor","customSpellSchool","spell","$","deleteSpell","newFromJSON","newFromSRD","newSpell","tome","ce","R","getAutomation","automation","j","B","It","path","children","component","S","T","D","m","he","p","ue","ie","fe","Ze","Te"],"sources":["./src/app/dashboard/homebrew/items/new-pack-dialog/new-pack-dialog.component.ts","./src/app/dashboard/homebrew/items/new-pack-dialog/new-pack-dialog.component.html","./src/app/dashboard/homebrew/items/pack-markdown-dialog/pack-markdown-dialog.component.ts","./src/app/dashboard/homebrew/items/pack-markdown-dialog/pack-markdown-dialog.component.html","./src/app/dashboard/homebrew/homebrew.service.ts","./src/app/dashboard/homebrew/items/pack-share-dialog/pack-share-dialog.component.html","./src/app/dashboard/homebrew/items/pack-share-dialog/pack-share-dialog.component.ts","./src/app/dashboard/homebrew/items/items.component.html","./src/app/dashboard/homebrew/items/items.component.ts","./src/app/schemas/homebrew/Items.ts","./src/app/dashboard/homebrew/items/pack-delete-dialog/pack-delete-dialog.component.ts","./src/app/dashboard/homebrew/items/pack-options-dialog/pack-options-dialog.component.html","./src/app/dashboard/homebrew/items/pack-delete-dialog/pack-delete-dialog.component.html","./src/app/dashboard/homebrew/items/pack-options-dialog/pack-options-dialog.component.ts","./src/app/dashboard/homebrew/items/pack-detail/item-detail/item-detail.component.html","./src/app/dashboard/homebrew/items/pack-detail/item-detail/item-detail.component.ts","./src/app/dashboard/homebrew/items/pack-detail/pack-detail.component.html","./src/app/dashboard/homebrew/items/pack-detail/pack-detail.component.ts","./src/app/dashboard/homebrew/spells/dialogs/new-tome-dialog.component.ts","./src/app/dashboard/homebrew/spells/dialogs/new-tome-dialog.component.html","./src/app/dashboard/homebrew/spells/dialogs/tome-markdown-dialog/tome-markdown-dialog.component.ts","./src/app/dashboard/homebrew/spells/dialogs/tome-share-dialog.component.html","./src/app/dashboard/homebrew/spells/dialogs/tome-markdown-dialog/tome-markdown-dialog.component.html","./src/app/dashboard/homebrew/spells/dialogs/tome-share-dialog.component.ts","./src/app/dashboard/homebrew/spells/spells.component.html","./src/app/dashboard/homebrew/spells/spells.component.ts","./src/app/dashboard/homebrew/spells/dialogs/tome-delete-dialog.component.ts","./src/app/dashboard/homebrew/spells/dialogs/tome-options-dialog.component.html","./src/app/dashboard/homebrew/spells/dialogs/tome-delete-dialog.component.html","./src/app/dashboard/homebrew/spells/dialogs/tome-options-dialog.component.ts","./src/app/dashboard/homebrew/spells/tome-detail/spell-detail/spell-panel-description/spell-panel-description.component.ts","./src/app/dashboard/homebrew/spells/tome-detail/spell-detail/spell-detail.component.html","./src/app/dashboard/homebrew/spells/tome-detail/spell-detail/spell-detail.component.ts","./src/app/dashboard/homebrew/spells/tome-detail/spell-list/spell-list.component.html","./src/app/dashboard/homebrew/spells/tome-detail/spell-list/spell-list.component.ts","./src/app/dashboard/homebrew/spells/tome-detail/spell-editor/spell-editor.component.html","./src/app/dashboard/homebrew/spells/tome-detail/spell-editor/spell-editor.component.ts","./src/app/dashboard/homebrew/spells/tome-detail/tome-detail.component.html","./src/app/dashboard/homebrew/spells/tome-detail/tome-detail.component.ts","./src/app/dashboard/homebrew/homebrew-routing.module.ts","./src/app/dashboard/homebrew/homebrew.module.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'avr-new-pack-dialog',\n  templateUrl: './new-pack-dialog.component.html',\n  styleUrls: ['./new-pack-dialog.component.css']\n})\nexport class NewPackDialog implements OnInit {\n\n  name: string;\n  public: boolean = false;\n  desc: string = '';\n  image: string = '';\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>New Pack...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n  <p class=\"mat-small\">\n    These settings can be changed at any time.\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close tabindex=\"1\">Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, public: public, image: image, desc: desc}\" [disabled]=\"!name\">\n    Create\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {Pack} from '../../../../schemas/homebrew/Items';\n\n@Component({\n  selector: 'avr-pack-markdown-dialog',\n  templateUrl: './pack-markdown-dialog.component.html',\n  styleUrls: ['./pack-markdown-dialog.component.css'],\n  preserveWhitespaces: true\n})\nexport class PackMarkdownDialog implements OnInit {\n\n  mdData: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { name: string, data: Pack }) {\n    this.generateMD(this.data.data);\n  }\n\n  ngOnInit() {\n  }\n\n  generateMD(pack: Pack) {\n    let markdown: string = '';\n    let title = `# ${pack.name}`;\n    let desc = pack.desc || '';\n\n    markdown += `${title}\\n${desc}\\n\\n`;\n\n    for (let item of pack.items) {\n      let itemtitle = `#### ${item.name}`;\n      markdown += `${itemtitle}\\n${item.meta}\\n___\\n${item.desc}\\n\\n`;\n    }\n    markdown = markdown.replace('\\n', '\\n  '); // markdown newlines\n\n    this.mdData = markdown;\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n}\n","<h2 mat-dialog-title>Markdown - {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <textarea matInput readonly [value]=\"mdData\" placeholder=\"Markdown\" rows=\"10\" #mdElem></textarea>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(mdElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Done</button>\n</mat-dialog-actions>\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {environment} from '../../../environments/environment';\nimport {Item, Pack} from '../../schemas/homebrew/Items';\nimport {Spell, Tome} from '../../schemas/homebrew/Spells';\nimport {ApiResponse, defaultErrorHandler, defaultOptions} from '../APIHelper';\n\nconst itemsUrl = `${environment.apiURL}/homebrew/items`;\nconst spellsUrl = `${environment.apiURL}/homebrew/spells`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HomebrewService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  /* -----PACKS----- */\n  getUserPacks(): Observable<ApiResponse<Pack[]>> {\n    return this.http.get<ApiResponse<Pack[]>>(`${itemsUrl}/me`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  newPack(pack: { name: string, public: boolean, desc: string, image: string }): Observable<ApiResponse<{ packId: string }>> {\n    return this.http.post<ApiResponse<{ packId: string }>>(`${itemsUrl}`, pack, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  getPack(id): Observable<ApiResponse<Pack>> {\n    return this.http.get<ApiResponse<Pack>>(`${itemsUrl}/${id}`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  putPack(pack: Pack): Observable<ApiResponse<string>> {\n    // @ts-ignore\n    return this.http.put<ApiResponse<string>>(`${itemsUrl}/${pack._id}`, pack, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  deletePack(pack: Pack): Observable<ApiResponse<string>> {\n    // @ts-ignore\n    return this.http.delete<ApiResponse<string>>(`${itemsUrl}/${pack._id}`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  updatePackSharing(id: string, isPublic: boolean): Observable<ApiResponse<string>> {\n    return this.http.patch<ApiResponse<string>>(`${itemsUrl}/${id}/sharing`, {public: isPublic}, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  getPackEditors(id: string): Observable<ApiResponse<string[]>> {\n    return this.http.get<ApiResponse<string[]>>(`${itemsUrl}/${id}/editors`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  getTemplateItems(): Observable<ApiResponse<Item[]>> {\n    return this.http.get<ApiResponse<Item[]>>(`${itemsUrl}/srd`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  /* -----TOMES----- */\n  getUserTomes(): Observable<ApiResponse<Tome[]>> {\n    return this.http.get<ApiResponse<Tome[]>>(`${spellsUrl}/me`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  newTome(tome: { name: string, public: boolean, desc: string, image: string }): Observable<ApiResponse<{ tomeId: string }>> {\n    return this.http.post<ApiResponse<{ tomeId: string }>>(`${spellsUrl}`, tome, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  getTome(id): Observable<ApiResponse<Tome>> {\n    return this.http.get<ApiResponse<Tome>>(`${spellsUrl}/${id}`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  putTome(tome: Tome): Observable<ApiResponse<string>> {\n    return this.http.put<ApiResponse<string>>(`${spellsUrl}/${tome._id}`, tome, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  deleteTome(tome: Tome): Observable<ApiResponse<string>> {\n    return this.http.delete<ApiResponse<string>>(`${spellsUrl}/${tome._id}`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  updateTomeSharing(id: string, isPublic: boolean): Observable<ApiResponse<string>> {\n    return this.http.patch<ApiResponse<string>>(`${spellsUrl}/${id}/sharing`, {public: isPublic}, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  getTomeEditors(id: string): Observable<ApiResponse<string[]>> {\n    return this.http.get<ApiResponse<string[]>>(`${spellsUrl}/${id}/editors`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  getTemplateSpells(): Observable<ApiResponse<Spell[]>> {\n    return this.http.get<ApiResponse<Spell[]>>(`${spellsUrl}/srd`, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n\n  validateSpellJSON(data: object): Observable<ApiResponse<{ success: boolean, result: string }>> {\n    return this.http.post<ApiResponse<{ success: boolean, result: string }>>(`${spellsUrl}/validate`, data, defaultOptions())\n      .pipe(catchError(defaultErrorHandler));\n  }\n}\n","<h2 mat-dialog-title>Share {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <p>\n      Owner: {{(owner | async)?.username}}\n    </p>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n    <mat-form-field *ngIf=\"public\">\n      <input matInput readonly [value]=\"shareLink\" placeholder=\"View Link\" #shareLinkElem>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(shareLinkElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Editors\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <p>To add or remove an editor, run the command <kbd>!pack editor @user</kbd> in Discord!</p>\n      <mat-list *ngIf=\"editors?.length\">\n        <mat-list-item *ngFor=\"let editor of editors\">{{(editor | async)?.username}}</mat-list-item>\n      </mat-list>\n    </mat-expansion-panel>\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Export\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class=\"button-row\" *ngIf=\"loaded\">\n        <button mat-raised-button color=\"primary\" (click)=\"beginJSONExport()\">Export to JSON\n        </button>\n        <button mat-raised-button color=\"primary\" (click)=\"beginMDExport()\">Export to Homebrewery\n        </button>\n      </div>\n      <div *ngIf=\"!loaded\">\n        <mat-spinner [diameter]=\"24\"></mat-spinner>\n      </div>\n    </mat-expansion-panel>\n\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{public: public}\">\n    Done\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\nimport {DiscordUser} from '../../../../schemas/Discord';\nimport {Pack} from '../../../../schemas/homebrew/Items';\nimport {UserInfo} from '../../../../schemas/UserInfo';\nimport {JSONExportDialog} from '../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {DiscordService} from '../../../../shared/discord.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {PackMarkdownDialog} from '../pack-markdown-dialog/pack-markdown-dialog.component';\n\n@Component({\n  selector: 'avr-pack-share-dialog',\n  templateUrl: './pack-share-dialog.component.html',\n  styleUrls: ['./pack-share-dialog.component.css']\n})\nexport class PackShareDialog implements OnInit {\n\n  public: boolean;\n  shareLink: string;\n  loaded: boolean;\n\n  owner: Observable<DiscordUser>;\n  editors: Observable<DiscordUser>[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Pack, private dialog: MatDialog,\n              private hbService: HomebrewService, private discord: DiscordService) {\n    this.public = data.public;\n    this.shareLink = `https://avrae.io/homebrew/items/${data._id}`;\n    this.loaded = data.items !== undefined;\n  }\n\n  ngOnInit() {\n    this.owner = this.discord.getUser(this.data.owner);\n    this.loadEditors();\n    if (!this.loaded) {\n      this.loadItems();\n    }\n  }\n\n  loadItems() {\n    const id = this.data._id;\n    this.hbService.getPack(id)\n      .subscribe(response => {\n        if (!response.success) {\n          return;\n        }\n        this.data = response.data;\n        this.loaded = true;\n      });\n  }\n\n  loadEditors() {\n    const id = this.data._id;\n    this.hbService.getPackEditors(id)\n      .subscribe(response => {\n        if (!response.success) {\n          return;\n        }\n        const out = [];\n        response.data.forEach(eid => out.push(this.discord.getUser(eid)));\n        this.editors = out;\n      });\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.data.name, data: this.data.items},\n      width: '60%'\n    });\n  }\n\n  beginMDExport() {\n    this.dialog.open(PackMarkdownDialog, {\n      data: {name: this.data.name, data: this.data},\n      width: '60%'\n    });\n  }\n}\n","<mat-toolbar color=\"primary\" class=\"mat-elevation-z2\">\n  <span>Your Packs</span>\n  <span class=\"toolbar-spacer\"></span>\n  <span><button mat-icon-button (click)=\"beginNew()\">\n    <mat-icon aria-label=\"New Pack\">add</mat-icon>\n  </button></span>\n</mat-toolbar>\n\n<div class=\"container\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-around\" *ngIf=\"packs && packs.length\">\n  <div class=\"pack-tile\" *ngFor=\"let pack of packs\" fxFlex=\"32%\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>{{pack.name}}</mat-card-title>\n        <mat-card-subtitle>By {{owners.get(pack.owner)?.username || 'loading...'}} - {{pack.numItems}} items\n        </mat-card-subtitle>\n      </mat-card-header>\n      <img mat-card-image [src]=\"pack.image || '../../../../assets/img/pack.png'\" alt=\"Pack Image\">\n      <mat-card-content *ngIf=\"pack.desc\">\n        <p>\n          {{pack.desc}}\n        </p>\n      </mat-card-content>\n      <mat-card-actions>\n        <a mat-button routerLink=\"{{pack._id}}\">EDIT</a>\n        <button mat-button (click)=\"beginShare(pack)\">SHARE</button>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"packs && !packs.length\">\n  <mat-card>\n    <p>Looks like you don't have any packs yet.</p>\n    <button mat-raised-button color=\"accent\" (click)=\"beginNew()\">Create One</button>\n  </mat-card>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {DiscordUser} from '../../../schemas/Discord';\nimport {Pack} from '../../../schemas/homebrew/Items';\nimport {DiscordService} from '../../../shared/discord.service';\nimport {HomebrewService} from '../homebrew.service';\nimport {NewPackDialog} from './new-pack-dialog/new-pack-dialog.component';\nimport {PackShareDialog} from './pack-share-dialog/pack-share-dialog.component';\n\n@Component({\n  selector: 'avr-items',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css']\n})\nexport class ItemsComponent implements OnInit {\n\n  packs: Pack[];\n  owners: Map<string, DiscordUser> = new Map<string, DiscordUser>();\n\n  constructor(private homebrewService: HomebrewService, private discord: DiscordService,\n              private dialog: MatDialog, private router: Router, private route: ActivatedRoute,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.getPacks();\n  }\n\n  getPacks(): void {\n    this.homebrewService.getUserPacks()\n      .subscribe(response => {\n        if (!response.success) {\n          return;\n        }\n        this.packs = response.data;\n        const requested = new Set();\n        for (const pack of response.data) {\n          if (!requested.has(pack.owner)) {\n            requested.add(pack.owner);\n            this.discord.getUser(pack.owner)\n              .subscribe(user => this.owners.set(pack.owner, user));\n          }\n        }\n      });\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewPackDialog, {\n      width: '60%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let data = {name: result.name, public: result.public, desc: result.desc, image: result.image};\n        this.new(data);\n      }\n    });\n  }\n\n  beginShare(pack: Pack) {\n    const dialogRef = this.dialog.open(PackShareDialog, {\n      data: pack,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        pack = Object.assign(pack, result);\n        this.commit(pack);\n      }\n    });\n  }\n\n  new(pack: { name: string, public: boolean, desc: string, image: string }) {\n    // HTTP POST /homebrew/items\n    this.homebrewService.newPack(pack)\n      .subscribe(result => {\n        if (result.success) {\n          this.router.navigate([result.data.packId], {relativeTo: this.route});\n        }\n      });\n  }\n\n  commit(pack: Pack) {\n    // HTTP PUT /homebrew/items/:pack\n    this.homebrewService.updatePackSharing(pack._id, pack.public)\n      .subscribe(result => {\n        if (result.success) {\n          this.snackBar.open('Pack sharing options updated.', null, {horizontalPosition: 'right'});\n        } else {\n          this.snackBar.open(`Error: ${result.error}`, 'Close', {\n            horizontalPosition: 'right',\n            duration: -1,\n            panelClass: 'preserve-whitespace'\n          });\n        }\n      });\n  }\n\n}\n","export const REQUIRED_ITEM_PROPS = ['name'];\n\nexport class Pack {\n  name: string;\n  owner: string;\n  public: boolean;\n  desc: string;\n  image: string;\n  items?: Item[];\n  numItems?: number;\n  _id: string;\n}\n\nexport class Item {\n  name: string;\n  meta: string;\n  desc: string;\n  image?: string;\n\n  constructor() {\n    this.name = 'New Item';\n    this.meta = '';\n    this.desc = '';\n  }\n}\n\nexport class StructuredItem extends Item {\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {Pack} from '../../../../schemas/homebrew/Items';\n\n@Component({\n  selector: 'avr-pack-delete-dialog',\n  templateUrl: './pack-delete-dialog.component.html',\n  styleUrls: ['./pack-delete-dialog.component.css']\n})\nexport class PackDeleteDialog implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Pack) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>{{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, image: image, desc: desc}\" [disabled]=\"!name\">\n    Save\n  </button>\n  <button mat-raised-button color=\"warn\" (click)=\"beginDelete()\" *ngIf=\"isOwner\">Delete</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Deleting {{data.name}}...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Are you sure you want to delete {{data.name}}? This will remove the pack from all editors' libraries, and\n    invalidate any sharing links. <b>This cannot be undone.</b>\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" color=\"warn\">\n    Delete\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {Pack} from '../../../../schemas/homebrew/Items';\nimport {PackDeleteDialog} from '../pack-delete-dialog/pack-delete-dialog.component';\nimport {getUser} from '../../../APIHelper';\n\n@Component({\n  selector: 'avr-pack-options-dialog',\n  templateUrl: './pack-options-dialog.component.html',\n  styleUrls: ['./pack-options-dialog.component.css']\n})\nexport class PackOptionsDialog implements OnInit {\n\n  name: string;\n  image: string;\n  desc: string;\n  isOwner: boolean;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Pack, private dialog: MatDialog,\n              private dialogRef: MatDialogRef<PackOptionsDialog>) {\n    this.name = data.name;\n    this.image = data.image;\n    this.desc = data.desc;\n    this.isOwner = getUser().id === data.owner;\n  }\n\n  ngOnInit() {\n  }\n\n  beginDelete() {\n    const dialogRef = this.dialog.open(PackDeleteDialog, {\n      data: this.data,\n      width: '40%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.dialogRef.close({delete: true});\n      }\n    });\n  }\n\n}\n","<mat-expansion-panel (opened)=\"opened.emit()\">\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      <div>\n        {{item.name}}\n      </div>\n    </mat-panel-title>\n    <mat-panel-description markdown [data]=\"item.meta.split('\\n')[0]\">\n    </mat-panel-description>\n  </mat-expansion-panel-header>\n  <ng-template matExpansionPanelContent>\n    <div class=\"form-container\">\n      <div fxLayout=\"row\" fxLayoutGap=\"4px\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Name\" (change)=\"emitChange()\" [(ngModel)]=\"item.name\">\n        </mat-form-field>\n        <mat-form-field fxFlex *ngIf=\"item.image != undefined\">\n          <input matInput placeholder=\"Image URL\" (change)=\"emitChange()\" [(ngModel)]=\"item.image\">\n        </mat-form-field>\n      </div>\n      <mat-form-field>\n        <textarea matInput placeholder=\"Meta\" rows=\"3\" (change)=\"emitChange()\" [(ngModel)]=\"item.meta\"></textarea>\n      </mat-form-field>\n      <mat-form-field>\n        <textarea matInput placeholder=\"Description\" rows=\"7\" (change)=\"emitChange()\" [(ngModel)]=\"item.desc\"></textarea>\n      </mat-form-field>\n    </div>\n    <div class=\"actions\" fxLayout=\"row\">\n      <span fxFlex *ngIf=\"item.image === undefined\">\n        <button mat-icon-button matTooltip=\"Add image\" (click)=\"item.image=''; emitChange()\">\n          <mat-icon aria-label=\"Add image\">add_photo_alternate</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Export to JSON\" (click)=\"beginJSONExport()\">\n          <mat-icon aria-label=\"Export to JSON\">vertical_align_top</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isFirst\">\n        <button mat-icon-button matTooltip=\"Move Up\" (click)=\"moveUp.emit()\">\n          <mat-icon aria-label=\"Move Up\">arrow_upward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isLast\">\n        <button mat-icon-button matTooltip=\"Move Down\" (click)=\"moveDown.emit()\">\n          <mat-icon aria-label=\"Move Down\">arrow_downward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex=\"grow\"></span>\n      <span fxFlex>\n        <button mat-icon-button color=\"warn\" (click)=\"delete.emit()\">\n          <mat-icon aria-label=\"Delete\">delete</mat-icon>\n        </button>\n      </span>\n    </div>\n  </ng-template>\n</mat-expansion-panel>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Item} from '../../../../../schemas/homebrew/Items';\nimport {JSONExportDialog} from '../../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\n\n@Component({\n  selector: 'avr-item-detail',\n  templateUrl: './item-detail.component.html',\n  styleUrls: ['./item-detail.component.css']\n})\nexport class ItemDetailComponent implements OnInit {\n\n  @Input() item: Item;\n  @Input() isFirst: boolean;\n  @Input() isLast: boolean;\n  @Output() moveUp = new EventEmitter();\n  @Output() moveDown = new EventEmitter();\n  @Output() changed = new EventEmitter();\n  @Output() opened = new EventEmitter();\n  @Output() delete = new EventEmitter();\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n  }\n\n  emitChange() {\n    this.changed.emit();\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.item.name, data: this.item},\n      width: '60%'\n    });\n  }\n\n}\n","<div *ngIf=\"pack && canEdit != undefined\">\n  <mat-toolbar color=\"primary\" class=\"pack-toolbar\">\n    <span>\n      <button mat-icon-button (click)=\"back()\">\n        <mat-icon aria-label=\"Back\">arrow_back</mat-icon>\n      </button>\n    </span>\n    <span>\n      {{pack.name}}\n    </span>\n    <span class=\"toolbar-spacer\"></span>\n    <span>\n      <button mat-icon-button (click)=\"commit()\">\n        <mat-icon aria-label=\"Save\">save</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginSettings()\">\n        <mat-icon aria-label=\"Settings\">settings</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginShare()\">\n        <mat-icon aria-label=\"Share\">launch</mat-icon>\n      </button>\n    </span>\n  </mat-toolbar>\n\n  <div class=\"container\" fxLayout=\"row\" fxLayoutGap=\"8px\">\n    <div class=\"item-list\" fxFlex=\"grow\" *ngIf=\"pack.items.length\">\n      <mat-accordion>\n        <avr-item-detail *ngFor=\"let item of pack.items; first as isFirst; last as isLast\" [item]=\"item\"\n                         [isFirst]=\"isFirst\" [isLast]=\"isLast\" (moveUp)=\"moveUp(item)\" (moveDown)=\"moveDown(item)\"\n                         (changed)=\"ensureChangesNotif()\" (opened)=\"selectedItem = item\"\n                         (delete)=\"deleteItem(item)\"></avr-item-detail>\n        <mat-card fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"new-item-card\">\n          <span class=\"no-text-cursor\">New...</span>\n          <span class=\"toolbar-spacer\"></span>\n          <span>\n            <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"beginNewFromJSON()\">\n              <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n            </button>\n            <button mat-icon-button matTooltip=\"Copy SRD item\" (click)=\"beginNewFromSRD()\">\n              <mat-icon aria-label=\"From existing item\">scanner</mat-icon>\n            </button>\n            <button mat-icon-button (click)=\"newLooseItem()\">\n              <mat-icon aria-label=\"New\">add</mat-icon>\n            </button>\n          </span>\n        </mat-card>\n      </mat-accordion>\n    </div>\n\n    <div class=\"item-list\" fxFlex=\"grow\" *ngIf=\"!pack.items.length\">\n      <mat-card>\n        <p>Looks like this pack is empty.</p>\n        <button mat-raised-button color=\"accent\" (click)=\"newLooseItem()\">Make an Item</button>\n        <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"beginNewFromJSON()\">\n          <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n        </button>\n        <button mat-icon-button matTooltip=\"Copy SRD item\" (click)=\"beginNewFromSRD()\">\n          <mat-icon aria-label=\"From existing item\">scanner</mat-icon>\n        </button>\n      </mat-card>\n    </div>\n\n    <div class=\"item-preview mat-typography mat-elevation-z3\" fxFlex=\"grow\" fxHide fxShow.gt-xs=\"true\">\n      <avr-discord-embed *ngIf=\"selectedItem\" [author]=\"{name: user.username, icon_url: user.avatarUrl}\"\n                         [title]=\"selectedItem.name\" [description]=\"selectedItem.meta\"\n                         [fields]=\"[{name: 'Description', value: selectedItem.desc}]\"\n                         [thumbnail]=\"selectedItem.image\"\n                         [footer]=\"{text: 'Homebrew content.', icon_url: '../../../../assets/img/homebrew.png'}\">\n      </avr-discord-embed>\n      <avr-discord-embed *ngIf=\"!selectedItem\" [author]=\"{name: user.username, icon_url: user.avatarUrl}\"\n                         title=\"No item selected.\" description=\"Click on an item on the left to see a preview!\"\n                         [footer]=\"{text: 'Homebrew content.', icon_url: '../../../../assets/img/homebrew.png'}\">\n      </avr-discord-embed>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"!pack\">\n  <div class=\"container\">\n    <mat-card>\n      <mat-spinner [diameter]=\"24\"></mat-spinner>\n      <p class=\"mat-error\" *ngIf=\"error\">\n        {{error}}\n      </p>\n    </mat-card>\n  </div>\n</div>\n\n<div *ngIf=\"pack && !canEdit\">\n  <div class=\"container\">\n    <mat-card>\n      <p>You do not have permission to edit this pack.</p>\n      <button mat-raised-button color=\"accent\" (click)=\"back()\">Go Back</button>\n    </mat-card>\n  </div>\n</div>\n","import {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Location} from '@angular/common';\nimport {Component, OnDestroy, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {map} from 'rxjs/operators';\nimport {Item, Pack, REQUIRED_ITEM_PROPS} from '../../../../schemas/homebrew/Items';\nimport {UserInfo} from '../../../../schemas/UserInfo';\nimport {JSONImportDialog} from '../../../../shared/dialogs/json-import-dialog/json-import-dialog.component';\nimport {SRDCopyDialog} from '../../../../shared/dialogs/srd-copy-dialog/srd-copy-dialog.component';\nimport {ValidationSnackbar} from '../../../../shared/validation-snackbar/validation-snackbar.component';\nimport {getUser} from '../../../APIHelper';\nimport {DashboardService} from '../../../dashboard.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {PackOptionsDialog} from '../pack-options-dialog/pack-options-dialog.component';\nimport {PackShareDialog} from '../pack-share-dialog/pack-share-dialog.component';\n\n@Component({\n  selector: 'avr-pack-detail',\n  templateUrl: './pack-detail.component.html',\n  styleUrls: ['./pack-detail.component.scss']\n})\nexport class PackDetailComponent implements OnInit, OnDestroy {\n\n  pack: Pack;\n  user: UserInfo = getUser();\n  canEdit: boolean;\n  isOwner: boolean;\n  changesOpen = false;\n  selectedItem: Item;\n  error: string;\n\n  constructor(private route: ActivatedRoute, private homebrewService: HomebrewService,\n              private dashboardService: DashboardService, private location: Location, private dialog: MatDialog,\n              private router: Router, private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.getPack();\n  }\n\n  ngOnDestroy() {\n    this.snackBar.dismiss();\n  }\n\n  getPack() {\n    const id = this.route.snapshot.paramMap.get('pack');\n    this.homebrewService.getPack(id)\n      .subscribe(response => {\n        if (response.success) {\n          this.pack = response.data;\n          this.calcCanEdit();\n        } else {\n          this.error = response.error;\n        }\n      });\n  }\n\n  calcCanEdit() {\n    if (!this.pack || !this.user) {\n      return;\n    }\n    this.isOwner = this.user.id === this.pack.owner;\n    if (this.isOwner) {\n      this.canEdit = true;\n    } else {\n      const id = this.pack._id;\n      this.homebrewService.getPackEditors(id)\n        .subscribe(response => {\n          if (response.success) {\n            this.canEdit = response.data.some(e => e === this.user.id);\n          } else {\n            this.error = response.error;\n          }\n        });\n    }\n  }\n\n  newLooseItem() {\n    this.pack.items.push(new Item());\n    this.ensureChangesNotif();\n  }\n\n  deleteItem(item: Item) {\n    this.pack.items = this.pack.items.filter(obj => obj !== item);\n    this.ensureChangesNotif();\n  }\n\n  ensureChangesNotif() {\n    if (!this.changesOpen) {\n      this.changesOpen = true;\n      let snackBarRef = this.snackBar.open('You have unsaved changes!', 'Save', {duration: -1, horizontalPosition: 'right'});\n\n      snackBarRef.onAction().subscribe(() => {\n        this.commit();\n      });\n    }\n  }\n\n  beginShare() {\n    const dialogRef = this.dialog.open(PackShareDialog, {\n      data: this.pack,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        this.pack = Object.assign(this.pack, result);\n        this.commit();\n      }\n    });\n  }\n\n  beginSettings() {\n    const dialogRef = this.dialog.open(PackOptionsDialog, {\n      data: this.pack,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        if (result.delete) {\n          this.delete();\n        } else {\n          this.pack = Object.assign(this.pack, result);\n          this.commit();\n        }\n      }\n    });\n  }\n\n  beginNewFromJSON() {\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {validator: (data) => this.validatePackJSON(dialogRef, data)}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        const item: Item | Item[] = result;\n        console.log(item);\n        if (item instanceof Array) {\n          this.pack.items.push(...item);\n        } else {\n          this.pack.items.push(item);\n        }\n        this.ensureChangesNotif();\n      }\n    });\n  }\n\n  // SRD import\n  beginNewFromSRD() {\n    const dialogRef = this.dialog.open(SRDCopyDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {\n        getter: () => this.homebrewService.getTemplateItems().pipe(map((value) => value.data)),\n        namer: a => a.name\n      }\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.pack.items.push(result);\n        this.ensureChangesNotif();\n      }\n    });\n  }\n\n  // validation\n  packIsValid(parsed) {\n    if (parsed instanceof Array) {\n      return Boolean(parsed.length) && parsed.every(item => this.objectIsItem(item));\n    } else if (parsed) {\n      return this.objectIsItem(parsed);\n    }\n    return false;\n  }\n\n  validatePackJSON(dialogRef, parsed) {\n    dialogRef.componentInstance.loading = false;\n    if (this.packIsValid(parsed)) {\n      dialogRef.close(JSON.parse(dialogRef.componentInstance.data));\n    } else {\n      dialogRef.componentInstance.error = 'Invalid pack data';\n    }\n  }\n\n  objectIsItem(obj: any): obj is Item {\n    return REQUIRED_ITEM_PROPS.every(v => v in obj);\n  }\n\n  commit() {\n    // HTTP PUT /homebrew/items/:pack\n    this.homebrewService.putPack(this.pack)\n      .subscribe(result => {\n        this.changesOpen = false;\n        if (result.success) {\n          this.snackBar.open(`${result.data} Use \"!pack ${this.pack.name}\" to activate the pack in Discord!`, null, {horizontalPosition: 'right'});\n        } else {\n          this.snackBar.openFromComponent(ValidationSnackbar, {\n            data: {\n              html: `${result.error}`\n            },\n            horizontalPosition: 'right',\n            duration: -1\n          });\n        }\n      });\n  }\n\n  delete() {\n    // HTTP DELETE /homebrew/items/:pack\n    this.homebrewService.deletePack(this.pack)\n      .subscribe(result => {\n        if (!result.success) {\n          this.snackBar.openFromComponent(ValidationSnackbar, {\n            data: {\n              html: `${result.error}`\n            },\n            horizontalPosition: 'right',\n            duration: -1\n          }\n          );\n        } else {\n          this.router.navigate(['../'], {relativeTo: this.route});\n        }\n      });\n  }\n\n  back() {\n    this.location.back();\n  }\n\n  // move items in list\n  moveUp(item: Item) {\n    const index = this.pack.items.indexOf(item);\n    const newIndex = index - 1;\n    if (newIndex > -1) {\n      moveItemInArray(this.pack.items, index, newIndex);\n      this.ensureChangesNotif();\n    }\n  }\n\n  moveDown(item: Item) {\n    const index = this.pack.items.indexOf(item);\n    const newIndex = index + 1;\n    if (newIndex < this.pack.items.length) {\n      moveItemInArray(this.pack.items, index, newIndex);\n      this.ensureChangesNotif();\n    }\n  }\n}\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'avr-new-pack-dialog',\n  templateUrl: './new-tome-dialog.component.html',\n  styleUrls: ['./new-tome-dialog.component.css']\n})\nexport class NewTomeDialog implements OnInit {\n\n  name: string;\n  public: boolean = false;\n  desc: string = '';\n  image: string = '';\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>New Tome...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n  <p class=\"mat-small\">\n    These settings can be changed at any time.\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close tabindex=\"1\">Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, public: public, image: image, desc: desc}\" [disabled]=\"!name\">\n    Create\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {parseComponents, parseLevel, parseSchool, Spell, Tome} from '../../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-tome-markdown-dialog',\n  templateUrl: './tome-markdown-dialog.component.html',\n  styleUrls: ['./tome-markdown-dialog.component.css'],\n  preserveWhitespaces: true\n})\nexport class TomeMarkdownDialog implements OnInit {\n\n  mdData: string;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: { name: string, data: Tome }) {\n    this.generateMD(this.data.data);\n  }\n\n  ngOnInit() {\n  }\n\n  generateMD(tome: Tome) {\n    let markdown = '';\n    const title = `# ${tome.name}`;\n    const desc = tome.desc || '';\n\n    markdown += `${title}\\n${desc}\\n\\n`;\n\n    for (const spell of tome.spells) {\n      markdown += this.generateSpellMD(spell);\n    }\n    markdown = markdown.replace('\\n', '\\n  '); // markdown newlines\n\n    this.mdData = markdown;\n  }\n\n  generateSpellMD(spell: Spell) {\n    const title = `#### ${spell.name}`;\n    const schlev = spell.level ?\n      `${parseLevel(spell.level)} ${parseSchool(spell.school)}` :\n      `${parseSchool(spell.school)} ${parseLevel(spell.level)}`;\n\n    const meta = `- **Casting Time:** ${spell.casttime + (spell.ritual ? ' (ritual)' : '')}\n- **Range:** ${spell.range}\n- **Components:** ${parseComponents(spell)}\n- **Duration:** ${(spell.concentration ? 'Concentration, up to ' : '') + spell.duration}`;\n\n    let desc = spell.description;\n\n    if (spell.higherlevels) {\n      desc = `${desc}\\n\\n**At Higher Levels:** ${spell.higherlevels}`;\n    }\n\n    return `${title}\n*${schlev}*\n___\n${meta}\\n\n${desc}\\n\\n`;\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n}\n","<h2 mat-dialog-title>Share {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <p>\n      Owner: {{(owner | async)?.username}}\n    </p>\n\n    <mat-slide-toggle [(ngModel)]=\"public\">Allow public to view</mat-slide-toggle>\n    <mat-form-field *ngIf=\"public\">\n      <input matInput readonly [value]=\"shareLink\" placeholder=\"View Link\" #shareLinkElem>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(shareLinkElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Editors\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <p>To add or remove an editor, run the command <kbd>!tome editor @user</kbd> in Discord!</p>\n      <mat-list *ngIf=\"editors?.length\">\n        <mat-list-item *ngFor=\"let editor of editors\">{{(editor | async)?.username}}</mat-list-item>\n      </mat-list>\n    </mat-expansion-panel>\n    <mat-expansion-panel class=\"mat-elevation-z0\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Export\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <div class=\"button-row\" *ngIf=\"loaded\">\n        <button mat-raised-button color=\"primary\" (click)=\"beginJSONExport()\">Export to JSON\n        </button>\n        <button mat-raised-button color=\"primary\" (click)=\"beginMDExport()\">Export to Homebrewery\n        </button>\n      </div>\n      <div *ngIf=\"!loaded\">\n        <mat-spinner [diameter]=\"24\"></mat-spinner>\n      </div>\n    </mat-expansion-panel>\n\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{public: public}\">\n    Done\n  </button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Markdown - {{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <textarea matInput readonly [value]=\"mdData\" placeholder=\"Markdown\" rows=\"10\" #mdElem></textarea>\n      <button mat-button matSuffix mat-icon-button aria-label=\"Copy\" (click)=\"copy(mdElem)\"\n              matTooltip=\"Copy to clipboard\">\n        <mat-icon>file_copy</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Done</button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialog} from '@angular/material/dialog';\nimport {Observable} from 'rxjs';\nimport {DiscordUser} from '../../../../schemas/Discord';\nimport {Tome} from '../../../../schemas/homebrew/Spells';\nimport {JSONExportDialog} from '../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\nimport {DiscordService} from '../../../../shared/discord.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {TomeMarkdownDialog} from './tome-markdown-dialog/tome-markdown-dialog.component';\n\n@Component({\n  selector: 'avr-pack-share-dialog',\n  templateUrl: './tome-share-dialog.component.html',\n  styleUrls: ['./tome-share-dialog.component.css']\n})\nexport class TomeShareDialog implements OnInit {\n\n  public: boolean;\n  shareLink: string;\n  loaded: boolean;\n\n  owner: Observable<DiscordUser>;\n  editors: Observable<DiscordUser>[];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Tome, private dialog: MatDialog,\n              private hbService: HomebrewService, private discord: DiscordService) {\n    this.public = data.public;\n    this.shareLink = `https://avrae.io/homebrew/spells/${data._id}`;\n    this.loaded = data.spells !== undefined;\n  }\n\n  ngOnInit() {\n    this.owner = this.discord.getUser(this.data.owner);\n    this.loadEditors();\n    if (!this.loaded) {\n      this.loadSpells();\n    }\n  }\n\n  loadEditors() {\n    const id = this.data._id;\n    this.hbService.getTomeEditors(id)\n      .subscribe(response => {\n        const out = [];\n        response.data.forEach(eid => out.push(this.discord.getUser(eid)));\n        this.editors = out;\n      });\n  }\n\n  loadSpells() {\n    const id = this.data._id;\n    this.hbService.getTome(id)\n      .subscribe(response => {\n        if (!response.success) {\n          return;\n        }\n        this.data = response.data;\n        this.loaded = true;\n      });\n  }\n\n  copy(inputElement) {\n    inputElement.select();\n    document.execCommand('copy');\n    inputElement.setSelectionRange(0, 0);\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.data.name, data: this.data.spells},\n      width: '60%'\n    });\n  }\n\n  beginMDExport() {\n    this.dialog.open(TomeMarkdownDialog, {\n      data: {name: this.data.name, data: this.data},\n      width: '60%'\n    });\n  }\n\n}\n","<mat-toolbar color=\"primary\" class=\"mat-elevation-z2\">\n  <span>Your Tomes</span>\n  <span class=\"toolbar-spacer\"></span>\n  <span><button mat-icon-button (click)=\"beginNew()\">\n    <mat-icon aria-label=\"New Tome\">add</mat-icon>\n  </button></span>\n</mat-toolbar>\n\n<div class=\"container\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-around\" *ngIf=\"tomes && tomes.length\">\n  <div class=\"tome-tile\" *ngFor=\"let tome of tomes\" fxFlex=\"32%\">\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>{{tome.name}}</mat-card-title>\n        <mat-card-subtitle>By {{owners.get(tome.owner)?.username || 'loading...'}} - {{tome.numSpells}} spells\n        </mat-card-subtitle>\n      </mat-card-header>\n      <img mat-card-image [src]=\"tome.image || '../../../../assets/img/tome.png'\" alt=\"Tome Image\">\n      <mat-card-content *ngIf=\"tome.desc\">\n        <p>\n          {{tome.desc}}\n        </p>\n      </mat-card-content>\n      <mat-card-actions>\n        <a mat-button routerLink=\"{{tome._id}}\">EDIT</a>\n        <button mat-button (click)=\"beginShare(tome)\">SHARE</button>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n</div>\n\n<div class=\"container\" *ngIf=\"tomes && !tomes.length\">\n  <mat-card>\n    <p>Looks like you don't have any tomes yet.</p>\n    <button mat-raised-button color=\"accent\" (click)=\"beginNew()\">Create One</button>\n  </mat-card>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {of} from 'rxjs';\nimport {DiscordUser} from '../../../schemas/Discord';\nimport {Tome} from '../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../schemas/UserInfo';\nimport {DiscordService} from '../../../shared/discord.service';\nimport {HomebrewService} from '../homebrew.service';\nimport {NewTomeDialog} from './dialogs/new-tome-dialog.component';\nimport {TomeShareDialog} from './dialogs/tome-share-dialog.component';\n\n@Component({\n  selector: 'avr-spells',\n  templateUrl: './spells.component.html',\n  styleUrls: ['./spells.component.css']\n})\nexport class SpellsComponent implements OnInit {\n\n  tomes: Tome[];\n  owners: Map<string, DiscordUser> = new Map<string, DiscordUser>();\n\n  constructor(private homebrewService: HomebrewService, private discord: DiscordService,\n              private dialog: MatDialog, private router: Router, private route: ActivatedRoute,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.getTomes();\n  }\n\n  getTomes(): void {\n    this.homebrewService.getUserTomes()\n      .subscribe(response => {\n        console.log(response);\n        if (!response.success) {\n          return;\n        }\n        this.tomes = response.data;\n        const requested = new Set();\n        for (const tome of response.data) {\n          if (!requested.has(tome.owner)) {\n            requested.add(tome.owner);\n            this.discord.getUser(tome.owner)\n              .subscribe(user => this.owners.set(tome.owner, user));\n          }\n        }\n      });\n  }\n\n  beginNew() {\n    const dialogRef = this.dialog.open(NewTomeDialog, {\n      width: '60%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let data = {name: result.name, public: result.public, desc: result.desc, image: result.image};\n        this.new(data);\n      }\n    });\n  }\n\n  beginShare(tome: Tome) {\n    const dialogRef = this.dialog.open(TomeShareDialog, {\n      data: tome,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        tome = Object.assign(tome, result);\n        this.commit(tome);\n      }\n    });\n  }\n\n  new(tome: { name: string, public: boolean, desc: string, image: string }) {\n    // HTTP POST /homebrew/spells\n    this.homebrewService.newTome(tome)\n      .subscribe(result => {\n        if (result.success) {\n          this.router.navigate([result.data.tomeId], {relativeTo: this.route});\n        }\n      });\n  }\n\n  commit(tome: Tome) {\n    // HTTP PUT /homebrew/spells/:tome\n    this.homebrewService.updateTomeSharing(tome._id, tome.public)\n      .subscribe(result => {\n        if (result.success) {\n          this.snackBar.open('Tome sharing options updated.', null, {horizontalPosition: 'right'});\n        } else {\n          console.log(result);\n          this.snackBar.open(`Error: ${result.error}`, 'Close', {\n            horizontalPosition: 'right',\n            duration: -1,\n            panelClass: 'preserve-whitespace'\n          });\n        }\n      });\n  }\n\n}\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {Tome} from '../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-tome-delete-dialog',\n  templateUrl: './tome-delete-dialog.component.html',\n})\nexport class TomeDeleteDialog implements OnInit {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Tome) {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<h2 mat-dialog-title>{{data.name}}</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <div class=\"form-container\">\n    <mat-form-field>\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"name\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <input matInput placeholder=\"Image URL\" [(ngModel)]=\"image\">\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"desc\"></textarea>\n    </mat-form-field>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"{name: name, image: image, desc: desc}\" [disabled]=\"!name\">\n    Save\n  </button>\n  <button mat-raised-button color=\"warn\" (click)=\"beginDelete()\" *ngIf=\"isOwner\">Delete</button>\n</mat-dialog-actions>\n","<h2 mat-dialog-title>Deleting {{data.name}}...</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>\n    Are you sure you want to delete {{data.name}}? This will remove the tome from all editors' libraries, and\n    invalidate any sharing links. <b>This cannot be undone.</b>\n  </p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [mat-dialog-close]=\"true\" color=\"warn\">\n    Delete\n  </button>\n</mat-dialog-actions>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {getUser} from '../../../APIHelper';\nimport {Tome} from '../../../../schemas/homebrew/Spells';\nimport {TomeDeleteDialog} from './tome-delete-dialog.component';\n\n@Component({\n  selector: 'avr-tome-options-dialog',\n  templateUrl: './tome-options-dialog.component.html',\n  styleUrls: ['./tome-options-dialog.component.css']\n})\nexport class TomeOptionsDialog implements OnInit {\n\n  name: string;\n  image: string;\n  desc: string;\n  isOwner: boolean;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Tome, private dialog: MatDialog,\n              private dialogRef: MatDialogRef<TomeOptionsDialog>) {\n    this.name = data.name;\n    this.image = data.image;\n    this.desc = data.desc;\n    this.isOwner = getUser().id === data.owner;\n  }\n\n  ngOnInit() {\n  }\n\n  beginDelete() {\n    const dialogRef = this.dialog.open(TomeDeleteDialog, {\n      data: this.data,\n      width: '40%'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.dialogRef.close({delete: true});\n      }\n    });\n  }\n\n}\n","import {Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {parseLevel, parseSchool} from '../../../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-spell-panel-description',\n  template: `\n    <mat-panel-description>{{description}}</mat-panel-description>`\n})\nexport class SpellPanelDescriptionComponent implements OnInit, OnChanges {\n\n  @Input() level: number;\n  @Input() school: string;\n\n  description: string;\n\n  constructor() {\n  }\n\n\n  genDesc() {\n    this.description = this.level ?\n      `${parseLevel(this.level)} ${parseSchool(this.school)}` : `${parseSchool(this.school)} ${parseLevel(this.level)}`;\n  }\n\n  ngOnInit() {\n    this.genDesc();\n  }\n\n  ngOnChanges(changes) {\n    this.genDesc();\n  }\n\n}\n","<mat-expansion-panel (opened)=\"opened.emit()\">\n  <!-- PANEL HEADER -->\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      <div>\n        {{spell.name}}\n      </div>\n    </mat-panel-title>\n    <avr-spell-panel-description [level]=\"spell.level\" [school]=\"spell.school\"></avr-spell-panel-description>\n  </mat-expansion-panel-header>\n  <ng-template matExpansionPanelContent>\n    <div class=\"form-container\">\n      <!-- NAME AND IMAGE -->\n      <div fxLayout=\"row\" fxLayoutGap=\"4px\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Name\" (change)=\"emitChange()\" [(ngModel)]=\"spell.name\">\n        </mat-form-field>\n        <mat-form-field fxFlex *ngIf=\"spell.image != undefined\">\n          <input matInput placeholder=\"Image URL\" (change)=\"emitChange()\" [(ngModel)]=\"spell.image\">\n        </mat-form-field>\n      </div>\n\n      <!-- LEVEL, SCHOOL, RITUAL -->\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"6px\" fxLayoutAlign=\"center center\">\n        <mat-form-field fxFlex>\n          <mat-label>Level</mat-label>\n          <mat-select [(value)]=\"spell.level\" (selectionChange)=\"emitChange()\">\n            <mat-option [value]=\"0\">Cantrip</mat-option>\n            <mat-option [value]=\"1\">1st Level</mat-option>\n            <mat-option [value]=\"2\">2nd Level</mat-option>\n            <mat-option [value]=\"3\">3rd Level</mat-option>\n            <mat-option [value]=\"4\">4th Level</mat-option>\n            <mat-option [value]=\"5\">5th Level</mat-option>\n            <mat-option [value]=\"6\">6th Level</mat-option>\n            <mat-option [value]=\"7\">7th Level</mat-option>\n            <mat-option [value]=\"8\">8th Level</mat-option>\n            <mat-option [value]=\"9\">9th Level</mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field fxFlex>\n          <mat-label>School</mat-label>\n          <mat-select [(value)]=\"spell.school\" (selectionChange)=\"emitChange()\" *ngIf=\"!customSpellSchool\">\n            <mat-option value=\"A\">Abjuration</mat-option>\n            <mat-option value=\"C\">Conjuration</mat-option>\n            <mat-option value=\"D\">Divination</mat-option>\n            <mat-option value=\"E\">Enchantment</mat-option>\n            <mat-option value=\"V\">Evocation</mat-option>\n            <mat-option value=\"I\">Illusion</mat-option>\n            <mat-option value=\"N\">Necromancy</mat-option>\n            <mat-option value=\"T\">Transmutation</mat-option>\n            <mat-option value=\"Custom\" (click)=\"customSpellSchool = true\">Custom</mat-option>\n          </mat-select>\n          <input matInput placeholder=\"School\" (change)=\"emitChange()\" [(ngModel)]=\"spell.school\"\n                 *ngIf=\"customSpellSchool\">\n          <button mat-icon-button matSuffix matTooltip=\"Delete custom school\" (click)=\"customSpellSchool = false\"\n                  *ngIf=\"customSpellSchool\">\n            <mat-icon>remove_circle_outline</mat-icon>\n          </button>\n        </mat-form-field>\n\n        <mat-checkbox style=\"padding-right: 4px;\" fxFlex=\"nogrow\" [(ngModel)]=\"spell.ritual\" (change)=\"emitChange()\">Ritual</mat-checkbox>\n      </div>\n\n      <!-- TIME AND RANGE -->\n      <div fxLayout=\"row wrap\" style=\"gap: 6px;\">\n        <mat-form-field fxFlex style=\"max-width: calc(50%-3px)\">\n          <input matInput placeholder=\"Casting Time\" (change)=\"emitChange()\" [(ngModel)]=\"spell.casttime\">\n        </mat-form-field>\n\n        <mat-form-field fxFlex style=\"max-width: calc(50%-3px)\">\n          <input matInput placeholder=\"Range\" (change)=\"emitChange()\" [(ngModel)]=\"spell.range\">\n        </mat-form-field>\n      </div>\n\n      <!-- COMPONENTS -->\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"6px\" fxLayoutAlign=\"center center\">\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.components.verbal\" (change)=\"emitChange()\">\n          Verbal\n        </mat-checkbox>\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.components.somatic\" (change)=\"emitChange()\">\n          Somatic\n        </mat-checkbox>\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Material\" (change)=\"emitChange()\" [(ngModel)]=\"spell.components.material\">\n        </mat-form-field>\n      </div>\n\n      <!-- DURATION AND CONC -->\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"6px\" fxLayoutAlign=\"center center\">\n        <mat-form-field fxFlex>\n          <input matInput placeholder=\"Duration\" (change)=\"emitChange()\" [(ngModel)]=\"spell.duration\">\n        </mat-form-field>\n\n        <mat-checkbox fxFlex=\"nogrow\" [(ngModel)]=\"spell.concentration\" (change)=\"emitChange()\">\n          Concentration\n        </mat-checkbox>\n      </div>\n\n      <!-- DESCRIPTION -->\n      <mat-form-field>\n        <textarea matInput placeholder=\"Description\" rows=\"7\" (change)=\"emitChange()\"\n                  [(ngModel)]=\"spell.description\"></textarea>\n      </mat-form-field>\n\n      <!-- HIGHER LEVELS -->\n      <mat-form-field>\n        <textarea matInput placeholder=\"At Higher Levels\" rows=\"3\" (change)=\"emitChange()\"\n                  [(ngModel)]=\"spell.higherlevels\"></textarea>\n      </mat-form-field>\n\n      <!-- CLASSES AND SUBCLASSES -->\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"6px\">\n        <mat-form-field fxFlex matTooltip=\"Separate classes with commas.\">\n          <input matInput placeholder=\"Classes\" (change)=\"emitChange()\" [(ngModel)]=\"spell.classes\">\n        </mat-form-field>\n\n        <mat-form-field fxFlex matTooltip=\"Separate subclasses with commas.\">\n          <input matInput placeholder=\"Subclasses\" (change)=\"emitChange()\" [(ngModel)]=\"spell.subclasses\">\n        </mat-form-field>\n      </div>\n    </div>\n\n    <!-- ACTION BUTTONS -->\n    <div class=\"actions\" fxLayout=\"row\">\n      <span fxFlex *ngIf=\"spell.image === undefined\">\n        <button mat-icon-button matTooltip=\"Add image\" (click)=\"spell.image=''; emitChange()\">\n          <mat-icon aria-label=\"Add image\">add_photo_alternate</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Export to JSON\" (click)=\"beginJSONExport()\">\n          <mat-icon aria-label=\"Export to JSON\">vertical_align_top</mat-icon>\n        </button>\n      </span>\n      <span fxFlex>\n        <button mat-icon-button matTooltip=\"Edit Automation\" (click)=\"moveToEditor.emit()\">\n          <mat-icon aria-label=\"Edit Automation\">build</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isFirst\">\n        <button mat-icon-button matTooltip=\"Move Up\" (click)=\"moveUp.emit()\">\n          <mat-icon aria-label=\"Move Up\">arrow_upward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex *ngIf=\"!isLast\">\n        <button mat-icon-button matTooltip=\"Move Down\" (click)=\"moveDown.emit()\">\n          <mat-icon aria-label=\"Move Down\">arrow_downward</mat-icon>\n        </button>\n      </span>\n      <span fxFlex=\"grow\"></span>\n      <span fxFlex>\n        <button mat-icon-button color=\"warn\" (click)=\"delete.emit()\">\n          <mat-icon aria-label=\"Delete\">delete</mat-icon>\n        </button>\n      </span>\n    </div>\n  </ng-template>\n</mat-expansion-panel>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Spell, SPELL_SCHOOLS} from '../../../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../../../schemas/UserInfo';\nimport {JSONExportDialog} from '../../../../../shared/dialogs/json-export-dialog/json-export-dialog.component';\n\n@Component({\n  selector: 'avr-spell-detail',\n  templateUrl: './spell-detail.component.html',\n  styleUrls: ['./spell-detail.component.css']\n})\nexport class SpellDetailComponent implements OnInit {\n\n  @Input() spell: Spell;\n  @Input() isFirst: boolean;\n  @Input() isLast: boolean;\n  @Output() moveUp = new EventEmitter();\n  @Output() moveDown = new EventEmitter();\n  @Output() changed = new EventEmitter();\n  @Output() opened = new EventEmitter();\n  @Output() delete = new EventEmitter();\n  @Output() moveToEditor = new EventEmitter();\n\n  customSpellSchool: boolean;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  ngOnInit() {\n    this.customSpellSchool = !SPELL_SCHOOLS.includes(this.spell.school);\n  }\n\n  emitChange() {\n    this.changed.emit();\n  }\n\n  beginJSONExport() {\n    this.dialog.open(JSONExportDialog, {\n      data: {name: this.spell.name, data: this.spell},\n      width: '60%'\n    });\n  }\n\n}\n","<div class=\"container\" fxLayout=\"row\" fxLayoutGap=\"8px\">\n  <div class=\"spell-list\" fxFlex=\"grow\" *ngIf=\"tome.spells.length\">\n    <mat-accordion>\n      <avr-spell-detail *ngFor=\"let spell of tome.spells; first as isFirst; last as isLast\" [spell]=\"spell\"\n                        [isFirst]=\"isFirst\" [isLast]=\"isLast\" (moveUp)=\"moveUp(spell)\" (moveDown)=\"moveDown(spell)\"\n                        (changed)=\"changed.emit()\" (opened)=\"selectedSpell = spell; selected.emit(spell)\"\n                        (delete)=\"deleteSpell(spell)\" (moveToEditor)=\"moveToEditor.emit()\" ></avr-spell-detail>\n      <mat-card fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"new-spell-card\">\n        <span class=\"no-text-cursor\">New...</span>\n        <span class=\"toolbar-spacer\"></span>\n        <span>\n            <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"newFromJSON()\">\n              <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n            </button>\n            <button mat-icon-button matTooltip=\"Copy SRD spell\" (click)=\"newFromSRD()\">\n              <mat-icon aria-label=\"From existing spell\">scanner</mat-icon>\n            </button>\n            <button mat-icon-button (click)=\"newSpell()\">\n              <mat-icon aria-label=\"New\">add</mat-icon>\n            </button>\n          </span>\n      </mat-card>\n    </mat-accordion>\n  </div>\n\n  <div class=\"spell-list\" fxFlex=\"grow\" *ngIf=\"!tome.spells.length\">\n    <mat-card>\n      <p>Looks like this tome is empty.</p>\n      <button mat-raised-button color=\"accent\" (click)=\"newSpell()\">Make a Spell</button>\n      <button mat-icon-button matTooltip=\"Import from JSON\" (click)=\"newFromJSON()\">\n        <mat-icon aria-label=\"Import from JSON\">vertical_align_bottom</mat-icon>\n      </button>\n      <button mat-icon-button matTooltip=\"Copy SRD spell\" (click)=\"newFromSRD()\">\n        <mat-icon aria-label=\"From existing spell\">scanner</mat-icon>\n      </button>\n    </mat-card>\n  </div>\n\n  <div class=\"spell-preview mat-typography mat-elevation-z3\" fxFlex=\"grow\" fxHide fxShow.gt-xs=\"true\">\n    <avr-spell-embed [name]=\"selectedSpell?.name\" [image]=\"selectedSpell?.image\" [level]=\"selectedSpell?.level\"\n                     [school]=\"selectedSpell?.school\" [classes]=\"selectedSpell?.classes\"\n                     [subclasses]=\"selectedSpell?.subclasses\" [verbal]=\"selectedSpell?.components.verbal\"\n                     [somatic]=\"selectedSpell?.components.somatic\" [material]=\"selectedSpell?.components.material\"\n                     [time]=\"selectedSpell?.casttime\" [ritual]=\"selectedSpell?.ritual\" [range]=\"selectedSpell?.range\"\n                     [concentration]=\"selectedSpell?.concentration\" [duration]=\"selectedSpell?.duration\"\n                     [description]=\"selectedSpell?.description\" [higherlevels]=\"selectedSpell?.higherlevels\"\n                     [user]=\"user\"></avr-spell-embed>\n  </div>\n</div>\n","import {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {map} from 'rxjs/operators';\nimport {Spell, Tome} from '../../../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../../../schemas/UserInfo';\nimport {JSONImportDialog} from '../../../../../shared/dialogs/json-import-dialog/json-import-dialog.component';\nimport {SRDCopyDialog} from '../../../../../shared/dialogs/srd-copy-dialog/srd-copy-dialog.component';\nimport {HomebrewService} from '../../../homebrew.service';\n\n@Component({\n  selector: 'avr-spell-list',\n  templateUrl: './spell-list.component.html',\n  styleUrls: ['./spell-list.component.scss']\n})\nexport class SpellListComponent implements OnInit {\n\n  @Input() tome: Tome;\n  @Input() user: UserInfo;\n  @Output() selected = new EventEmitter();\n  @Output() changed = new EventEmitter();\n  @Output() moveToEditor = new EventEmitter();\n\n  selectedSpell: Spell;\n\n  constructor(private dialog: MatDialog, private hbService: HomebrewService) {\n  }\n\n  ngOnInit() {\n  }\n\n  newSpell() {\n    this.tome.spells.push(new Spell());\n    this.changed.emit();\n  }\n\n  newFromJSON() {\n\n    const dialogRef = this.dialog.open(JSONImportDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {validator: (data) => this.validateSpellJSON(dialogRef, data)}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        let spell: Spell | Spell[] = result;\n        console.log(spell);\n        if (spell instanceof Array) {\n          this.tome.spells.push(...spell);\n        } else {\n          this.tome.spells.push(spell);\n        }\n        this.changed.emit();\n      }\n    });\n  }\n\n  newFromSRD() {\n    const dialogRef = this.dialog.open(SRDCopyDialog, {\n      width: '60%',\n      disableClose: true,\n      data: {getter: () => this.hbService.getTemplateSpells().pipe(map(value => value.data)), namer: a => a.name}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.tome.spells.push(result);\n        this.changed.emit();\n      }\n    });\n  }\n\n  deleteSpell(spell: Spell) {\n    this.tome.spells = this.tome.spells.filter(obj => obj !== spell);\n    this.changed.emit();\n  }\n\n  // spell import validation\n  validateSpellJSON(dialogRef: MatDialogRef<JSONImportDialog>, data) {\n    this.hbService.validateSpellJSON(data)\n      .subscribe(\n        result => {\n          dialogRef.componentInstance.loading = false;\n          if (result.success) {\n            dialogRef.close(data);\n          } else {\n            dialogRef.componentInstance.error = result.error;\n          }\n        }\n      );\n  }\n\n  // move items in list\n  moveUp(spell: Spell) {\n    const index = this.tome.spells.indexOf(spell);\n    const newIndex = index - 1;\n    if (newIndex > -1) {\n      moveItemInArray(this.tome.spells, index, newIndex);\n      this.changed.emit();\n    }\n  }\n\n  moveDown(spell: Spell) {\n    const index = this.tome.spells.indexOf(spell);\n    const newIndex = index + 1;\n    if (newIndex < this.tome.spells.length) {\n      moveItemInArray(this.tome.spells, index, newIndex);\n      this.changed.emit();\n    }\n  }\n}\n","<div *ngIf=\"spell\" class=\"container\">\n  <mat-card>\n    <p>Editing {{spell.name}}...</p>\n    <p>You can find help on how to use the spell editor\n      <a target=\"_blank\" href=\"https://avrae.readthedocs.io/en/stable/automation_ref.html\">here</a>.</p>\n    <avr-automation-editor [automation]=\"getAutomation(spell)\" [spell]=\"spell\"\n                           (changed)=\"changed.emit()\"></avr-automation-editor>\n  </mat-card>\n</div>\n\n<div *ngIf=\"!spell\" class=\"container\">\n  <mat-card>\n    <p>\n      No spell selected.\n    </p>\n  </mat-card>\n</div>\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AutomationEffect} from '../../../../../schemas/homebrew/AutomationEffects';\nimport {Spell} from '../../../../../schemas/homebrew/Spells';\n\n@Component({\n  selector: 'avr-spell-editor',\n  templateUrl: './spell-editor.component.html',\n  styleUrls: ['./spell-editor.component.css']\n})\nexport class SpellEditorComponent implements OnInit {\n\n  @Input() spell: Spell;\n  @Output() changed = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  getAutomation(spell: Spell): AutomationEffect[] {\n    if (spell.automation === null) {\n      spell.automation = [];\n    }\n    return spell.automation;\n  }\n\n\n}\n","<div *ngIf=\"tome && canEdit != undefined\">\n  <mat-toolbar color=\"primary\" class=\"tome-toolbar\">\n    <span>\n      <button mat-icon-button (click)=\"back()\">\n        <mat-icon aria-label=\"Back\">arrow_back</mat-icon>\n      </button>\n    </span>\n    <span>\n      {{tome.name}}\n    </span>\n    <span class=\"toolbar-spacer\"></span>\n    <span>\n      <button mat-icon-button (click)=\"commit()\">\n        <mat-icon aria-label=\"Save\">save</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginSettings()\">\n        <mat-icon aria-label=\"Settings\">settings</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"beginShare()\">\n        <mat-icon aria-label=\"Share\">launch</mat-icon>\n      </button>\n    </span>\n  </mat-toolbar>\n\n  <mat-tab-group backgroundColor=\"primary\" #tabGroup>\n    <mat-tab label=\"Spells\">\n      <avr-spell-list [tome]=\"tome\" [user]=\"user\" (selected)=\"selectedSpell = $event\"\n                      (changed)=\"ensureChangesNotif()\" (moveToEditor)=\"tabGroup.selectedIndex = 1\"></avr-spell-list>\n    </mat-tab>\n    <mat-tab label=\"Editor\">\n      <avr-spell-editor [spell]=\"selectedSpell\" (changed)=\"ensureChangesNotif()\"></avr-spell-editor>\n    </mat-tab>\n  </mat-tab-group>\n</div>\n\n<div *ngIf=\"!tome\">\n  <div class=\"container\">\n    <mat-card>\n      <mat-spinner [diameter]=\"24\"></mat-spinner>\n      <p class=\"mat-error\" *ngIf=\"error\">\n        {{error}}\n      </p>\n    </mat-card>\n  </div>\n</div>\n\n<div *ngIf=\"tome && !canEdit\">\n  <div class=\"container\">\n    <mat-card>\n      <p>You do not have permission to edit this tome.</p>\n      <button mat-raised-button color=\"accent\" (click)=\"back()\">Go Back</button>\n    </mat-card>\n  </div>\n</div>\n","import {Location} from '@angular/common';\nimport {Component, OnDestroy, OnInit} from '@angular/core';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {ActivatedRoute, Router} from '@angular/router';\n\nimport {Spell, Tome} from '../../../../schemas/homebrew/Spells';\nimport {UserInfo} from '../../../../schemas/UserInfo';\nimport {getUser} from '../../../APIHelper';\nimport {DashboardService} from '../../../dashboard.service';\nimport {HomebrewService} from '../../homebrew.service';\nimport {TomeOptionsDialog} from '../dialogs/tome-options-dialog.component';\nimport {TomeShareDialog} from '../dialogs/tome-share-dialog.component';\nimport {ValidationSnackbar} from '../../../../shared/validation-snackbar/validation-snackbar.component';\n\n\n@Component({\n  selector: 'avr-tome-detail',\n  templateUrl: './tome-detail.component.html',\n  styleUrls: ['./tome-detail.component.scss']\n})\nexport class TomeDetailComponent implements OnInit, OnDestroy {\n\n  tome: Tome;\n  user: UserInfo = getUser();\n  canEdit: boolean;\n  isOwner: boolean;\n  changesOpen = false;\n  selectedSpell: Spell;\n  error: string;\n\n  constructor(private route: ActivatedRoute, private homebrewService: HomebrewService,\n              private dashboardService: DashboardService, private location: Location, private dialog: MatDialog,\n              private router: Router, private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.getTome();\n  }\n\n  ngOnDestroy() {\n    this.snackBar.dismiss();\n  }\n\n  getTome() {\n    const id = this.route.snapshot.paramMap.get('tome');\n    this.homebrewService.getTome(id)\n      .subscribe(response => {\n        if (response.success) {\n          this.tome = response.data;\n          this.calcCanEdit();\n        } else {\n          this.error = response.error;\n        }\n      });\n  }\n\n  calcCanEdit() {\n    if (!this.tome || !this.user) {\n      return;\n    }\n    this.isOwner = this.user.id === this.tome.owner;\n    if (this.isOwner) {\n      this.canEdit = true;\n    } else {\n      const id = this.tome._id;\n      this.homebrewService.getTomeEditors(id)\n        .subscribe(response => this.canEdit = response.data.some(e => e === this.user.id));\n    }\n  }\n\n  ensureChangesNotif() {\n    if (!this.changesOpen) {\n      this.changesOpen = true;\n      let snackBarRef = this.snackBar.open('You have unsaved changes!', 'Save', {duration: -1, horizontalPosition: 'right'});\n\n      snackBarRef.onAction().subscribe(() => {\n        this.commit();\n      });\n    }\n  }\n\n  beginShare() {\n    const dialogRef = this.dialog.open(TomeShareDialog, {\n      data: this.tome,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        this.tome = Object.assign(this.tome, result);\n        this.commit();\n      }\n    });\n  }\n\n  beginSettings() {\n    const dialogRef = this.dialog.open(TomeOptionsDialog, {\n      data: this.tome,\n      width: '40%',\n      disableClose: true\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        console.log(result);\n        if (result.delete) {\n          this.delete();\n        } else {\n          this.tome = Object.assign(this.tome, result);\n          this.commit();\n        }\n      }\n    });\n  }\n\n  commit() {\n    // HTTP PUT /homebrew/spells/:tome\n    this.homebrewService.putTome(this.tome)\n      .subscribe(result => {\n        this.changesOpen = false;\n        if (result.success) {\n          this.snackBar.open(`${result.data} Use \"!tome ${this.tome.name}\" to activate the pack in Discord!`, null, {horizontalPosition: 'right'});\n        } else {\n          this.snackBar.openFromComponent(ValidationSnackbar, {\n            data: {\n              html: `${result.error}`\n            },\n            horizontalPosition: 'right',\n            duration: -1\n          });  \n        }\n      });\n  }\n\n  delete() {\n    // HTTP DELETE /homebrew/spells/:tome\n    this.homebrewService.deleteTome(this.tome)\n      .subscribe(result => {\n        if (!result.success) {\n          this.snackBar.openFromComponent(ValidationSnackbar, {\n            data: {\n              html: `${result.error}`\n            },\n            horizontalPosition: 'right',\n            duration: -1,\n            panelClass: ['mat-simple-snackbar']\n          }\n          );\n        } else {\n          this.router.navigate(['../'], {relativeTo: this.route});\n        }\n      });\n  }\n\n  back() {\n    this.location.back();\n  }\n}\n\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {ItemsComponent} from './items/items.component';\nimport {PackDetailComponent} from './items/pack-detail/pack-detail.component';\nimport {SpellsComponent} from './spells/spells.component';\nimport {TomeDetailComponent} from './spells/tome-detail/tome-detail.component';\n\nconst routes: Routes = [\n  {\n    path: '', children: [\n      {path: 'items', component: ItemsComponent},\n      {path: 'items/:pack', component: PackDetailComponent},\n\n      {path: 'spells', component: SpellsComponent},\n      {path: 'spells/:tome', component: TomeDetailComponent},\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomebrewRoutingModule {\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule} from '@angular/forms';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {MaterialModule} from '../../material/material.module';\nimport {AutomationEditorModule} from '../../shared/automation-editor/automation-editor.module';\nimport {DiscordEmbedModule} from '../../shared/discord-embed/discord-embed.module';\nimport {SpellEmbedModule} from '../../shared/spell-embed/spell-embed.module';\n\nimport {HomebrewRoutingModule} from './homebrew-routing.module';\nimport {ItemsComponent} from './items/items.component';\nimport {NewPackDialog} from './items/new-pack-dialog/new-pack-dialog.component';\nimport {PackDeleteDialog} from './items/pack-delete-dialog/pack-delete-dialog.component';\nimport {ItemDetailComponent} from './items/pack-detail/item-detail/item-detail.component';\nimport {PackDetailComponent} from './items/pack-detail/pack-detail.component';\nimport {PackMarkdownDialog} from './items/pack-markdown-dialog/pack-markdown-dialog.component';\nimport {PackOptionsDialog} from './items/pack-options-dialog/pack-options-dialog.component';\nimport {PackShareDialog} from './items/pack-share-dialog/pack-share-dialog.component';\nimport {NewTomeDialog} from './spells/dialogs/new-tome-dialog.component';\nimport {TomeDeleteDialog} from './spells/dialogs/tome-delete-dialog.component';\nimport {TomeMarkdownDialog} from './spells/dialogs/tome-markdown-dialog/tome-markdown-dialog.component';\nimport {TomeOptionsDialog} from './spells/dialogs/tome-options-dialog.component';\nimport {TomeShareDialog} from './spells/dialogs/tome-share-dialog.component';\nimport {SpellsComponent} from './spells/spells.component';\nimport {SpellDetailComponent} from './spells/tome-detail/spell-detail/spell-detail.component';\nimport {SpellPanelDescriptionComponent} from './spells/tome-detail/spell-detail/spell-panel-description/spell-panel-description.component';\nimport {SpellEditorComponent} from './spells/tome-detail/spell-editor/spell-editor.component';\nimport {SpellListComponent} from './spells/tome-detail/spell-list/spell-list.component';\nimport {TomeDetailComponent} from './spells/tome-detail/tome-detail.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    FlexLayoutModule,\n    MarkdownModule.forChild(),\n    DiscordEmbedModule,\n    AutomationEditorModule,\n    SpellEmbedModule,\n    HomebrewRoutingModule,\n  ],\n  declarations: [\n    ItemsComponent,\n    PackDetailComponent,\n    NewPackDialog,\n    PackOptionsDialog,\n    PackShareDialog,\n    PackDeleteDialog,\n    ItemDetailComponent,\n    PackMarkdownDialog,\n\n    SpellsComponent,\n    NewTomeDialog,\n    TomeShareDialog,\n    TomeDetailComponent,\n    SpellDetailComponent,\n    SpellListComponent,\n    TomeOptionsDialog,\n    TomeDeleteDialog,\n    SpellPanelDescriptionComponent,\n    SpellEditorComponent,\n    TomeMarkdownDialog,\n  ]\n})\nexport class HomebrewModule {\n}\n"],"sourceRoot":"webpack:///","file":"978.a67386ddff2a111f.js"}